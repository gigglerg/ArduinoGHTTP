<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp_ethercard_windoze_toast_notification.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-b53ec0f(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp_ethercard_windoze_toast_notification_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_ethercard_windoze_toast_notification.ino</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * \file</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Example use of GHTTP (Embedded library for parsing HTTP requests and creating responses) - Example of complete request and response using data processed </span></div>
<div class="line"><span class="comment"> * by STM32 ethercard library port on maple mini clone hardware.  A few routes exist covering HTML and PNG image data served over port 80 with the root page </span></div>
<div class="line"><span class="comment"> * allowing client side javascript control of notifications.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * NOTE: You must use Microsoft Edge.  Chrome below M62 will work however recent additions require SSL certificates for anything other than localhost</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * This file could be wrapped into a class to hide the ethercard specifics and remove anything related to physical i/f hardware.  All of the routes no nothing </span></div>
<div class="line"><span class="comment"> * about this interface.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * For STM32.  Requires: https://github.com/stm32duino 1.4.0 and library Serasidis_EtherCard_STM with enc28j60.cpp.patch applied</span></div>
<div class="line"><span class="comment"> * SPI Wiring:</span></div>
<div class="line"><span class="comment"> *     Enc28jxx   Maple Mini</span></div>
<div class="line"><span class="comment"> *     SI      =&gt; I/O 4</span></div>
<div class="line"><span class="comment"> *     SO      =&gt; I/O 5</span></div>
<div class="line"><span class="comment"> *     CK      =&gt; I/O 6</span></div>
<div class="line"><span class="comment"> *     CS      =&gt; I/O 7</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * For AVR Mega.  Requires: Library njh-EtherCard</span></div>
<div class="line"><span class="comment"> * SPI Wiring:</span></div>
<div class="line"><span class="comment"> *     Enc28jxx   Mega2560</span></div>
<div class="line"><span class="comment"> *     SI      =&gt; I/O 51</span></div>
<div class="line"><span class="comment"> *     SO      =&gt; I/O 50</span></div>
<div class="line"><span class="comment"> *     CK      =&gt; I/O 52</span></div>
<div class="line"><span class="comment"> *     CS      =&gt; I/O 53</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Dave.C, 2020</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/* Adjust some parameters to suit our application */</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_PROCESS_POST_FILE_VARS 0</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_PROCESS_COOKIES 1</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_COOKIE 5</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_SERVER_USE_SESSIONS 0</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_HEADERS 15</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_VARS 8</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_SERVER_MAX_ROUTES    5</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_SERVER_ACCEPT_AUTHORIZATION 0</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include</span></div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><span class="preprocessor">#include &lt;EtherCard.h&gt;</span></div>
<div class="line"><span class="preprocessor">#define SPI_SS    SS</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"><span class="preprocessor">#include &lt;EtherCard_STM.h&gt;</span></div>
<div class="line"><span class="preprocessor">#define SPI_SS    D7</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">// Hack around and see what you get working, you&#39;re in unknown territory</span></div>
<div class="line"><span class="preprocessor">#error Unsupported architecture</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;net.h&quot;</span> <span class="comment">// From Ethercard library TCP/IP constants (low level)</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="ghttp_8h.htm">ghttp.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;shared.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;route/routeroot.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;route/routetoastjpg.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;route/routenotificationjs.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>examples::ghttp_ethercard_windoze_toast_notification;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Request/response buffer for EtherCard library</span></div>
<div class="line"><span class="keywordtype">byte</span> <a name="a0"></a><a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a>[4*1024];</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Our application&#39;s shared data, like PHP super globals</span></div>
<div class="line"><a name="_a1"></a><a class="code" href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_shared.htm">Shared</a> <a name="a2"></a><a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Our application&#39;s route manager</span></div>
<div class="line"><a name="_a3"></a><a class="code" href="classghttp_1_1_route_manager.htm">ghttp::RouteManager&lt;GHTTP_SERVER_MAX_ROUTES, ghttp::Route&lt;Shared&gt;</a>, <a class="code" href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_shared.htm">Shared</a>&gt;  rm(&amp;<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create our routes handled by this application</span></div>
<div class="line"><a name="_a4"></a><a class="code" href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_root.htm">RouteRoot</a>            route_root;</div>
<div class="line"><a name="_a5"></a><a class="code" href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_toast_jpg.htm">RouteToastJpg</a>        route_toastjpg;</div>
<div class="line"><a name="_a6"></a><a class="code" href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_notification_js.htm">RouteNotificationJs</a>  route_notificationjs;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">    Serial.begin(9600);</div>
<div class="line">    <span class="comment">// This while implies you should open Debug serial console before it will run - well it is a demo...</span></div>
<div class="line">    <span class="keywordflow">while</span>(!Serial) { Serial.available(); }</div>
<div class="line"> </div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;setup()&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// This would generally be setup once at POR</span></div>
<div class="line">    <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.<a name="a7"></a>server.<a name="a8"></a>ip4           = <span class="stringliteral">&quot;10.0.0.10&quot;</span>;</div>
<div class="line">    <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.server.<a name="a9"></a>mac           = <span class="stringliteral">&quot;123456123456&quot;</span>;</div>
<div class="line">    <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.server.<a name="a10"></a>gateway_ip4   = <span class="stringliteral">&quot;10.0.0.1&quot;</span>;</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Server TCP/IP port</span></div>
<div class="line">    ether.hisport = 80;</div>
<div class="line"> </div>
<div class="line">    pinMode(SPI_SS, OUTPUT);    <span class="comment">// CS</span></div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (ether.begin(<span class="keyword">sizeof</span>(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a>), &amp;<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.server.mac.<a name="a11"></a>u8[0], SPI_SS) == 0) {</div>
<div class="line">        Serial.println( <span class="stringliteral">&quot;Failed to access Ethernet controller&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// As per Ethercard examples, setup static IP addresses of server and local gateway</span></div>
<div class="line">    ether.staticSetup(&amp;<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.server.ip4.<a name="a12"></a>u8[0], &amp;<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.server.gateway_ip4.u8[0]);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register routes for this application</span></div>
<div class="line">    <span class="keywordflow">if</span> (-1 == rm.Register(&amp;route_root)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of root failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (-1 == rm.Register(&amp;route_toastjpg)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of toastjpg failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (-1 == rm.Register(&amp;route_notificationjs)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of notificationjs failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#define PACKET_CHUNK_SIZE 512    // Bytes</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">/* &lt;rant&gt;</span></div>
<div class="line"><span class="comment"> * If I had known the issues and how simplistic the Ethercard API was - I&#39;d of used another h/w i/f, personally this is the reason for writing new libraries as </span></div>
<div class="line"><span class="comment"> * everything I touch in Arduino is either a hack, half finished or doesn&#39;t work with little to no help beyond obvious examples that don&#39;t use the i/f in the way</span></div>
<div class="line"><span class="comment"> * you&#39;d expect.  What is really required is a POSIX socket interface and the end of this mishmash of piecemeal ethernet TCP/IP interface(s).  Users shouldn&#39;t </span></div>
<div class="line"><span class="comment"> * need to know about protocol specific sequence numbers, acknowledges and anything else under the hood.</span></div>
<div class="line"><span class="comment"> * &lt;/rant&gt;</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">void</span> SendLargeResponse() {</div>
<div class="line">    uint16_t tl = <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.<a name="a13"></a>response.<a name="a14"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>(), o, l = PACKET_CHUNK_SIZE;</div>
<div class="line">    ether.httpServerReplyAck(); <span class="comment">// Send ack to the request</span></div>
<div class="line">    <span class="keywordflow">for</span>(o=0; o&lt;tl; o+=PACKET_CHUNK_SIZE) {</div>
<div class="line">        <span class="keywordflow">if</span> ((o+PACKET_CHUNK_SIZE) &gt; tl) {</div>
<div class="line">            l = tl - o; <span class="comment">// Remainder, last chunk</span></div>
<div class="line">        }</div>
<div class="line">        <span class="comment">// Response data after first chunk?</span></div>
<div class="line">        <span class="keywordflow">if</span> (o&gt;0) {</div>
<div class="line">            <span class="comment">// Move each data chunk down in response buffer, just above TCP/IP header</span></div>
<div class="line">            memcpy(<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.<a name="a15"></a>misc.<a name="a16"></a>response_buffer, <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.misc.response_buffer+o, l);</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">if</span> ((o+l) == tl) {</div>
<div class="line">            ether.httpServerReply_with_flags(l, TCP_FLAGS_ACK_V | TCP_FLAGS_FIN_V);</div>
<div class="line">        }<span class="keywordflow">else</span> {</div>
<div class="line">            ether.httpServerReply_with_flags(l, TCP_FLAGS_ACK_V);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">    uint16_t buffer_pos;</div>
<div class="line">    <span class="keywordtype">char</span>* rtx_data;</div>
<div class="line"> </div>
<div class="line">    Serial.available();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Wait for an incoming TCP packet, but ignore its contents</span></div>
<div class="line">    buffer_pos = ether.packetLoop(ether.packetReceive());</div>
<div class="line">    <span class="keywordflow">if</span> (buffer_pos) {</div>
<div class="line">        rtx_data = (<span class="keywordtype">char</span> *) <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a> + buffer_pos;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">//Serial.println(&quot;request&quot;);</span></div>
<div class="line">        <span class="comment">//Serial.println(rtx_data);</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Update client information (ip/mac) from ethercard library.  This is really only required for sessions as far as GHTTP is concerned</span></div>
<div class="line"><span class="preprocessor">#if GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line">        <span class="keywordflow">for</span>(uint8_t i=0; i&lt;4; i++) {</div>
<div class="line">            <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.<a name="a17"></a>client.ip4.u8[i] = <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a>[IP_SRC_P + i];</div>
<div class="line">        }</div>
<div class="line"><span class="preprocessor">#if GHTTP_SESSIONMGR_INCLUDE_MAC == 1</span></div>
<div class="line">        <span class="keywordflow">for</span>(uint8_t i=0; i&lt;6; i++) {</div>
<div class="line">            <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.client.mac.u8[i] = <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a>[ETH_SRC_MAC + i];</div>
<div class="line">        }</div>
<div class="line"><span class="preprocessor">#endif // GHTTP_SESSIONMGR_INCLUDE_MAC == 1</span></div>
<div class="line"><span class="preprocessor">#endif // GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Parse our request...</span></div>
<div class="line">        uint16_t ci = <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.<a name="a18"></a>request.<a name="a19"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab0a4f01bfba2cb2a460440c0001a1303">Parse</a>(rtx_data, strlen(rtx_data), <span class="keyword">sizeof</span>(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">Ethernet::buffer</a>) - buffer_pos, <span class="comment">/*parse_content*/</span><span class="keyword">true</span>, <span class="comment">/*segmentation*/</span><span class="keyword">false</span>);</div>
<div class="line">        <span class="keywordflow">if</span> (<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.request.<a name="a20"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.request.<a name="a21"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line">            Serial.print(<span class="stringliteral">&quot;Error: &quot;</span>);</div>
<div class="line">            Serial.println(<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.request.<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>(), DEC);</div>
<div class="line">        }<span class="keywordflow">else</span> {</div>
<div class="line">            <span class="comment">// Not using sessions and responses don&#39;t need request variables so we can use entire request buffer for response.  We could set this per request but this demo is simple so here will do for all responses</span></div>
<div class="line">            <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.response.<a name="a22"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">SetMaximum</a>(<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.request.<a name="a23"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a>());</div>
<div class="line">            <span class="comment">// Ethercard responses over TCP need to skip packet header hence the get TCP offset call.  I didn&#39;t want any hardware specific calls in my routes so decided to keep it in a variable</span></div>
<div class="line">            <a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.misc.response_buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(ether.tcpOffset());</div>
<div class="line">            </div>
<div class="line">            <span class="comment">// Service routes</span></div>
<div class="line">            <span class="keywordflow">if</span> (-1 == rm.Service()) {</div>
<div class="line">                Serial.print(<span class="stringliteral">&quot;No route taken for &#39;&quot;</span>);</div>
<div class="line">                Serial.print(<a class="code" href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a>.request.<a name="a24"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a name="a25"></a><a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>());</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;&#39;\n&quot;</span>);</div>
<div class="line">                ether.httpServerReply(0);</div>
<div class="line">            }<span class="keywordflow">else</span> {</div>
<div class="line">                <span class="comment">//Serial.println(sd.response.GetBuffer());</span></div>
<div class="line">                SendLargeResponse();</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aeeb9acdefa93179e395c6c7d7d001244"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">ghttp::HTTPBuffer::GetLength</a></div><div class="ttdeci">uint16_t GetLength() const</div><div class="ttdoc">Get length.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:231</div></div>
<div class="ttc" id="aghttp__ethercard__windoze__toast__notification_8ino_htm_ae25358bd172d439a0818a8cafb76c8a1"><div class="ttname"><a href="ghttp__ethercard__windoze__toast__notification_8ino.htm#ae25358bd172d439a0818a8cafb76c8a1">sd</a></div><div class="ttdeci">Shared sd</div><div class="ttdoc">Our applications shared data, need access to request/response instances.</div><div class="ttdef"><b>Definition:</b> ghttp_ethercard_windoze_toast_notification.ino:70</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ad9c24208c9eba1dbe55baf79379b8b48"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">ghttp::HTTPRequest::url</a></div><div class="ttdeci">HTTPSubstring url</div><div class="ttdoc">RFC 1738, Decoded URL, i.e. route like /msg or / or /request etc.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:82</div></div>
<div class="ttc" id="aghttp_8h_htm"><div class="ttname"><a href="ghttp_8h.htm">ghttp.h</a></div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a69412ab74669a174f581f7c0349db233"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">ghttp::HTTPBuffer::GetMaximum</a></div><div class="ttdeci">uint16_t GetMaximum() const</div><div class="ttdoc">Get buffer maximum.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:261</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a762b73d5273c2ccf934734c0bb98dda2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">ghttp::HTTPRequest::GetLastError</a></div><div class="ttdeci">ERR GetLastError() const</div><div class="ttdoc">Get last error.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:128</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ghttp::HTTPRequest::ERR_NONE</a></div><div class="ttdeci">@ ERR_NONE</div><div class="ttdoc">0 - No error</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:47</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aef79015e1a8fb34dd96424849e510831"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">ghttp::HTTPBuffer::SetMaximum</a></div><div class="ttdeci">void SetMaximum(const uint16_t max_length)</div><div class="ttdoc">Set buffer maximum.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:271</div></div>
<div class="ttc" id="aclassghttp_1_1_route_manager_htm"><div class="ttname"><a href="classghttp_1_1_route_manager.htm">ghttp::RouteManager</a></div><div class="ttdoc">Routemanager class used to guide processing of requests and handling failures along with servicing re...</div><div class="ttdef"><b>Definition:</b> ghttp_routemanager.h:23</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab0a4f01bfba2cb2a460440c0001a1303"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab0a4f01bfba2cb2a460440c0001a1303">ghttp::HTTPRequest::Parse</a></div><div class="ttdeci">uint16_t Parse(char *request_buffer, uint16_t length, uint16_t max_length, const bool parse_content=true, const bool segmentation=true)</div><div class="ttdoc">Request parse.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:158</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5fb7bb7479294882fcec864ccd6024a2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">ghttp::HTTPSubstring::Get</a></div><div class="ttdeci">const char * Get() const</div><div class="ttdoc">Get string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:70</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_root_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_root.htm">examples::ghttp_ethercard_windoze_toast_notification::RouteRoot</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/&quot;.</div><div class="ttdef"><b>Definition:</b> routeroot.h:15</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_notification_js_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_notification_js.htm">examples::ghttp_ethercard_windoze_toast_notification::RouteNotificationJs</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/js/notification....</div><div class="ttdef"><b>Definition:</b> routenotificationjs.h:15</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_shared_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_shared.htm">examples::ghttp_ethercard_windoze_toast_notification::Shared</a></div><div class="ttdoc">Application specific class holding everything required to process request/reponses.</div><div class="ttdef"><b>Definition:</b> shared.h:19</div></div>
<div class="ttc" id="aghttp__static__pre__route__request__response_8ino_htm_aad6df635ec0b9820ef1ee069e0263614"><div class="ttname"><a href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a></div><div class="ttdeci">char buffer[448]</div><div class="ttdoc">Single packet buffer for EtherCard library.</div><div class="ttdef"><b>Definition:</b> ghttp_static_pre_route_request_response.ino:81</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_toast_jpg_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__windoze__toast__notification_1_1_route_toast_jpg.htm">examples::ghttp_ethercard_windoze_toast_notification::RouteToastJpg</a></div><div class="ttdoc">An example implemented route for HTTP GET requests on &quot;image/toast.jpg&quot;.</div><div class="ttdef"><b>Definition:</b> routetoastjpg.h:17</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 14:59:56 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
