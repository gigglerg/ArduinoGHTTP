<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp_ethercard_get_json_rest_die.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp_ethercard_get_json_rest_die_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_ethercard_get_json_rest_die.ino</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * \file</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Example use of GHTTP (Embedded library for parsing HTTP requests and creating responses) - Example of complete request and response using data processed </span></div>
<div class="line"><span class="comment"> * by STM32 ethercard library port on maple mini clone hardware.  A basic site over a number routes presenting HTML, Javascript, SVG and JSON all servered </span></div>
<div class="line"><span class="comment"> * over port 80.  Some SVG dice are drawn on your chosen client and the dot patterns are obtained in response from JSON REST requests to device.  The user </span></div>
<div class="line"><span class="comment"> * can invoke a JSON request or wait for a predetermined period.  Raw JSON both in and out are on display for reference.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Client side Javascript is used to manipulate DOM and CSS elements with content dynamically changed as new JSON response data comes from device.  Also An </span></div>
<div class="line"><span class="comment"> * internet connection is required as references are made to google hosted libraries for JQuery Javascript.</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * For STM32.  Requires: https://github.com/stm32duino 1.4.0 and library Serasidis_EtherCard_STM with enc28j60.cpp.patch applied</span></div>
<div class="line"><span class="comment"> * SPI Wiring:</span></div>
<div class="line"><span class="comment"> *     Enc28jxx   Maple Mini</span></div>
<div class="line"><span class="comment"> *     SI      =&gt; I/O 4</span></div>
<div class="line"><span class="comment"> *     SO      =&gt; I/O 5</span></div>
<div class="line"><span class="comment"> *     CK      =&gt; I/O 6</span></div>
<div class="line"><span class="comment"> *     CS      =&gt; I/O 7</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * For AVR Mega.  This example does not work as the image data spans banks requiring 32bit PROGMEM pointers, feel free to correct as my preference is ARM</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * DG, 2020</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include</span></div>
<div class="line"><span class="preprocessor">#include &quot;ghttp_app.h&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;ecwrap.h&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>examples::ghttp_ethercard_get_json_rest_die;</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"><span class="preprocessor">#define SPI_SS    D7</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="comment">// Hack around and see what you get working, you&#39;re in unknown territory</span></div>
<div class="line"><span class="preprocessor">#error Unsupported architecture</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Our application&#39;s shared data</span></div>
<div class="line"><a name="_a0"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_shared.htm">Shared</a> <a name="a1"></a><a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create our routes handled by this application</span></div>
<div class="line"><a name="_a2"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_root.htm">RouteRoot</a>         route_root;</div>
<div class="line"><a name="_a3"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_js.htm">RouteDieJs</a>        route_diejs;</div>
<div class="line"><a name="_a4"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_s_v_g.htm">RouteDieSVG</a>       route_diesvg;</div>
<div class="line"><a name="_a5"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_throw_j_s_o_n.htm">RouteThrowJSON</a>    route_throwjson;</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">    Serial.begin(9600);</div>
<div class="line">    <span class="comment">// This while implies you should open Debug serial console before it will run - well it is a demo...</span></div>
<div class="line">    <span class="keywordflow">while</span>(!Serial) { Serial.available(); }</div>
<div class="line"> </div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;setup()&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// This would generally be setup once at POR</span></div>
<div class="line">    <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.<a name="a6"></a>server.<a name="a7"></a>ip4           = <span class="stringliteral">&quot;10.0.0.10&quot;</span>;</div>
<div class="line">    <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.server.<a name="a8"></a>mac           = <span class="stringliteral">&quot;123456123456&quot;</span>;</div>
<div class="line">    <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.server.<a name="a9"></a>gateway_ip4   = <span class="stringliteral">&quot;10.0.0.1&quot;</span>;</div>
<div class="line"> </div>
<div class="line">    pinMode(SPI_SS, OUTPUT);    <span class="comment">// CS</span></div>
<div class="line">    </div>
<div class="line">    <span class="keywordflow">if</span> (<a name="a10"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#a2517ced74891de480649fedeb761bab7">ECWrap::Initialise</a>(80, &amp;<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.server.ip4.<a name="a11"></a>u8[0], &amp;<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.server.gateway_ip4.u8[0], &amp;<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.server.mac.<a name="a12"></a>u8[0], SPI_SS)) {</div>
<div class="line">        Serial.println( <span class="stringliteral">&quot;Failed to access Ethernet controller&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register shared memory instance for route handler use</span></div>
<div class="line">    <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.<a name="a13"></a>rm.RegisterShared(&amp;<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Register routes for this application</span></div>
<div class="line">    <span class="keywordflow">if</span> (-1 == <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.rm.Register(&amp;route_root)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of root failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (-1 == <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.rm.Register(&amp;route_diejs)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of die js failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (-1 == <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.rm.Register(&amp;route_diesvg)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of die svg failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (-1 == <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.rm.Register(&amp;route_throwjson)) {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;ERROR: Route manager register of throw json failed\n&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">    uint8_t err;</div>
<div class="line"> </div>
<div class="line">    Serial.available();</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Receive HTTP request</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a name="a14"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#a8ebeaab1fb482a3f27bb683ca8698229">ECWrap::Receive</a>(&amp;err)) {</div>
<div class="line">        <span class="keywordflow">if</span> (<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.<a name="a15"></a>request.<a name="a16"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> == err) {</div>
<div class="line">            Serial.print(<span class="stringliteral">&quot;route &quot;</span>);</div>
<div class="line">            Serial.println(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a name="a17"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a name="a18"></a><a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>());</div>
<div class="line"> </div>
<div class="line">            <span class="comment">// Service routes</span></div>
<div class="line">            <span class="keywordflow">if</span> (-1 == <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.rm.Service()) {</div>
<div class="line">                <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.<a name="a19"></a>response.<a name="a20"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">SetMaximum</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a name="a21"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a>());</div>
<div class="line">                <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a name="a22"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">SetBuffer</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a name="a23"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">GetBuffer</a>(), 0, 0);</div>
<div class="line">                ghttp::HTTPHelper::Redirect&lt;Shared&gt;(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>, <span class="stringliteral">&quot;/&quot;</span>, <a name="a24"></a><a class="code" href="classghttp_1_1_h_t_t_p_response_status.htm#a13e6d558797ac154c068085f942cfd21a757fbb7ea96a73d3d8aced98dcbb4563">ghttp::HTTPResponseStatus::STATUS_FORBIDDEN</a>);</div>
<div class="line">            }</div>
<div class="line">            </div>
<div class="line">            <span class="comment">// Has response already been handled by route?</span></div>
<div class="line">            <span class="keywordflow">if</span> (<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a name="a25"></a><a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>()) {</div>
<div class="line">                <span class="comment">// No so send data from response buffer now</span></div>
<div class="line">                <span class="comment">//Serial.print(&quot;main response &quot;);</span></div>
<div class="line">                <span class="comment">//Serial.println(sd.response.GetLength(), DEC);</span></div>
<div class="line">                <span class="comment">//Serial.println(sd.response.GetBuffer());</span></div>
<div class="line">                <a name="a26"></a><a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">ECWrap::Send</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">GetBuffer</a>(), <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>());</div>
<div class="line">            }</div>
<div class="line">        }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a name="a27"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ERR_SEGMENTATION</a> == err) {</div>
<div class="line">            <span class="comment">// Ignore</span></div>
<div class="line"> </div>
<div class="line">        }<span class="keywordflow">else</span> {</div>
<div class="line">            <span class="comment">// Anything is a bad request</span></div>
<div class="line">            <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">SetMaximum</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a>());</div>
<div class="line">            <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">SetBuffer</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">GetBuffer</a>(), 0, 0);</div>
<div class="line">            ghttp::HTTPHelper::Redirect&lt;Shared&gt;(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>, <span class="stringliteral">&quot;/&quot;</span>, <a name="a28"></a><a class="code" href="classghttp_1_1_h_t_t_p_response_status.htm#a13e6d558797ac154c068085f942cfd21a239b1b68f3859c6a3866d16f5f6ab3d4">ghttp::HTTPResponseStatus::STATUS_BAD_REQUEST</a>);</div>
<div class="line">            <span class="comment">//Serial.print(&quot;response &quot;);</span></div>
<div class="line">            <span class="comment">//Serial.println(sd.response.GetLength(), DEC);</span></div>
<div class="line">            <span class="comment">//Serial.println(sd.response.GetBuffer());</span></div>
<div class="line">            <a class="code" href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">ECWrap::Send</a>(<a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.request.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">GetBuffer</a>(), <a class="code" href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a>.response.<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>());</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aeeb9acdefa93179e395c6c7d7d001244"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">ghttp::HTTPBuffer::GetLength</a></div><div class="ttdeci">uint16_t GetLength() const</div><div class="ttdoc">Get length.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:231</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_throw_j_s_o_n_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_throw_j_s_o_n.htm">examples::ghttp_ethercard_get_json_rest_die::RouteThrowJSON</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/json/throw&quot;.</div><div class="ttdef"><b>Definition:</b> routethrowjson.h:15</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_js_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_js.htm">examples::ghttp_ethercard_get_json_rest_die::RouteDieJs</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/js/die.js&quot;.</div><div class="ttdef"><b>Definition:</b> routediejs.h:19</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap_htm_a8ebeaab1fb482a3f27bb683ca8698229"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#a8ebeaab1fb482a3f27bb683ca8698229">examples::ghttp_ethercard_get_json_rest_die::ECWrap::Receive</a></div><div class="ttdeci">static bool Receive(uint8_t *err)</div><div class="ttdoc">Receive 1 or more TCP packets, segmenting GHTTP request from client.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:162</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ad9c24208c9eba1dbe55baf79379b8b48"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">ghttp::HTTPRequest::url</a></div><div class="ttdeci">HTTPSubstring url</div><div class="ttdoc">RFC 1738, Decoded URL, i.e. route like /msg or / or /request etc.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:82</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aaccfbecf78f865649933f4813c2d6a82"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">ghttp::HTTPBuffer::GetBuffer</a></div><div class="ttdeci">char * GetBuffer() const</div><div class="ttdoc">Get buffer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:172</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_root_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_root.htm">examples::ghttp_ethercard_get_json_rest_die::RouteRoot</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/&quot;.</div><div class="ttdef"><b>Definition:</b> routeroot.h:19</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_status_htm_a13e6d558797ac154c068085f942cfd21a239b1b68f3859c6a3866d16f5f6ab3d4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response_status.htm#a13e6d558797ac154c068085f942cfd21a239b1b68f3859c6a3866d16f5f6ab3d4">ghttp::HTTPResponseStatus::STATUS_BAD_REQUEST</a></div><div class="ttdeci">@ STATUS_BAD_REQUEST</div><div class="ttdoc">Request not repeated by client.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponsestatus.h:61</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_status_htm_a13e6d558797ac154c068085f942cfd21a757fbb7ea96a73d3d8aced98dcbb4563"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response_status.htm#a13e6d558797ac154c068085f942cfd21a757fbb7ea96a73d3d8aced98dcbb4563">ghttp::HTTPResponseStatus::STATUS_FORBIDDEN</a></div><div class="ttdeci">@ STATUS_FORBIDDEN</div><div class="ttdoc">Should include content with description otherwise use STATUS_NOT_FOUND.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponsestatus.h:63</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a69412ab74669a174f581f7c0349db233"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">ghttp::HTTPBuffer::GetMaximum</a></div><div class="ttdeci">uint16_t GetMaximum() const</div><div class="ttdoc">Get buffer maximum.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:261</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ghttp::HTTPRequest::ERR_NONE</a></div><div class="ttdeci">@ ERR_NONE</div><div class="ttdoc">0 - No error</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:47</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aef79015e1a8fb34dd96424849e510831"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">ghttp::HTTPBuffer::SetMaximum</a></div><div class="ttdeci">void SetMaximum(const uint16_t max_length)</div><div class="ttdoc">Set buffer maximum.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:271</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_s_v_g_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_route_die_s_v_g.htm">examples::ghttp_ethercard_get_json_rest_die::RouteDieSVG</a></div><div class="ttdoc">An example implemented route for HTTP GET requests covering route &quot;/image/die_optimised....</div><div class="ttdef"><b>Definition:</b> routediesvg.h:19</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap_htm_a2517ced74891de480649fedeb761bab7"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#a2517ced74891de480649fedeb761bab7">examples::ghttp_ethercard_get_json_rest_die::ECWrap::Initialise</a></div><div class="ttdeci">static uint8_t Initialise(const uint16_t server_port, const uint8_t *ip4, const uint8_t *gwip4, const uint8_t *mac, uint8_t pin)</div><div class="ttdoc">Initialise Ethercard + Enc28j60 i/f driver with static IPs.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:45</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5fb7bb7479294882fcec864ccd6024a2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">ghttp::HTTPSubstring::Get</a></div><div class="ttdeci">const char * Get() const</div><div class="ttdoc">Get string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:70</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap_htm_af2f9a558873b81863a4496b09005604c"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">examples::ghttp_ethercard_get_json_rest_die::ECWrap::Send</a></div><div class="ttdeci">static void Send(const char *response, uint32_t response_length, const bool first=true, const bool more=false)</div><div class="ttdoc">Send 1 or more TCP packets, segmenting GHTTP response to client This should really be implemented by ...</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:92</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a28df8375d6824c339014a1f192aa1742"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">ghttp::HTTPBuffer::SetBuffer</a></div><div class="ttdeci">void SetBuffer(char *buffer, uint16_t length=0, uint16_t offset=0)</div><div class="ttdoc">Set buffer Because Request and Responses may share the same buffer and some Request information maybe...</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:189</div></div>
<div class="ttc" id="aghttp__ethercard__get__json__rest__die_8ino_htm_aae3bb58ae83a1d60d9928905df3a266a"><div class="ttname"><a href="ghttp__ethercard__get__json__rest__die_8ino.htm#aae3bb58ae83a1d60d9928905df3a266a">sd</a></div><div class="ttdeci">Shared sd</div><div class="ttdoc">Our applications shared data, need access to request/response instances.</div><div class="ttdef"><b>Definition:</b> ghttp_ethercard_get_json_rest_die.ino:40</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ghttp::HTTPRequest::ERR_SEGMENTATION</a></div><div class="ttdeci">@ ERR_SEGMENTATION</div><div class="ttdoc">1 - Parse information. More data expected</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:48</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_shared_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__json__rest__die_1_1_shared.htm">examples::ghttp_ethercard_get_json_rest_die::Shared</a></div><div class="ttdoc">Application specific class holding everything required to process request/reponses.</div><div class="ttdef"><b>Definition:</b> shared.h:19</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:29 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
