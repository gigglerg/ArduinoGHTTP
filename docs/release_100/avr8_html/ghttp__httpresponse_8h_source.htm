<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: core/ghttp_httpresponse.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp__httpresponse_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_httpresponse.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ghttp__httpresponse_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Embedded HTTP request/response handling framework - HTTP response</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: GHTTP library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, STM32, Atmel AT91SAM, portable</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef GHTTP_HTTPRESPONSE_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define GHTTP_HTTPRESPONSE_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span>ghttp {</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * HTTP Response class with helpers to assist in the construction of valid HTTP response messages.  The resulting data in HTTPBuffer should be sent over TCP/IP.  It is </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * expected that this will all be after handling a HTTP request</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * \tparam S Status code class used in response</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> S&gt;</div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classghttp_1_1_h_t_t_p_response.htm">HTTPResponse</a> : <span class="keyword">public</span> <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm">HTTPBuffer</a> {</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">   22</a></span>&#160;    S            <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">status</a>;            <span class="comment">///&lt; Status code instance</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">     * Default constructor, make stable instance.  Buffer setup with 0 length and NULL pointer</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">     * \note Use \ref SetBuffer to setup the response buffer characteristics</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#ab0710f3117e28ea11f0a37ea81e78301">   30</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#ab0710f3117e28ea11f0a37ea81e78301">HTTPResponse</a>() : <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm">HTTPBuffer</a>() { }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">     * Constructor, make stable instance, includes response buffer characteristics</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">     * \param[in] buffer Buffer String pointer to buffer first character</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">     * \param[in] max_length Buffer maximum length (including NULL)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">     * \param[in] length Buffer current length (if data exists already), default 0 (characters)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">     * \param[in] offset Offset (characters) from buffer[0] to allow request header and other request data access during construction of response.  Default 0</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#acd0ec3765aa6be40717f4bf0366aaadd">   41</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#acd0ec3765aa6be40717f4bf0366aaadd">HTTPResponse</a>(<span class="keywordtype">char</span>* <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, uint16_t max_length, uint16_t length=0, uint16_t offset=0) : <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm">HTTPBuffer</a>(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, max_length, length, offset) { }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     * Calculate and return content length - headers.  It is assumed response headers are complete when content exists</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">     * \return Content length (characters)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a2d07b723f9091a955958abb4bece6047">   49</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a2d07b723f9091a955958abb4bece6047">GetContentLength</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        uint16_t l = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (l) {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            l = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> - l;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span> l;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * Response header string, append with optional replace</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * \note Can be used to set status header (line).  When doing so pass protocol and version only like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     * \note Besides the status header, all other headers must be complete.  No header should include newline or carriage return</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * \attention Use until \ref HeaderComplete has been invoked.  Also if there is any content length do not attempt to add headers</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * \param[in] header_str Header string pointer (NULL terminated).  Header format is &quot;&lt;name&gt;: &lt;data&gt;&quot; unless setting status header</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * \param[in] replace Flag indicating replacement, default true.  When true all other like headers will be removed prior to new insert</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a3166e1fd8162b90ac6d7d59479f3afeb">   71</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a3166e1fd8162b90ac6d7d59479f3afeb">Header</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> replace=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">if</span> (header_str &amp;&amp; strlen(header_str)&gt;5) {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="comment">// HTTP/1.0 =&gt; First line/status header?</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(<span class="stringliteral">&quot;HTTP/&quot;</span>, header_str, 5, <span class="keyword">false</span>)) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                set = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a871fe05aae80d6e0f90e2037486b845d">HeaderForStatus</a>(header_str);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                set = (!<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>() ? <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">HeaderSet</a>(header_str, replace) : <span class="keyword">false</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * Header for status, caller should provide protocol and protocol version information for header string construction</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     * \todo Refactor with \ref HeaderRemove</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     * \param[in] protocol_str Protocol (including version) string pointer.  Format like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a871fe05aae80d6e0f90e2037486b845d">   95</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a871fe05aae80d6e0f90e2037486b845d">HeaderForStatus</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* protocol_str) {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        uint16_t i_1st_eol = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(0, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        uint8_t t;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">if</span> (protocol_str) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            uint16_t new_str_len;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            set = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            t = strlen(protocol_str);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            new_str_len = t;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="comment">// Figure out how long new line string is</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            t = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">status</a>.GetStringLength();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            new_str_len += t + 3; <span class="comment">// + 3 (space + CR + LF)</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// Protocol must have length</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">if</span> (t) {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                uint16_t diff;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">// Any first line header?</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">if</span> (i_1st_eol&gt;5 &amp;&amp; i_1st_eol&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="comment">// Header(s) exist</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    i_1st_eol++;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="comment">// We can&#39;t simply replace because we don&#39;t have a single replace string so pad as required</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keywordflow">if</span> (i_1st_eol &lt; new_str_len) {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        diff = new_str_len - i_1st_eol;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a8dd86c6d02110b0493787816b1d2452d">InsertPadding</a>(0, <span class="charliteral">&#39;.&#39;</span>, diff);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (i_1st_eol &gt; new_str_len) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">Remove</a>(new_str_len, i_1st_eol-1);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="comment">// No header set</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> = new_str_len;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordflow">if</span> ((<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + 3) &gt;= <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">if</span> (set &amp;&amp; new_str_len&gt;2) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    t = strlen(protocol_str);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    strcpy(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, protocol_str);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t] = <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t+1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">status</a>.GetString(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t+1]); <span class="comment">// Concatenate status</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[new_str_len-2] = <span class="charliteral">&#39;\r&#39;</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[new_str_len-1] = <span class="charliteral">&#39;\n&#39;</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    } <span class="comment">// HeaderForStatus(...)</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * Header remove by given header name string.  Optionally removes all like headers</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * \param[in] header_str String pointer to header name (NULL terminated).  This can be entire header or string before colon (the name).  The former case </span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * only the name is matched not the header data during removal.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * \param[in] all Flag to remove all or first matching header, default true</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#ae4f555f1c86bc778bcfef48b1ca7ad20">  158</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#ae4f555f1c86bc778bcfef48b1ca7ad20">HeaderRemove</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> all=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>() ? <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">HeaderRemoveForce</a>(header_str, all) : <span class="keyword">false</span>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     * Force remove any existing content</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * \attention Does nothing if not content exists.  After content removed, header complete still remains</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#ae5fcd2cf5ab93473c6bffb4ad21694e4">  169</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#ae5fcd2cf5ab93473c6bffb4ad21694e4">NoContent</a>() {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        uint16_t l = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a2d07b723f9091a955958abb4bece6047">GetContentLength</a>();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">if</span> (l) {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>-=l;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>, <span class="charliteral">&#39;\0&#39;</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> done;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// session_id string from SessionId instance related to request</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// session_cookie_addtion SameSite=Strict; HttpOnly</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// /note adds session cookie if any</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * Issue header complete with optional session cookie id and any session cookie addition string</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * \attention Invoke before \ref Complete</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     * \param[in] session_id String pointer, obtained from request session (if any).  Default NULL =&gt; no session cookie addition upon header completion</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * \param[in] session_cookie_addition String pointer.  Only used session_id string setup.  Default NULL =&gt; no addition.  Example might be &quot;HttpOnly&quot; etc.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#aa2d99122b8c97396e30859c8ba36582c">  196</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#aa2d99122b8c97396e30859c8ba36582c">HeaderComplete</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* session_id=NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* session_cookie_addition=NULL) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#else // GHTTP_SERVER_USE_SESSIONS != 1</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     * Issue header complete</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * \attention Invoke before \ref Complete</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#aa2d99122b8c97396e30859c8ba36582c">HeaderComplete</a>() {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">bool</span> c = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>() &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>(<span class="keyword">true</span>)) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1 &amp;&amp; GHTTP_SERVER_USE_SESSIONS == 1 &amp;&amp; defined(GHTTP_SERVER_STRING_SESSION_COOKIE)</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="comment">// Add session cookie where set</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">if</span> (session_id) {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;Set-Cookie: &quot;</span>));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(GHTTP_SERVER_STRING_SESSION_COOKIE);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<span class="stringliteral">&quot;=&quot;</span>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(session_id);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordflow">if</span> (session_cookie_addition &amp;&amp; strlen(session_cookie_addition)) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;; &quot;</span>));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(session_cookie_addition);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;\r\n&quot;</span>));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="keywordflow">if</span> (!c) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keywordflow">goto</span> HeaderComplete_Exit;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_COOKIES == 1 &amp;&amp; GHTTP_SERVER_USE_SESSIONS == 1 &amp;&amp; defined(GHTTP_SERVER_STRING_SESSION_COOKIE)</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            c = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;\r\n&quot;</span>));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        HeaderComplete_Exit:</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    } <span class="comment">// HeaderComplete(...)</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     * Query are headers complete</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     * \retval true When final CR+LF included and content start present</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">     * \retval false When headers not complete</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#afa80b647d325fc9cae4fdfe4ff1d21f1">  259</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa80b647d325fc9cae4fdfe4ff1d21f1">IsHeaderComplete</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">return</span> !<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>()? true : <span class="keyword">false</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">     * Complete, invoke to indicate content complete.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     * \note Make sure you have appended all request data prior to invoke</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">     * \attention Invoke after \ref HeaderComplete</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">     * \attention HTTPBuffer::PrepareZeroOffsetData invoked internally when result yields true</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">     * \return State, true on success otherwise false.  In the latter case make sure headers are complete prior</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a7ac3524cafc8f767b980cd94822a9efa">  272</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a7ac3524cafc8f767b980cd94822a9efa">Complete</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> include_content_length=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordtype">bool</span> c = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordtype">char</span> cl_str[24];</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &gt;= 4 &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>(<span class="keyword">true</span>) &gt; 0) {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">if</span> (include_content_length) {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                strcpy(cl_str, <span class="stringliteral">&quot;Content-Length: &quot;</span>);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                StringHelper::FromUInt&lt;uint16_t&gt;(<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a2d07b723f9091a955958abb4bece6047">GetContentLength</a>(), &amp;cl_str[16]);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                c = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">HeaderSet</a>(cl_str);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="comment">// OK? then realign request data within buffer ready for use</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">if</span> (c) {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a>();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">     * Get end of headers (character index)</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">     * \param[in] include_incomplete Flag indicating a length required even if headers are not complete.  Default false</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     * \return Character index into HTTPBuffer where next append should be made</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">  297</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> include_incomplete=<span class="keyword">false</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        uint16_t i = 0;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>&gt;=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>&gt;4) {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">HTTPBuffer::FindSubString</a>(0, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>, <span class="stringliteral">&quot;\r\n\r\n&quot;</span>);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="comment">// Not found?</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">if</span> (i &gt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                i = 0;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">if</span> (include_incomplete) {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    uint16_t e;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">HTTPBuffer::FindEOL</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        <span class="keywordflow">if</span> (e&gt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                            <span class="comment">// Take i</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        i = e + 1;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                i+=4;    <span class="comment">// Move over CR+LF+CR+LF</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    } <span class="comment">// GetEndOfHeaders(...)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     * Response header string, append with optional replace</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     * \note Can be used to set status header (line).  When doing so pass protocol and version only like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     * \note Besides the status header, all other headers must be complete.  No header should include newline or carriage return</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * \attention Use until \ref HeaderComplete has been invoked.  Also if there is any content length do not attempt to add headers</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     * \param[in] header_str Header string pointer (NULL terminated, flash based).  Header format is &quot;&lt;name&gt;: &lt;data&gt;&quot; unless setting status header</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     * \param[in] replace Flag indicating replacement, default true.  When true all other like headers will be removed prior to new insert</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a4dcdf6c650da63c8caeb0b4842b3c26b">  338</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a4dcdf6c650da63c8caeb0b4842b3c26b">Header</a>(PGM_VOID_P header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> replace=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">if</span> (header_str &amp;&amp; <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(header_str)&gt;5) {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="comment">// HTTP/1.0 =&gt; First line/status header?</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(<span class="stringliteral">&quot;HTTP/&quot;</span>, header_str, 5, <span class="keyword">false</span>)) {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                set = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a871fe05aae80d6e0f90e2037486b845d">HeaderForStatus</a>(header_str);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                set = (!<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>() ? <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">HeaderSet</a>(header_str, replace) : <span class="keyword">false</span>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     * Header for status, caller should provide protocol and protocol version information for header string construction</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     * \todo Refactor with \ref HeaderRemove</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * \param[in] protocol_str Protocol (including version) string pointer, flash based.  Format like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a41c18cf0cf44ee46710d1931df180cfa">  363</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a41c18cf0cf44ee46710d1931df180cfa">HeaderForStatus</a>(PGM_VOID_P protocol_str) {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        uint16_t i_1st_eol = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(0, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        uint8_t t;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">if</span> (protocol_str) {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            uint16_t new_str_len;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            set = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            t = <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(protocol_str);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            new_str_len = t;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="comment">// Figure out how long new line string is</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            t = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">status</a>.GetStringLength();</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            new_str_len += t + 3; <span class="comment">// + 3 (space + CR + LF)</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="comment">// Protocol must have length</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">if</span> (t) {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                uint16_t diff;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="comment">// Any first line header?</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <span class="keywordflow">if</span> (i_1st_eol&gt;5 &amp;&amp; i_1st_eol&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    <span class="comment">// Header(s) exist</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    i_1st_eol++;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    <span class="comment">// We can&#39;t simply replace because we don&#39;t have a single replace string so pad as required</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    <span class="keywordflow">if</span> (i_1st_eol &lt; new_str_len) {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                        diff = new_str_len - i_1st_eol;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a8dd86c6d02110b0493787816b1d2452d">InsertPadding</a>(0, <span class="charliteral">&#39;.&#39;</span>, diff);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (i_1st_eol &gt; new_str_len) {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">Remove</a>(new_str_len, i_1st_eol-1);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    <span class="comment">// No header set</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> = new_str_len;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">if</span> ((<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + 3) &gt;= <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="keywordflow">if</span> (set &amp;&amp; new_str_len&gt;2) {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    t = <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(protocol_str);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    <a class="code" href="ghttp_8h.htm#acfb632669c1b54869f00e2340220c0bf">PGM_MEMCPY</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, protocol_str, t);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">//                    strcpy(buffer_, protocol_str);</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t] = <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t+1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">status</a>.GetString(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t+1]); <span class="comment">// Concatenate status</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[new_str_len-2] = <span class="charliteral">&#39;\r&#39;</span>;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[new_str_len-1] = <span class="charliteral">&#39;\n&#39;</span>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    } <span class="comment">// HeaderForStatus(...)</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">     * Header remove by given header name string.  Optionally removes all like headers</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">     * \param[in] header_str String pointer to header name (NULL terminated, flash based).  This can be entire header or string before colon (the name).  The former case </span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">     * only the name is matched not the header data during removal.</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">     * \param[in] all Flag to remove all or first matching header, default true</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a43828261a78c0295bd7bb18f2e9b0127">  427</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a43828261a78c0295bd7bb18f2e9b0127">HeaderRemove</a>(PGM_VOID_P header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> all=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">return</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>() ? <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">HeaderRemoveForce</a>(header_str, all) : <span class="keyword">false</span>);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="preprocessor">#endif // !defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">     * Set response header string, append with optional replace.  Employed internally for header setting and has less restrictions than \ref Header</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">     * \note May have partly set header or removed existing upon failure</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">     * \note Can be used to set status header (line).  When doing so pass protocol and version only like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">     * \note Besides the status header, all other headers must be complete.  No header should include newline or carriage return</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">     * \param[in] header_str Header string pointer (NULL terminated).  Header format is &quot;&lt;name&gt;: &lt;data&gt;&quot; unless setting status header</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     * \param[in] replace Flag indicating replacement, default true.  When true all other like headers will be removed prior to new insert</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">  445</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">HeaderSet</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> replace=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        uint16_t header_length, i, e;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="comment">// Header string?</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">if</span> (header_str) {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="comment">// Find header string terminator</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            header_length = strlen(header_str);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="comment">// Check header string contains &quot;[\w]+\:&quot; before we continue</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            i = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot;:&quot;</span>, <span class="keyword">false</span>, header_length);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">if</span> (i &lt; header_length) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                <span class="comment">// Found.  No white space before</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                e = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot; \t&quot;</span>, <span class="keyword">false</span>, i);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                <span class="keywordflow">if</span> (e &lt; i) {</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    <span class="comment">// Found, this is a problem, prevent further process and fail</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    header_length = 0;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                <span class="comment">// No colon, prevent further process and fail</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                header_length = 0;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keywordflow">if</span> (header_length &gt; 1 &amp;&amp; (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + header_length + 4) &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) { <span class="comment">// +4 because EOH marker is another CR+LF which must come before content</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="comment">// Not control codes</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <span class="keywordflow">if</span> (header_str[0] &gt; 32) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    <span class="comment">// Replace or append?</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordflow">if</span> (replace) {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">HeaderRemoveForce</a>(header_str, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        set = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    <span class="comment">// Any remove OK?</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                        <span class="comment">// if (!replace) =&gt; append but we may have to insert depending where we are with content and header building</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        i = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>();</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        <span class="keywordflow">if</span> (i) {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            <span class="comment">// Insert required as user headers complete but content length or others may still be required (ok essentially incomplete!)</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                            i-=2; <span class="comment">// move back CR+LF</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">Insert</a>(i, header_str, header_length);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                            <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">Insert</a>(i + header_length, <span class="stringliteral">&quot;\r\n&quot;</span>, 2);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                            }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(header_str, header_length);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                            <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<span class="stringliteral">&quot;\r\n&quot;</span>, 2);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                            }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                        }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            } <span class="comment">// if (header_length &gt; 1)</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    } <span class="comment">// HeaderSet(...)</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160; </div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">     * Header remove by given header name string.  Optionally removes all like headers and has less restrictions than \ref HeaderRemove</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">     * \note Can remove even after headers complete</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">     * \param[in] header_str String pointer to header name (NULL terminated).  This can be entire header or string before colon (the name).  The former case </span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">     * only the name is matched not the header data during removal.</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">     * \param[in] all Flag to remove all or first matching header, default true</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">  515</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">HeaderRemoveForce</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> all=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        uint16_t header_length, reduced_header_length, i, e;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="comment">// Header string?</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">if</span> (header_str) {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="comment">// Find header string terminator</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            header_length = strlen(header_str);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="keywordflow">if</span> (header_length &gt; 1 &amp;&amp; (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + header_length + 4) &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) { <span class="comment">// +4 because EOH marker is another CR+LF which must come before content</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="comment">// Not control codes</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <span class="keywordflow">if</span> (header_str[0] &gt; 32) {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    <span class="comment">// Find head name</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    reduced_header_length = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot;: &quot;</span>, <span class="keyword">false</span>, header_length);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="keywordflow">if</span> (reduced_header_length &gt;= header_length) {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                        <span class="comment">// Not found.  Assume entire header string just the header name</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                        reduced_header_length = header_length;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                    }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>&gt;reduced_header_length) {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                        <span class="comment">// There maybe multiple headers, remove all</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                        <span class="keywordflow">while</span>(1) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                            i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(0, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>, header_str, reduced_header_length);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                            <span class="keywordflow">if</span> (i &gt;= <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                <span class="keywordflow">break</span>; <span class="comment">// Done...</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                            }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                            <span class="keywordflow">if</span> (<span class="charliteral">&#39;:&#39;</span> != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i + reduced_header_length]) {</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                            }</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                            <span class="keywordflow">if</span> (e &gt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                            }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                            <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">Remove</a>(i, e)) {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                            }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                            <span class="keywordflow">if</span> (!all) {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                            }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                        } <span class="comment">// while(1)</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        <span class="comment">// Can&#39;t be present to remove</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                        done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                    }</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                } <span class="comment">// if (header_str[0] &gt; 32)</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            } <span class="comment">// if (header_length &gt; 1 &amp;&amp; (length_ + header_length + 4) &lt; max_length_)</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        } <span class="comment">// if (header_str)</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keywordflow">return</span> done;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    } <span class="comment">// HeaderRemoveForce(...)</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">     * Set response header string, append with optional replace.  Employed internally for header setting and has less restrictions than \ref Header</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">     * \note May have partly set header or removed existing upon failure</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment">     * \note Can be used to set status header (line).  When doing so pass protocol and version only like &quot;HTTP/1.0&quot; etc.</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">     * \note Besides the status header, all other headers must be complete.  No header should include newline or carriage return</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">     * \param[in] header_str Header string pointer (NULL terminated, flash based).  Header format is &quot;&lt;name&gt;: &lt;data&gt;&quot; unless setting status header</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">     * \param[in] replace Flag indicating replacement, default true.  When true all other like headers will be removed prior to new insert</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00580"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#a2118f1f8af54c8201dde162b841fe944">  580</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a2118f1f8af54c8201dde162b841fe944">HeaderSet</a>(PGM_VOID_P header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> replace=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        uint16_t header_length, i, e;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordtype">bool</span> set = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="comment">// Header string?</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="keywordflow">if</span> (header_str) {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">// Find header string terminator</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            header_length = <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(header_str);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160; </div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="comment">// Check header string contains &quot;[\w]+\:&quot; before we continue</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            i = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot;:&quot;</span>, <span class="keyword">false</span>, header_length);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">if</span> (i &lt; header_length) {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <span class="comment">// Found.  No white space before</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                e = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot; \t&quot;</span>, <span class="keyword">false</span>, i);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <span class="keywordflow">if</span> (e &lt; i) {</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                    <span class="comment">// Found, this is a problem, prevent further process and fail</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    header_length = 0;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                }</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                <span class="comment">// No colon, prevent further process and fail</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                header_length = 0;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            }</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keywordflow">if</span> (header_length &gt; 1 &amp;&amp; (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + header_length + 4) &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) { <span class="comment">// +4 because EOH marker is another CR+LF which must come before content</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                <span class="comment">// Not control codes</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="ghttp_8h.htm#a37196cf08a64597afdbddd552611e5fe">PGM_CHAR</a>(header_str) &gt; 32) {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    <span class="comment">// Replace or append?</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    <span class="keywordflow">if</span> (replace) {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        set = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">HeaderRemoveForce</a>(header_str, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                        set = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                    }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160; </div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                    <span class="comment">// Any remove OK?</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                    <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                        <span class="comment">// if (!replace) =&gt; append but we may have to insert depending where we are with content and header building</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                        i = <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">GetEndOfHeaders</a>();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                        <span class="keywordflow">if</span> (i) {</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                            <span class="comment">// Insert required as user headers complete but content length or others may still be required (ok essentially incomplete!)</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                            i-=2; <span class="comment">// move back CR+LF</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                            set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">Insert</a>(i, header_str, header_length);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                            <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">Insert</a>(i + header_length, <span class="stringliteral">&quot;\r\n&quot;</span>, 2);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                            }</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                            set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(header_str, header_length);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                            <span class="keywordflow">if</span> (set) {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                set = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a>(<span class="stringliteral">&quot;\r\n&quot;</span>, 2);</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                            }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                        }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                    }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            } <span class="comment">// if (header_length &gt; 1)</span></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        <span class="keywordflow">return</span> set;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    } <span class="comment">// HeaderSet(...)</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">     * Header remove by given header name string.  Optionally removes all like headers and has less restrictions than \ref HeaderRemove</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">     * \note Can remove even after headers complete</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">     * \param[in] header_str String pointer to header name (NULL terminated, flash based).  This can be entire header or string before colon (the name).  The former case </span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">     * only the name is matched not the header data during removal.</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment">     * \param[in] all Flag to remove all or first matching header, default true</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment">     * \return State, true on success otherwise false</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00650"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_response.htm#aeb706035f5b0932e7aea73d5cd9eba2b">  650</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_response.htm#aeb706035f5b0932e7aea73d5cd9eba2b">HeaderRemoveForce</a>(PGM_VOID_P header_str, <span class="keyword">const</span> <span class="keywordtype">bool</span> all=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        uint16_t header_length, reduced_header_length, i, e;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="comment">// Header string?</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">if</span> (header_str) {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <span class="comment">// Find header string terminator</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            header_length = <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(header_str);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            <span class="keywordflow">if</span> (header_length &gt; 1 &amp;&amp; (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + header_length + 4) &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) { <span class="comment">// +4 because EOH marker is another CR+LF which must come before content</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                <span class="comment">// Not control codes</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="ghttp_8h.htm#a37196cf08a64597afdbddd552611e5fe">PGM_CHAR</a>(header_str) &gt; 32) {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    <span class="comment">// Find head name</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                    reduced_header_length = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, header_str, <span class="stringliteral">&quot;: &quot;</span>, <span class="keyword">false</span>, header_length);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                    <span class="keywordflow">if</span> (reduced_header_length &gt;= header_length) {</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                        <span class="comment">// Not found.  Assume entire header string just the header name</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                        reduced_header_length = header_length;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    }</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160; </div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    <span class="comment">// There maybe multiple headers, remove all</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    <span class="keywordflow">while</span>(1) {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                        i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(0, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>, header_str, reduced_header_length);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                        <span class="keywordflow">if</span> (i &gt;= <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                            done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            <span class="keywordflow">break</span>; <span class="comment">// Done...</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                        }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                        <span class="keywordflow">if</span> (<span class="charliteral">&#39;:&#39;</span> != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i + reduced_header_length]) {</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        }</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                        <span class="keywordflow">if</span> (e &gt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                        }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">Remove</a>(i, e)) {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                        }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                        <span class="keywordflow">if</span> (!all) {</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                            done = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                        }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    } <span class="comment">// while(1)</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                } <span class="comment">// if (header_str[0] &gt; 32)</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            } <span class="comment">// if (header_length &gt; 1 &amp;&amp; (length_ + header_length + 4) &lt; max_length_)</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        } <span class="comment">// if (header_str)</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160; </div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">return</span> done;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    } <span class="comment">// HeaderRemoveForce(...)</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="preprocessor">#endif // !defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}; <span class="comment">// class HTTPResponse</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160; </div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;}; <span class="comment">// namespace ghttp</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="preprocessor">#endif // GHTTP_HTTPRESPONSE_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_ab0710f3117e28ea11f0a37ea81e78301"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#ab0710f3117e28ea11f0a37ea81e78301">ghttp::HTTPResponse::HTTPResponse</a></div><div class="ttdeci">HTTPResponse()</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:30</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_aa2d99122b8c97396e30859c8ba36582c"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#aa2d99122b8c97396e30859c8ba36582c">ghttp::HTTPResponse::HeaderComplete</a></div><div class="ttdeci">bool HeaderComplete(const char *session_id=NULL, const char *session_cookie_addition=NULL)</div><div class="ttdoc">Issue header complete with optional session cookie id and any session cookie addition string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:196</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a871fe05aae80d6e0f90e2037486b845d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a871fe05aae80d6e0f90e2037486b845d">ghttp::HTTPResponse::HeaderForStatus</a></div><div class="ttdeci">bool HeaderForStatus(const char *protocol_str)</div><div class="ttdoc">Header for status, caller should provide protocol and protocol version information for header string ...</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:95</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_ae5fcd2cf5ab93473c6bffb4ad21694e4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#ae5fcd2cf5ab93473c6bffb4ad21694e4">ghttp::HTTPResponse::NoContent</a></div><div class="ttdeci">bool NoContent()</div><div class="ttdoc">Force remove any existing content.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:169</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a2118f1f8af54c8201dde162b841fe944"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a2118f1f8af54c8201dde162b841fe944">ghttp::HTTPResponse::HeaderSet</a></div><div class="ttdeci">bool HeaderSet(PGM_VOID_P header_str, const bool replace=true)</div><div class="ttdoc">Set response header string, append with optional replace.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:580</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_adf720940a9f2357e50f539f184dd8679"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">ghttp::HTTPBuffer::PrepareZeroOffsetData</a></div><div class="ttdeci">void PrepareZeroOffsetData()</div><div class="ttdoc">Prepare zero offset data.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:217</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_acd0ec3765aa6be40717f4bf0366aaadd"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#acd0ec3765aa6be40717f4bf0366aaadd">ghttp::HTTPResponse::HTTPResponse</a></div><div class="ttdeci">HTTPResponse(char *buffer, uint16_t max_length, uint16_t length=0, uint16_t offset=0)</div><div class="ttdoc">Constructor, make stable instance, includes response buffer characteristics.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:41</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af63c63abb009ad0de97aee89ef979fd0"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">ghttp::HTTPBuffer::buffer_</a></div><div class="ttdeci">char * buffer_</div><div class="ttdoc">Character buffer pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:741</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_afa80b647d325fc9cae4fdfe4ff1d21f1"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#afa80b647d325fc9cae4fdfe4ff1d21f1">ghttp::HTTPResponse::IsHeaderComplete</a></div><div class="ttdeci">bool IsHeaderComplete() const</div><div class="ttdoc">Query are headers complete.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:259</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_aeb706035f5b0932e7aea73d5cd9eba2b"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#aeb706035f5b0932e7aea73d5cd9eba2b">ghttp::HTTPResponse::HeaderRemoveForce</a></div><div class="ttdeci">bool HeaderRemoveForce(PGM_VOID_P header_str, const bool all=true)</div><div class="ttdoc">Header remove by given header name string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:650</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_afa8a87b80e833d7d8541741987f56119"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#afa8a87b80e833d7d8541741987f56119">ghttp::HTTPResponse::status</a></div><div class="ttdeci">S status</div><div class="ttdoc">Status code instance.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:22</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a9f97bb5d3220c9dde7b002a95f79aa24"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">ghttp::HTTPBuffer::At</a></div><div class="ttdeci">char At(const uint16_t i) const</div><div class="ttdoc">At accessor.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:90</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af9c6fd75b8e2c829e43b086381e20b39"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">ghttp::HTTPBuffer::length_</a></div><div class="ttdeci">uint16_t length_</div><div class="ttdoc">Data in buffer, length in characters.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:738</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a43828261a78c0295bd7bb18f2e9b0127"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a43828261a78c0295bd7bb18f2e9b0127">ghttp::HTTPResponse::HeaderRemove</a></div><div class="ttdeci">bool HeaderRemove(PGM_VOID_P header_str, const bool all=true)</div><div class="ttdoc">Header remove by given header name string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:427</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a7ecdeda5ceb92a1000ac1dda97b94353"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">ghttp::HTTPBuffer::Insert</a></div><div class="ttdeci">bool Insert(uint16_t i, const char *str, uint16_t length=0)</div><div class="ttdoc">Insert character string at specific index.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:416</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm">ghttp::HTTPBuffer</a></div><div class="ttdoc">A class for character buffering with an interface for string manipulation used during both request an...</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:16</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a8dd86c6d02110b0493787816b1d2452d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a8dd86c6d02110b0493787816b1d2452d">ghttp::HTTPBuffer::InsertPadding</a></div><div class="ttdeci">bool InsertPadding(uint16_t i, char c, uint16_t length)</div><div class="ttdoc">Insert padding character (a repeated character) at specific index to given length.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:446</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a0acd5e10f0e2ecb815737f9f8f6658d2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a0acd5e10f0e2ecb815737f9f8f6658d2">ghttp::HTTPResponse::HeaderRemoveForce</a></div><div class="ttdeci">bool HeaderRemoveForce(const char *header_str, const bool all=true)</div><div class="ttdoc">Header remove by given header name string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:515</div></div>
<div class="ttc" id="aclassghttp_1_1_string_helper_htm_a8d4c0b67dae22d03c99186df179f143e"><div class="ttname"><a href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">ghttp::StringHelper::FindTerminator</a></div><div class="ttdeci">static uint16_t FindTerminator(uint16_t i, const char *src, const char *include_special, bool invert_special_only=false, uint16_t src_max=0)</div><div class="ttdoc">Find terminator character using characters from given terminator string.</div><div class="ttdef"><b>Definition:</b> ghttp_stringhelper.h:157</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a4dcdf6c650da63c8caeb0b4842b3c26b"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a4dcdf6c650da63c8caeb0b4842b3c26b">ghttp::HTTPResponse::Header</a></div><div class="ttdeci">bool Header(PGM_VOID_P header_str, const bool replace=true)</div><div class="ttdoc">Response header string, append with optional replace.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:338</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aece2ac4a4458d8aa16731256dac64216"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">ghttp::HTTPBuffer::Append</a></div><div class="ttdeci">bool Append(const char *str, uint16_t length=0)</div><div class="ttdoc">Append character string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:285</div></div>
<div class="ttc" id="aclassghttp_1_1_string_helper_htm_a2e789168250978f50f329eb6aa647240"><div class="ttname"><a href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">ghttp::StringHelper::StrNCmp</a></div><div class="ttdeci">static int16_t StrNCmp(const char *s1, const char *s2, const uint16_t s2_max=0, const bool case_sensitive=true)</div><div class="ttdoc">Alternative from strncmpi and strncmp.</div><div class="ttdef"><b>Definition:</b> ghttp_stringhelper.h:49</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a20c669d4bb96082eac84fe6bb1201472"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a20c669d4bb96082eac84fe6bb1201472">ghttp::HTTPResponse::HeaderSet</a></div><div class="ttdeci">bool HeaderSet(const char *header_str, const bool replace=true)</div><div class="ttdoc">Set response header string, append with optional replace.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:445</div></div>
<div class="ttc" id="aghttp_8h_htm_a16a0f7e7053a679c9bf4289b441a2be7"><div class="ttname"><a href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a></div><div class="ttdeci">#define T(x)</div><div class="ttdoc">Text marco.</div><div class="ttdef"><b>Definition:</b> ghttp.h:35</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a343dafab39305d3dcf72c885a3b86693"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">ghttp::HTTPBuffer::Remove</a></div><div class="ttdeci">bool Remove(uint16_t i, uint16_t e)</div><div class="ttdoc">Remove character(s) at specific start index to end index.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:476</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a4c35bfb11f81b600251c629fc55b61d0"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">ghttp::HTTPBuffer::max_length_</a></div><div class="ttdeci">uint16_t max_length_</div><div class="ttdoc">Maximum data in buffer in characters.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:739</div></div>
<div class="ttc" id="aghttp_8h_htm_a37196cf08a64597afdbddd552611e5fe"><div class="ttname"><a href="ghttp_8h.htm#a37196cf08a64597afdbddd552611e5fe">PGM_CHAR</a></div><div class="ttdeci">#define PGM_CHAR(x)</div><div class="ttdoc">Read character from AVR flash memory.</div><div class="ttdef"><b>Definition:</b> ghttp.h:63</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af3edcde6636f7e28e3fb2fd54dbb97cc"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">ghttp::HTTPBuffer::FindSubString</a></div><div class="ttdeci">uint16_t FindSubString(uint16_t i, uint16_t ei, const char *str, uint16_t str_length_max=0) const</div><div class="ttdoc">Search for a substring, case sensitive.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:671</div></div>
<div class="ttc" id="aghttp_8h_htm_acfb632669c1b54869f00e2340220c0bf"><div class="ttname"><a href="ghttp_8h.htm#acfb632669c1b54869f00e2340220c0bf">PGM_MEMCPY</a></div><div class="ttdeci">#define PGM_MEMCPY(x, y, s)</div><div class="ttdoc">Memory copy from AVR flash memory string.</div><div class="ttdef"><b>Definition:</b> ghttp.h:119</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a7ac3524cafc8f767b980cd94822a9efa"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a7ac3524cafc8f767b980cd94822a9efa">ghttp::HTTPResponse::Complete</a></div><div class="ttdeci">bool Complete(const bool include_content_length=true)</div><div class="ttdoc">Complete, invoke to indicate content complete.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:272</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a3166e1fd8162b90ac6d7d59479f3afeb"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a3166e1fd8162b90ac6d7d59479f3afeb">ghttp::HTTPResponse::Header</a></div><div class="ttdeci">bool Header(const char *header_str, const bool replace=true)</div><div class="ttdoc">Response header string, append with optional replace.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:71</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_ae4f555f1c86bc778bcfef48b1ca7ad20"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#ae4f555f1c86bc778bcfef48b1ca7ad20">ghttp::HTTPResponse::HeaderRemove</a></div><div class="ttdeci">bool HeaderRemove(const char *header_str, const bool all=true)</div><div class="ttdoc">Header remove by given header name string.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:158</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm">ghttp::HTTPResponse</a></div><div class="ttdoc">HTTP Response class with helpers to assist in the construction of valid HTTP response messages.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:20</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a41c18cf0cf44ee46710d1931df180cfa"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a41c18cf0cf44ee46710d1931df180cfa">ghttp::HTTPResponse::HeaderForStatus</a></div><div class="ttdeci">bool HeaderForStatus(PGM_VOID_P protocol_str)</div><div class="ttdoc">Header for status, caller should provide protocol and protocol version information for header string ...</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:363</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a2d07b723f9091a955958abb4bece6047"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a2d07b723f9091a955958abb4bece6047">ghttp::HTTPResponse::GetContentLength</a></div><div class="ttdeci">uint16_t GetContentLength() const</div><div class="ttdoc">Calculate and return content length - headers.</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:49</div></div>
<div class="ttc" id="aghttp__static__pre__route__request__response_8ino_htm_aad6df635ec0b9820ef1ee069e0263614"><div class="ttname"><a href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a></div><div class="ttdeci">char buffer[448]</div><div class="ttdoc">Single packet buffer for EtherCard library.</div><div class="ttdef"><b>Definition:</b> ghttp_static_pre_route_request_response.ino:81</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_ad92fe71a7a36780718d9e044ab314c4a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">ghttp::HTTPBuffer::FindEOL</a></div><div class="ttdeci">uint16_t FindEOL(uint16_t i, uint16_t ei) const</div><div class="ttdoc">Find end of line.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:631</div></div>
<div class="ttc" id="aghttp_8h_htm_ae6b66a4eea341e5050580e68bfbc3745"><div class="ttname"><a href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a></div><div class="ttdeci">#define PGM_STRLEN(x)</div><div class="ttdoc">Get string length from AVR flash memory string.</div><div class="ttdef"><b>Definition:</b> ghttp.h:76</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_response_htm_a8aee479571ef4f49d0dfd7fc8b811044"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_response.htm#a8aee479571ef4f49d0dfd7fc8b811044">ghttp::HTTPResponse::GetEndOfHeaders</a></div><div class="ttdeci">uint16_t GetEndOfHeaders(const bool include_incomplete=false) const</div><div class="ttdoc">Get end of headers (character index)</div><div class="ttdef"><b>Definition:</b> ghttp_httpresponse.h:297</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_4270bfced15e0e73154b13468c7c9ad9.htm">core</a></li><li class="navelem"><a class="el" href="ghttp__httpresponse_8h.htm">ghttp_httpresponse.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:29 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
