<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: /home/davec/repo/ArduinoGHTTP/examples/ghttp_ethercard_get_png_via_link/ecwrap.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-b53ec0f(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp__ethercard__get__png__via__link_2ecwrap_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ecwrap.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Example use of GHTTP (Embedded library for parsing HTTP requests and creating responses) - Part of example ghttp_ethercard_get_png_via_link</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Ethercard TCP/IP packet i/f wrapper to simplify application and remove h/w detail.  You don&#39;t have to use this API</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Dave.C, 2020</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#if !defined(ETHERCARD_WRAP_H)</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define ETHERCARD_WRAP_H</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceexamples.htm">examples</a> { <span class="keyword">namespace </span>ghttp_ethercard_get_png_via_link {</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_UPDATE_CLIENT_IP)</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * Force update of client IP4 address in shared instance when ECWrap::UpdateClientInformation invoked.  This is </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * an alternative to GHTTP_SERVER_USE_SESSIONS when not enabled for the rest of the framework</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * @note Define your own to override this default which is don&#39;t update client IP4</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define ECWRAP_UPDATE_CLIENT_IP             0</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_UPDATE_CLIENT_MAC)</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> * Force update of client MAC address in shared instance when ECWrap::UpdateClientInformation invoked.  This is </span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * an alternative to GHTTP_SERVER_USE_SESSIONS with GHTTP_SESSIONMGR_INCLUDE_MAC when not enabled for the rest </span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * of the framework</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * @note Define your own to override this default which is don&#39;t update client MAC</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#define ECWRAP_UPDATE_CLIENT_MAC            0</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_TX_SEGMENT_SIZE)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * Transmit segmented data over 1 or more packets using a maximum payload size of N bytes.  This is </span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * related to the ethernet MTU</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @note Define your own to override this default</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#define ECWRAP_TX_SEGMENT_SIZE              1024    // Bytes, TCP payload</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_RX_SEGMENT_TIMEOUT)</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * Segmented receive timeout (ms).  Finger in the air, it&#39;s blowing north today so 30ms seems good.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * Assumed LAN traffic only, not going through WAN/Gateway.  Observed segmented receives were between </span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * 6ms to 13ms, double that for Nyquist</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @note Define your own to override this default</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#define ECWRAP_RX_SEGMENT_TIMEOUT           30</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_RTX_PACKET_LENGTH)</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * Length of Ethercard raw packet buffer as byte Ethernet::buffer[ECWRAP_PACKET_BUFFER_LENGTH]</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * This is related to the ethernet MTU</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @note Define your own to override this default</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#define ECWRAP_RTX_PACKET_LENGTH            1500</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#if !defined(ECWRAP_REQRSP_BUFFER_LENGTH)</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * Length of buffer used by GHTTP for request/response parse/building</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @attention Must be &gt; ECWRAP_TX_SEGMENT_SIZE and &gt;= ECWRAP_RTX_PACKET_LENGTH</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @note Define your own to override this default</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#define ECWRAP_REQRSP_BUFFER_LENGTH         (4*1024)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * Wrapper for Ethercard to hide low level functionality and i/f from application</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm">   86</a></span>&#160;<span class="keyword">class </span><a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm">ECWrap</a> {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * Initialise Ethercard + Enc28j60 i/f driver with static IPs</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     * \param[in] server_port Server TCP/IP port</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     * \param[in] ip4 Byte array pointer (4 Octets) representing IP4 address of node on LAN</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     * \param[in] gwip4 Byte array pointer (4 Octets) representing IP4 address of local gateway</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * \param[in] mac Byte array pointer (6 Octets) representing MAC address of node on LAN</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * \param[in] pin MCU/board specific SPI0 bus, slave select pin</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">static</span> uint8_t <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a2517ced74891de480649fedeb761bab7">Initialise</a>(<span class="keyword">const</span> uint16_t server_port, <span class="keyword">const</span> uint8_t* ip4, <span class="keyword">const</span> uint8_t* gwip4, <span class="keyword">const</span> uint8_t* mac, uint8_t pin);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     * Get client information from Ethercard packet buffer and update shared instance</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * \note Updates when GHTTP_SERVER_USE_SESSIONS optionally GHTTP_SESSIONMGR_INCLUDE_MAC set to 1</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     * or ECWRAP_UPDATE_CLIENT_IP or ECWRAP_UPDATE_CLIENT_MAC</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a2d5633602858a909d9d1b98a1d48dd22">UpdateClientInformation</a>();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * Send 1 or more TCP packets, segmenting GHTTP response to client</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * This should really be implemented by a proper POSX socket layer instead of this noddy Ethercard/Enc28j60 api</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     * \param[in] response HTTP Your response buffer or user buffer</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * \param[in] response_length Your response length (Bytes/ASCII characters)</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * \param[in] first Flag indicating first invoke or data segment (default true)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * \param[in] more Flag indicating more data to follow (default false)</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">Send</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *response, uint32_t response_length, <span class="keyword">const</span> <span class="keywordtype">bool</span> first=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> more=<span class="keyword">false</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     * Send 1 or more TCP packets, segmenting GHTTP response to client</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * This should really be implemented by a proper POSX socket layer instead of this noddy Ethercard/Enc28j60 api</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * \todo Template the parameter?</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     * \param[in] response HTTP Your response buffer or user buffer (flash based)</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * \param[in] response_length Your response length (Bytes/ASCII characters)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * \param[in] first Flag indicating first invoke or data segment (default true)</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * \param[in] more Flag indicating more data to follow (default false)</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">Send</a>(PGM_VOID_P response, uint32_t response_length, <span class="keyword">const</span> <span class="keywordtype">bool</span> first=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> more=<span class="keyword">false</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     * Receive 1 or more TCP packets, segmenting GHTTP request from client.  GHTTP parse is used to decide </span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * if request complete and ready for processing.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * \note Internally invokes @ref UpdateClientInformation</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * Implementation follows:</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     * 1. Read request first line.  Parse it, Are we done with no errors?</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * 2. Read headers (if any).  Parse it, Are we done with no errors?</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * 3. Content (if any).  Parse it, Are we done with no errors? </span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * \todo Deal with millis() overflow and roll, right now it will indicate timeout</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * </span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * \param[out] err Pointer to request parse error code</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * sd.request.GetLastError().  Everything is an error that isn&#39;t mentioned below</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     * sd.request.ERR_NONE Assume request parse complete.  Should send response</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * sd.request.ERR_SEGMENTATION Send acknowledge</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * sd.request.ERR_PARSE_UNEXPECTED_DATA On request buffer overflow.  Should redirect</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * \return Receive status</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * \retval true HTTP request received and parsed</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * \retval false Nothing yet to report</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a8ebeaab1fb482a3f27bb683ca8698229">Receive</a>(uint8_t *err);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     * Get Ethercard packet buffer, payload start which is after IP+TCP headers</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     * \return Data buffer pointer</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">char</span>* <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#ad542346cc7e5ab1cdce86cfd8e331b26">GetPacketPayloadBuffer</a>();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * Get Ethercard packet buffer payload maximum length</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * \return Data buffer allocation length</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">static</span> uint16_t <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#af56bf664c3958ee3e6ace1b3120b0fd8">GetPacketPayloadBufferLength</a>();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     * Get GHTTP request/response buffer</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * \return Buffer pointer</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">char</span>* <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a8655420888947111982ec63be1402163">GetHTTPBuffer</a>();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * Get GHTTP request/response buffer maximum length</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * \return Buffer allocation length</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">static</span> uint16_t <a class="code" href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a944b95872e6a5b0fa575b7fbc7861001">GetHTTPBufferLength</a>();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}; <span class="comment">// class ECWrap</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;} } <span class="comment">// namespace examples::ghttp_ethercard_get_png_via_link</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#endif // !defined(ETHERCARD_WRAP_H)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_a944b95872e6a5b0fa575b7fbc7861001"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a944b95872e6a5b0fa575b7fbc7861001">examples::ghttp_ethercard_get_png_via_link::ECWrap::GetHTTPBufferLength</a></div><div class="ttdeci">static uint16_t GetHTTPBufferLength()</div><div class="ttdoc">Get GHTTP request/response buffer maximum length.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:239</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_ad542346cc7e5ab1cdce86cfd8e331b26"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#ad542346cc7e5ab1cdce86cfd8e331b26">examples::ghttp_ethercard_get_png_via_link::ECWrap::GetPacketPayloadBuffer</a></div><div class="ttdeci">static char * GetPacketPayloadBuffer()</div><div class="ttdoc">Get Ethercard packet buffer, payload start which is after IP+TCP headers.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:222</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_a8ebeaab1fb482a3f27bb683ca8698229"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a8ebeaab1fb482a3f27bb683ca8698229">examples::ghttp_ethercard_get_png_via_link::ECWrap::Receive</a></div><div class="ttdeci">static bool Receive(uint8_t *err)</div><div class="ttdoc">Receive 1 or more TCP packets, segmenting GHTTP request from client.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:162</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm">examples::ghttp_ethercard_get_png_via_link::ECWrap</a></div><div class="ttdoc">Wrapper for Ethercard to hide low level functionality and i/f from application.</div><div class="ttdef"><b>Definition:</b> ecwrap.h:86</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_a2d5633602858a909d9d1b98a1d48dd22"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a2d5633602858a909d9d1b98a1d48dd22">examples::ghttp_ethercard_get_png_via_link::ECWrap::UpdateClientInformation</a></div><div class="ttdeci">static void UpdateClientInformation()</div><div class="ttdoc">Get client information from Ethercard packet buffer and update shared instance.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:62</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_a2517ced74891de480649fedeb761bab7"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a2517ced74891de480649fedeb761bab7">examples::ghttp_ethercard_get_png_via_link::ECWrap::Initialise</a></div><div class="ttdeci">static uint8_t Initialise(const uint16_t server_port, const uint8_t *ip4, const uint8_t *gwip4, const uint8_t *mac, uint8_t pin)</div><div class="ttdoc">Initialise Ethercard + Enc28j60 i/f driver with static IPs.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:45</div></div>
<div class="ttc" id="anamespaceexamples_htm"><div class="ttname"><a href="namespaceexamples.htm">examples</a></div><div class="ttdoc">Example use of GHTTP (Embedded library for parsing HTTP requests and creating responses) - Part of ex...</div><div class="ttdef"><b>Definition:</b> ecwrap.h:12</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_a8655420888947111982ec63be1402163"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#a8655420888947111982ec63be1402163">examples::ghttp_ethercard_get_png_via_link::ECWrap::GetHTTPBuffer</a></div><div class="ttdeci">static char * GetHTTPBuffer()</div><div class="ttdoc">Get GHTTP request/response buffer.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:234</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_af56bf664c3958ee3e6ace1b3120b0fd8"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#af56bf664c3958ee3e6ace1b3120b0fd8">examples::ghttp_ethercard_get_png_via_link::ECWrap::GetPacketPayloadBufferLength</a></div><div class="ttdeci">static uint16_t GetPacketPayloadBufferLength()</div><div class="ttdoc">Get Ethercard packet buffer payload maximum length.</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:227</div></div>
<div class="ttc" id="aclassexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap_htm_af2f9a558873b81863a4496b09005604c"><div class="ttname"><a href="classexamples_1_1ghttp__ethercard__get__png__via__link_1_1_e_c_wrap.htm#af2f9a558873b81863a4496b09005604c">examples::ghttp_ethercard_get_png_via_link::ECWrap::Send</a></div><div class="ttdeci">static void Send(const char *response, uint32_t response_length, const bool first=true, const bool more=false)</div><div class="ttdoc">Send 1 or more TCP packets, segmenting GHTTP response to client This should really be implemented by ...</div><div class="ttdef"><b>Definition:</b> ecwrap.cpp:92</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.htm">examples</a></li><li class="navelem"><a class="el" href="dir_97806330e47b745c975743dd2c6e93c7.htm">ghttp_ethercard_get_png_via_link</a></li><li class="navelem"><b>ecwrap.h</b></li>
    <li class="footer">Generated on Mon Jan 1 2024 14:59:56 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
