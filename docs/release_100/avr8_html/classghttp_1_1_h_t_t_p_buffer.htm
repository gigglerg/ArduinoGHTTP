<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp::HTTPBuffer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classghttp_1_1_h_t_t_p_buffer.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classghttp_1_1_h_t_t_p_buffer-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ghttp::HTTPBuffer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class for character buffering with an interface for string manipulation used during both request and response processing.  
 <a href="classghttp_1_1_h_t_t_p_buffer.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="ghttp__httpbuffer_8h_source.htm">core/ghttp_httpbuffer.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8af9de4e14113804f7dd131f2ef29fa7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a8af9de4e14113804f7dd131f2ef29fa7">HTTPBuffer</a> ()</td></tr>
<tr class="memdesc:a8af9de4e14113804f7dd131f2ef29fa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, make stable instance.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a8af9de4e14113804f7dd131f2ef29fa7">More...</a><br /></td></tr>
<tr class="separator:a8af9de4e14113804f7dd131f2ef29fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08158f4531e2874e50b6f4182cf04966"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a08158f4531e2874e50b6f4182cf04966">HTTPBuffer</a> (char *<a class="el" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, uint16_t max_length, uint16_t length=0, uint16_t offset=0)</td></tr>
<tr class="memdesc:a08158f4531e2874e50b6f4182cf04966"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a08158f4531e2874e50b6f4182cf04966">More...</a><br /></td></tr>
<tr class="separator:a08158f4531e2874e50b6f4182cf04966"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0ef2438e1c7ae3953641b6fa310cddb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ac0ef2438e1c7ae3953641b6fa310cddb">Clear</a> (const bool zero_clear=false)</td></tr>
<tr class="memdesc:ac0ef2438e1c7ae3953641b6fa310cddb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear buffer, includes characteristics like length and offset.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ac0ef2438e1c7ae3953641b6fa310cddb">More...</a><br /></td></tr>
<tr class="separator:ac0ef2438e1c7ae3953641b6fa310cddb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f97bb5d3220c9dde7b002a95f79aa24"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">At</a> (const uint16_t i) const</td></tr>
<tr class="memdesc:a9f97bb5d3220c9dde7b002a95f79aa24"><td class="mdescLeft">&#160;</td><td class="mdescRight">At accessor.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">More...</a><br /></td></tr>
<tr class="separator:a9f97bb5d3220c9dde7b002a95f79aa24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf1170ca339ec7ad0b14946d923df595"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#acf1170ca339ec7ad0b14946d923df595">At</a> (const uint16_t i, char c)</td></tr>
<tr class="memdesc:acf1170ca339ec7ad0b14946d923df595"><td class="mdescLeft">&#160;</td><td class="mdescRight">At accessor setter.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#acf1170ca339ec7ad0b14946d923df595">More...</a><br /></td></tr>
<tr class="separator:acf1170ca339ec7ad0b14946d923df595"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a567f458970d2f3182f8d866da0708802"><td class="memItemLeft" align="right" valign="top"><a id="a567f458970d2f3182f8d866da0708802"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> &amp;rhs)</td></tr>
<tr class="separator:a567f458970d2f3182f8d866da0708802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87f14079ea832f40dc7ff78ba361d1a8"><td class="memItemLeft" align="right" valign="top"><a id="a87f14079ea832f40dc7ff78ba361d1a8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> *rhs)</td></tr>
<tr class="separator:a87f14079ea832f40dc7ff78ba361d1a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61ab287b3bd6073b3e0f1ae5c0fe13ab"><td class="memItemLeft" align="right" valign="top"><a id="a61ab287b3bd6073b3e0f1ae5c0fe13ab"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const char *rhs)</td></tr>
<tr class="separator:a61ab287b3bd6073b3e0f1ae5c0fe13ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98aedbcd7d44b000f09f360cf4a6799e"><td class="memItemLeft" align="right" valign="top"><a id="a98aedbcd7d44b000f09f360cf4a6799e"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const uint16_t &amp;rhs)</td></tr>
<tr class="separator:a98aedbcd7d44b000f09f360cf4a6799e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa99afbe2b1298d0891ae1f75f3fcbc1b"><td class="memItemLeft" align="right" valign="top"><a id="aa99afbe2b1298d0891ae1f75f3fcbc1b"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const uint16_t &amp;rhs)</td></tr>
<tr class="separator:aa99afbe2b1298d0891ae1f75f3fcbc1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a509bf0ace750fa0458df946cfb62cb91"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a509bf0ace750fa0458df946cfb62cb91">operator[]</a> (const uint16_t i)</td></tr>
<tr class="memdesc:a509bf0ace750fa0458df946cfb62cb91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index operator, use to access characters as alternative to <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">At</a>.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a509bf0ace750fa0458df946cfb62cb91">More...</a><br /></td></tr>
<tr class="separator:a509bf0ace750fa0458df946cfb62cb91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaccfbecf78f865649933f4813c2d6a82"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">GetBuffer</a> () const</td></tr>
<tr class="memdesc:aaccfbecf78f865649933f4813c2d6a82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get buffer.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#aaccfbecf78f865649933f4813c2d6a82">More...</a><br /></td></tr>
<tr class="separator:aaccfbecf78f865649933f4813c2d6a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28df8375d6824c339014a1f192aa1742"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">SetBuffer</a> (char *<a class="el" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, uint16_t length=0, uint16_t offset=0)</td></tr>
<tr class="memdesc:a28df8375d6824c339014a1f192aa1742"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set buffer Because Request and Responses may share the same buffer and some Request information maybe required for building a Response, use offset to keep required Request information buffered and usable while Response being built.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">More...</a><br /></td></tr>
<tr class="separator:a28df8375d6824c339014a1f192aa1742"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9acfe159d320827ab76c9dbad00591e"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ad9acfe159d320827ab76c9dbad00591e">GetOffset</a> () const</td></tr>
<tr class="memdesc:ad9acfe159d320827ab76c9dbad00591e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get offset.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ad9acfe159d320827ab76c9dbad00591e">More...</a><br /></td></tr>
<tr class="separator:ad9acfe159d320827ab76c9dbad00591e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf720940a9f2357e50f539f184dd8679"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a> ()</td></tr>
<tr class="memdesc:adf720940a9f2357e50f539f184dd8679"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare zero offset data.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">More...</a><br /></td></tr>
<tr class="separator:adf720940a9f2357e50f539f184dd8679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb9acdefa93179e395c6c7d7d001244"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> () const</td></tr>
<tr class="memdesc:aeeb9acdefa93179e395c6c7d7d001244"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get length.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">More...</a><br /></td></tr>
<tr class="separator:aeeb9acdefa93179e395c6c7d7d001244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8111d390d405e2cb61728c0dbed4114"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ac8111d390d405e2cb61728c0dbed4114">SetLength</a> (const uint16_t length, const bool ignore_maximum=false)</td></tr>
<tr class="memdesc:ac8111d390d405e2cb61728c0dbed4114"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set length.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ac8111d390d405e2cb61728c0dbed4114">More...</a><br /></td></tr>
<tr class="separator:ac8111d390d405e2cb61728c0dbed4114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69412ab74669a174f581f7c0349db233"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a> () const</td></tr>
<tr class="memdesc:a69412ab74669a174f581f7c0349db233"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get buffer maximum.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">More...</a><br /></td></tr>
<tr class="separator:a69412ab74669a174f581f7c0349db233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef79015e1a8fb34dd96424849e510831"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">SetMaximum</a> (const uint16_t max_length)</td></tr>
<tr class="memdesc:aef79015e1a8fb34dd96424849e510831"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set buffer maximum.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">More...</a><br /></td></tr>
<tr class="separator:aef79015e1a8fb34dd96424849e510831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aece2ac4a4458d8aa16731256dac64216"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">Append</a> (const char *str, uint16_t length=0)</td></tr>
<tr class="memdesc:aece2ac4a4458d8aa16731256dac64216"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append character string.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#aece2ac4a4458d8aa16731256dac64216">More...</a><br /></td></tr>
<tr class="separator:aece2ac4a4458d8aa16731256dac64216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c141425bc8656970d4d8e268fb7d74a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a8c141425bc8656970d4d8e268fb7d74a">Append</a> (const uint8_t *data, uint16_t length)</td></tr>
<tr class="memdesc:a8c141425bc8656970d4d8e268fb7d74a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append unsigned character array.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a8c141425bc8656970d4d8e268fb7d74a">More...</a><br /></td></tr>
<tr class="separator:a8c141425bc8656970d4d8e268fb7d74a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a90814d09c0383bf85c65213869d41b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a3a90814d09c0383bf85c65213869d41b">Append</a> (char ch)</td></tr>
<tr class="memdesc:a3a90814d09c0383bf85c65213869d41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append character.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a3a90814d09c0383bf85c65213869d41b">More...</a><br /></td></tr>
<tr class="separator:a3a90814d09c0383bf85c65213869d41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f23fe8e676cdaab57c98a3e9478e25d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4f23fe8e676cdaab57c98a3e9478e25d"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a4f23fe8e676cdaab57c98a3e9478e25d">AppendInt</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> v, uint8_t base=10)</td></tr>
<tr class="memdesc:a4f23fe8e676cdaab57c98a3e9478e25d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append signed integer type T with given base.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a4f23fe8e676cdaab57c98a3e9478e25d">More...</a><br /></td></tr>
<tr class="separator:a4f23fe8e676cdaab57c98a3e9478e25d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae752ad27af78588f467013e877a7ff80"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae752ad27af78588f467013e877a7ff80"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ae752ad27af78588f467013e877a7ff80">AppendUInt</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> v, uint8_t base=10)</td></tr>
<tr class="memdesc:ae752ad27af78588f467013e877a7ff80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append unsigned integer type T with given base.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ae752ad27af78588f467013e877a7ff80">More...</a><br /></td></tr>
<tr class="separator:ae752ad27af78588f467013e877a7ff80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8873883c5a9edd60c266755f5e36dc03"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8873883c5a9edd60c266755f5e36dc03"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a8873883c5a9edd60c266755f5e36dc03">AppendDecimal</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> v, uint8_t digits_below_dp=3, uint8_t str_allocation=16)</td></tr>
<tr class="memdesc:a8873883c5a9edd60c266755f5e36dc03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append decimal type T with specific digits below decimal point.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a8873883c5a9edd60c266755f5e36dc03">More...</a><br /></td></tr>
<tr class="separator:a8873883c5a9edd60c266755f5e36dc03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ecdeda5ceb92a1000ac1dda97b94353"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">Insert</a> (uint16_t i, const char *str, uint16_t length=0)</td></tr>
<tr class="memdesc:a7ecdeda5ceb92a1000ac1dda97b94353"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert character string at specific index.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a7ecdeda5ceb92a1000ac1dda97b94353">More...</a><br /></td></tr>
<tr class="separator:a7ecdeda5ceb92a1000ac1dda97b94353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd86c6d02110b0493787816b1d2452d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a8dd86c6d02110b0493787816b1d2452d">InsertPadding</a> (uint16_t i, char c, uint16_t length)</td></tr>
<tr class="memdesc:a8dd86c6d02110b0493787816b1d2452d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert padding character (a repeated character) at specific index to given length.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a8dd86c6d02110b0493787816b1d2452d">More...</a><br /></td></tr>
<tr class="separator:a8dd86c6d02110b0493787816b1d2452d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a343dafab39305d3dcf72c885a3b86693"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">Remove</a> (uint16_t i, uint16_t e)</td></tr>
<tr class="memdesc:a343dafab39305d3dcf72c885a3b86693"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove character(s) at specific start index to end index.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a343dafab39305d3dcf72c885a3b86693">More...</a><br /></td></tr>
<tr class="separator:a343dafab39305d3dcf72c885a3b86693"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab698dae0934552ac7b565011d9bab08f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ab698dae0934552ac7b565011d9bab08f">Replace</a> (uint16_t i, uint16_t e, const char *str, uint16_t length=0)</td></tr>
<tr class="memdesc:ab698dae0934552ac7b565011d9bab08f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace character(s) at specific start index to end index with given character string.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ab698dae0934552ac7b565011d9bab08f">More...</a><br /></td></tr>
<tr class="separator:ab698dae0934552ac7b565011d9bab08f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133fa6599f1e5dccb9a13d0fbe7f742a"><td class="memItemLeft" align="right" valign="top"><a id="a133fa6599f1e5dccb9a13d0fbe7f742a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (PGM_VOID_P rhs)</td></tr>
<tr class="separator:a133fa6599f1e5dccb9a13d0fbe7f742a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ac4adab9f43fffb8cf84dc8cdf9a645"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a0ac4adab9f43fffb8cf84dc8cdf9a645">Append</a> (PGM_VOID_P str, uint16_t length=0)</td></tr>
<tr class="memdesc:a0ac4adab9f43fffb8cf84dc8cdf9a645"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append character string.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a0ac4adab9f43fffb8cf84dc8cdf9a645">More...</a><br /></td></tr>
<tr class="separator:a0ac4adab9f43fffb8cf84dc8cdf9a645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a554536ffc0965d0724f537e20ceb3387"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a554536ffc0965d0724f537e20ceb3387">Insert</a> (uint16_t i, PGM_VOID_P str, uint16_t length=0)</td></tr>
<tr class="memdesc:a554536ffc0965d0724f537e20ceb3387"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert character string at specific index.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a554536ffc0965d0724f537e20ceb3387">More...</a><br /></td></tr>
<tr class="separator:a554536ffc0965d0724f537e20ceb3387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b40289f6622010843c02522c77b09ab"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a8b40289f6622010843c02522c77b09ab">Replace</a> (uint16_t i, uint16_t e, PGM_VOID_P str, uint16_t length=0)</td></tr>
<tr class="memdesc:a8b40289f6622010843c02522c77b09ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace character(s) at specific start index to end index with given character string.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a8b40289f6622010843c02522c77b09ab">More...</a><br /></td></tr>
<tr class="separator:a8b40289f6622010843c02522c77b09ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ad92fe71a7a36780718d9e044ab314c4a"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a> (uint16_t i, uint16_t ei) const</td></tr>
<tr class="memdesc:ad92fe71a7a36780718d9e044ab314c4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find end of line.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">More...</a><br /></td></tr>
<tr class="separator:ad92fe71a7a36780718d9e044ab314c4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3edcde6636f7e28e3fb2fd54dbb97cc"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a> (uint16_t i, uint16_t ei, const char *str, uint16_t str_length_max=0) const</td></tr>
<tr class="memdesc:af3edcde6636f7e28e3fb2fd54dbb97cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search for a substring, case sensitive.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">More...</a><br /></td></tr>
<tr class="separator:af3edcde6636f7e28e3fb2fd54dbb97cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a4f3bdf890006fe8d46d34ee163929a"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a> (uint16_t i, const char *include_special, bool invert_special_only=false, uint16_t i_max=0) const</td></tr>
<tr class="memdesc:a7a4f3bdf890006fe8d46d34ee163929a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find terminator characters.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">More...</a><br /></td></tr>
<tr class="separator:a7a4f3bdf890006fe8d46d34ee163929a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97cb111c718d0c26f0d1efc7b61efac7"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a97cb111c718d0c26f0d1efc7b61efac7">FindSubString</a> (uint16_t i, uint16_t ei, PGM_VOID_P str, uint16_t str_length_max=0) const</td></tr>
<tr class="memdesc:a97cb111c718d0c26f0d1efc7b61efac7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search for a substring, case sensitive.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a97cb111c718d0c26f0d1efc7b61efac7">More...</a><br /></td></tr>
<tr class="separator:a97cb111c718d0c26f0d1efc7b61efac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80d3f2678d4517ec203098adaeab7668"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a80d3f2678d4517ec203098adaeab7668">FindTerminator</a> (uint16_t i, PGM_VOID_P include_special, bool invert_special_only=false, uint16_t i_max=0) const</td></tr>
<tr class="memdesc:a80d3f2678d4517ec203098adaeab7668"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find terminator characters.  <a href="classghttp_1_1_h_t_t_p_buffer.htm#a80d3f2678d4517ec203098adaeab7668">More...</a><br /></td></tr>
<tr class="separator:a80d3f2678d4517ec203098adaeab7668"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:af9c6fd75b8e2c829e43b086381e20b39"><td class="memItemLeft" align="right" valign="top"><a id="af9c6fd75b8e2c829e43b086381e20b39"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a></td></tr>
<tr class="memdesc:af9c6fd75b8e2c829e43b086381e20b39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data in buffer, length in characters. <br /></td></tr>
<tr class="separator:af9c6fd75b8e2c829e43b086381e20b39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c35bfb11f81b600251c629fc55b61d0"><td class="memItemLeft" align="right" valign="top"><a id="a4c35bfb11f81b600251c629fc55b61d0"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a></td></tr>
<tr class="memdesc:a4c35bfb11f81b600251c629fc55b61d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum data in buffer in characters. <br /></td></tr>
<tr class="separator:a4c35bfb11f81b600251c629fc55b61d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0cbb4e3a4546ac49de67f1ba3756bda"><td class="memItemLeft" align="right" valign="top"><a id="ad0cbb4e3a4546ac49de67f1ba3756bda"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#ad0cbb4e3a4546ac49de67f1ba3756bda">offset_</a></td></tr>
<tr class="memdesc:ad0cbb4e3a4546ac49de67f1ba3756bda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Offset (characters) of unused head of buffer. <br /></td></tr>
<tr class="separator:ad0cbb4e3a4546ac49de67f1ba3756bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63c63abb009ad0de97aee89ef979fd0"><td class="memItemLeft" align="right" valign="top"><a id="af63c63abb009ad0de97aee89ef979fd0"></a>
char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a></td></tr>
<tr class="memdesc:af63c63abb009ad0de97aee89ef979fd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Character buffer pointer. <br /></td></tr>
<tr class="separator:af63c63abb009ad0de97aee89ef979fd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class for character buffering with an interface for string manipulation used during both request and response processing. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a8af9de4e14113804f7dd131f2ef29fa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8af9de4e14113804f7dd131f2ef29fa7">&#9670;&nbsp;</a></span>HTTPBuffer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ghttp::HTTPBuffer::HTTPBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor, make stable instance. </p>
<p>Buffer characteristics imply empty with no actual buffer </p>

</div>
</div>
<a id="a08158f4531e2874e50b6f4182cf04966"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08158f4531e2874e50b6f4182cf04966">&#9670;&nbsp;</a></span>HTTPBuffer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ghttp::HTTPBuffer::HTTPBuffer </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>max_length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance. </p>
<p>Setup buffer, maximum length, length and any offset. The offset is primarily used to allow parts of the buffer to remain while other parts filled; useful when processing a response that still requires request data that would otherwise be overwritten.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Character string/buffer pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">max_length</td><td>Maximum length (characters) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters of user data present in buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Data offset. Processing starts at buffer[offset]. Revert to buffer[0] by <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3a90814d09c0383bf85c65213869d41b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a90814d09c0383bf85c65213869d41b">&#9670;&nbsp;</a></span>Append() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Append </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append character. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ch</td><td>Character </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aece2ac4a4458d8aa16731256dac64216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aece2ac4a4458d8aa16731256dac64216">&#9670;&nbsp;</a></span>Append() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Append </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append character string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8c141425bc8656970d4d8e268fb7d74a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c141425bc8656970d4d8e268fb7d74a">&#9670;&nbsp;</a></span>Append() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Append </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append unsigned character array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Data pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0ac4adab9f43fffb8cf84dc8cdf9a645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ac4adab9f43fffb8cf84dc8cdf9a645">&#9670;&nbsp;</a></span>Append() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Append </td>
          <td>(</td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append character string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated, flash based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8873883c5a9edd60c266755f5e36dc03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8873883c5a9edd60c266755f5e36dc03">&#9670;&nbsp;</a></span>AppendDecimal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::AppendDecimal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>digits_below_dp</em> = <code>3</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>str_allocation</em> = <code>16</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append decimal type T with specific digits below decimal point. </p>
<dl class="section attention"><dt>Attention</dt><dd>Conversion from numeric to string performed at end of character buffer. This may fail if there isn't sufficient space</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>float/double type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Type T decimal value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">digits_below_dp</td><td>Digits below decimal point, default 3 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str_allocation</td><td>String allocation at end of buffer for conversion, Characters, default 16. Increase as required for conversion digits </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4f23fe8e676cdaab57c98a3e9478e25d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f23fe8e676cdaab57c98a3e9478e25d">&#9670;&nbsp;</a></span>AppendInt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::AppendInt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>base</em> = <code>10</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append signed integer type T with given base. </p>
<dl class="section attention"><dt>Attention</dt><dd>Conversion from numeric to string performed at end of character buffer. This may fail if there isn't sufficient space</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>signed integer type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Type T integer value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Number base/radix, default 10 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae752ad27af78588f467013e877a7ff80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae752ad27af78588f467013e877a7ff80">&#9670;&nbsp;</a></span>AppendUInt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::AppendUInt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>base</em> = <code>10</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Append unsigned integer type T with given base. </p>
<dl class="section attention"><dt>Attention</dt><dd>Conversion from numeric to string performed at end of character buffer. This may fail if there isn't sufficient space</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>unsigned integer type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Type T integer value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Number base/radix, default 10 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9f97bb5d3220c9dde7b002a95f79aa24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f97bb5d3220c9dde7b002a95f79aa24">&#9670;&nbsp;</a></span>At() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char ghttp::HTTPBuffer::At </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>At accessor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>0&gt;= Index &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Character or '\0' (index out of range) </dd></dl>

</div>
</div>
<a id="acf1170ca339ec7ad0b14946d923df595"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf1170ca339ec7ad0b14946d923df595">&#9670;&nbsp;</a></span>At() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::At </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>At accessor setter. </p>
<dl class="section attention"><dt>Attention</dt><dd>Length is not changed, writing above <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> will set data if also less than <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>0&gt;= Index &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Character </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Written </td></tr>
    <tr><td class="paramname">false</td><td>No written (index out of range) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac0ef2438e1c7ae3953641b6fa310cddb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0ef2438e1c7ae3953641b6fa310cddb">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPBuffer::Clear </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>zero_clear</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear buffer, includes characteristics like length and offset. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">zero_clear</td><td>Flag indicating entire buffer should be zero cleared (default false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_with_routes_8ino-example.htm#a16">ghttp_ethercard_get_with_routes.ino</a>, <a class="el" href="ghttp_static_pre_route_request_response_8ino-example.htm#a13">ghttp_static_pre_route_request_response.ino</a>, <a class="el" href="ghttp_static_redirect_route_request_response_8ino-example.htm#a11">ghttp_static_redirect_route_request_response.ino</a>, and <a class="el" href="ghttp_static_unhandled_route_request_response_8ino-example.htm#a14">ghttp_static_unhandled_route_request_response.ino</a>.</dd>
</dl>

</div>
</div>
<a id="ad92fe71a7a36780718d9e044ab314c4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad92fe71a7a36780718d9e044ab314c4a">&#9670;&nbsp;</a></span>FindEOL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::FindEOL </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>ei</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find end of line. </p>
<dl class="section note"><dt>Note</dt><dd>An EOL is LF+CR in that order and the return index will be of CR</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ei</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>. Maximum expected line length between i and ei </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index of CR (EOL found) </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">ei+1</td><td>Not found </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af3edcde6636f7e28e3fb2fd54dbb97cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3edcde6636f7e28e3fb2fd54dbb97cc">&#9670;&nbsp;</a></span>FindSubString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::FindSubString </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>str_length_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Search for a substring, case sensitive. </p>
<dl class="section note"><dt>Note</dt><dd>You can find the next substring within s1 by moving forward size of s2 string and passing this pointer in as s1</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ei</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>. Maximum search length between i and ei </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>Pointer to subject or substring to search for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str_length_max</td><td>Sub string maximum length (characters). Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Starting index within buffer where subject string found. If larger-equal than ei =&gt; not found </dd></dl>

</div>
</div>
<a id="a97cb111c718d0c26f0d1efc7b61efac7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97cb111c718d0c26f0d1efc7b61efac7">&#9670;&nbsp;</a></span>FindSubString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::FindSubString </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>str_length_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Search for a substring, case sensitive. </p>
<dl class="section note"><dt>Note</dt><dd>You can find the next substring within s1 by moving forward size of s2 string and passing this pointer in as s1</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ei</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>. Maximum search length between i and ei </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>Pointer to subject or substring to search for (flash base) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str_length_max</td><td>Sub string maximum length (characters). Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Starting index within buffer where subject string found. If larger-equal than ei =&gt; not found </dd></dl>

</div>
</div>
<a id="a7a4f3bdf890006fe8d46d34ee163929a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a4f3bdf890006fe8d46d34ee163929a">&#9670;&nbsp;</a></span>FindTerminator() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::FindTerminator </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>include_special</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>invert_special_only</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find terminator characters. </p>
<p>Can search only for characters that are included in terminator string</p>
<dl class="section note"><dt>Note</dt><dd>Set parameter invert_speical_only to search for characters that only exist in this string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">include_special</td><td>Terminator string. Contains characters you either want to find or must include(invert_speical_only=true) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">invert_special_only</td><td>Flag controlling termination where search ends when character exists in terminator string(false) or must exist in terminator string(true). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i_max</td><td>Maximum index where search should stop, default 0 =&gt; strlen(GetBuffer()) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index where terminator character found(invert_special_only=false) or not found (invert_special_only=true) </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">i_max+1</td><td>Than no terminator found </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a80d3f2678d4517ec203098adaeab7668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80d3f2678d4517ec203098adaeab7668">&#9670;&nbsp;</a></span>FindTerminator() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::FindTerminator </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>include_special</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>invert_special_only</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find terminator characters. </p>
<p>Can search only for characters that are included in terminator string</p>
<dl class="section note"><dt>Note</dt><dd>Set parameter invert_speical_only to search for characters that only exist in this string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">include_special</td><td>Terminator string (flash based). Contains characters you either want to find or must include(invert_speical_only=true) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">invert_special_only</td><td>Flag controlling termination where search ends when character exists in terminator string(false) or must exist in terminator string(true). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i_max</td><td>Maximum index where search should stop, default 0 =&gt; strlen(GetBuffer()) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index where terminator character found(invert_special_only=false) or not found (invert_special_only=true) </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">i_max+1</td><td>Than no terminator found </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaccfbecf78f865649933f4813c2d6a82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaccfbecf78f865649933f4813c2d6a82">&#9670;&nbsp;</a></span>GetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char* ghttp::HTTPBuffer::GetBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get buffer. </p>
<dl class="section return"><dt>Returns</dt><dd>Buffer pointer </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">NULL</td><td>if buffer not setup </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a23">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_png_via_link_8ino-example.htm#a20">ghttp_ethercard_get_png_via_link.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a22">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_post_file_upload_8ino-example.htm#a20">ghttp_ethercard_post_file_upload.ino</a>, <a class="el" href="ghttp_static_pre_route_request_response_8ino-example.htm#a17">ghttp_static_pre_route_request_response.ino</a>, <a class="el" href="ghttp_static_redirect_route_request_response_8ino-example.htm#a16">ghttp_static_redirect_route_request_response.ino</a>, <a class="el" href="ghttp_static_request_response_session_simple_8ino-example.htm#a15">ghttp_static_request_response_session_simple.ino</a>, <a class="el" href="ghttp_static_request_response_simple_8ino-example.htm#a15">ghttp_static_request_response_simple.ino</a>, and <a class="el" href="ghttp_static_unhandled_route_request_response_8ino-example.htm#a18">ghttp_static_unhandled_route_request_response.ino</a>.</dd>
</dl>

</div>
</div>
<a id="aeeb9acdefa93179e395c6c7d7d001244"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeb9acdefa93179e395c6c7d7d001244">&#9670;&nbsp;</a></span>GetLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::GetLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get length. </p>
<p>This is the filled length or length of valid data held within buffer</p>
<dl class="section return"><dt>Returns</dt><dd>Characters </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a25">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_png_via_link_8ino-example.htm#a22">ghttp_ethercard_get_png_via_link.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a24">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_get_with_routes_8ino-example.htm#a27">ghttp_ethercard_get_with_routes.ino</a>, <a class="el" href="ghttp_ethercard_post_file_upload_8ino-example.htm#a22">ghttp_ethercard_post_file_upload.ino</a>, <a class="el" href="ghttp_ethercard_server_authorization_8ino-example.htm#a23">ghttp_ethercard_server_authorization.ino</a>, <a class="el" href="ghttp_ethercard_session_login_8ino-example.htm#a24">ghttp_ethercard_session_login.ino</a>, and <a class="el" href="ghttp_ethercard_windoze_toast_notification_8ino-example.htm#a14">ghttp_ethercard_windoze_toast_notification.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a69412ab74669a174f581f7c0349db233"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69412ab74669a174f581f7c0349db233">&#9670;&nbsp;</a></span>GetMaximum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::GetMaximum </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get buffer maximum. </p>
<dl class="section return"><dt>Returns</dt><dd>Characters. 0 indicates nothing can be held </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a21">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a20">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_get_with_routes_8ino-example.htm#a22">ghttp_ethercard_get_with_routes.ino</a>, <a class="el" href="ghttp_ethercard_server_authorization_8ino-example.htm#a18">ghttp_ethercard_server_authorization.ino</a>, and <a class="el" href="ghttp_ethercard_windoze_toast_notification_8ino-example.htm#a23">ghttp_ethercard_windoze_toast_notification.ino</a>.</dd>
</dl>

</div>
</div>
<a id="ad9acfe159d320827ab76c9dbad00591e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9acfe159d320827ab76c9dbad00591e">&#9670;&nbsp;</a></span>GetOffset()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t ghttp::HTTPBuffer::GetOffset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get offset. </p>
<dl class="section note"><dt>Note</dt><dd>To set use SetBuffer</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Offset A non-zero indicates that <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a> requires invoke at some point </dd></dl>

</div>
</div>
<a id="a7ecdeda5ceb92a1000ac1dda97b94353"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ecdeda5ceb92a1000ac1dda97b94353">&#9670;&nbsp;</a></span>Insert() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Insert </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Insert character string at specific index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt;= <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> (latter for append operation) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a554536ffc0965d0724f537e20ceb3387"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a554536ffc0965d0724f537e20ceb3387">&#9670;&nbsp;</a></span>Insert() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Insert </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Insert character string at specific index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt;= <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> (latter for append operation) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated, flash based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8dd86c6d02110b0493787816b1d2452d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dd86c6d02110b0493787816b1d2452d">&#9670;&nbsp;</a></span>InsertPadding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::InsertPadding </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Insert padding character (a repeated character) at specific index to given length. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt;= <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> (latter for append operation) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Character </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters N to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Append state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a509bf0ace750fa0458df946cfb62cb91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a509bf0ace750fa0458df946cfb62cb91">&#9670;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char ghttp::HTTPBuffer::operator[] </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Index operator, use to access characters as alternative to <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">At</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>0&gt;= Index &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a69412ab74669a174f581f7c0349db233">GetMaximum</a> return T pointer or NULL </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adf720940a9f2357e50f539f184dd8679"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf720940a9f2357e50f539f184dd8679">&#9670;&nbsp;</a></span>PrepareZeroOffsetData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPBuffer::PrepareZeroOffsetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare zero offset data. </p>
<p>Internally shifts data so that anything contained within buffer[offset gets moved to buffer[0] and at the same time the offset is cleared. If offset is required again then use <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a28df8375d6824c339014a1f192aa1742">SetBuffer</a></p>
<dl class="section note"><dt>Note</dt><dd>Use SetBuffer to reset a new offset if buffer reused </dd></dl>

</div>
</div>
<a id="a343dafab39305d3dcf72c885a3b86693"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a343dafab39305d3dcf72c885a3b86693">&#9670;&nbsp;</a></span>Remove()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Remove </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Remove character(s) at specific start index to end index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Remove state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab698dae0934552ac7b565011d9bab08f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab698dae0934552ac7b565011d9bab08f">&#9670;&nbsp;</a></span>Replace() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Replace </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replace character(s) at specific start index to end index with given character string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Replace state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8b40289f6622010843c02522c77b09ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b40289f6622010843c02522c77b09ab">&#9670;&nbsp;</a></span>Replace() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPBuffer::Replace </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replace character(s) at specific start index to end index with given character string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Index &gt;=0 n &lt; <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer (NULL terminated, flash based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters from start of string to append. Default 0 =&gt; strlen(str) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Replace state </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>When successful </td></tr>
    <tr><td class="paramname">false</td><td>When failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a28df8375d6824c339014a1f192aa1742"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28df8375d6824c339014a1f192aa1742">&#9670;&nbsp;</a></span>SetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPBuffer::SetBuffer </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set buffer Because Request and Responses may share the same buffer and some Request information maybe required for building a Response, use offset to keep required Request information buffered and usable while Response being built. </p>
<p>At some point further in processing the offset can be removed with <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a> moving back the Response data, overwriting the Request, ready to use. </p><dl class="section note"><dt>Note</dt><dd>Prerequisite max_length_ should be setup, if not invoke /ref SetMaximum before</dd>
<dd>
Use <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#aef79015e1a8fb34dd96424849e510831">SetMaximum</a> prior to setting buffer characteristics</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Character string/buffer pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters of user data present in buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Data offset. Processing starts at buffer[offset]. Revert to buffer[0] by <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#adf720940a9f2357e50f539f184dd8679">PrepareZeroOffsetData</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a22">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_png_via_link_8ino-example.htm#a19">ghttp_ethercard_get_png_via_link.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a21">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_post_file_upload_8ino-example.htm#a19">ghttp_ethercard_post_file_upload.ino</a>, <a class="el" href="ghttp_static_pre_route_request_response_8ino-example.htm#a11">ghttp_static_pre_route_request_response.ino</a>, <a class="el" href="ghttp_static_request_response_simple_8ino-example.htm#a10">ghttp_static_request_response_simple.ino</a>, and <a class="el" href="ghttp_static_unhandled_route_request_response_8ino-example.htm#a12">ghttp_static_unhandled_route_request_response.ino</a>.</dd>
</dl>

</div>
</div>
<a id="ac8111d390d405e2cb61728c0dbed4114"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8111d390d405e2cb61728c0dbed4114">&#9670;&nbsp;</a></span>SetLength()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPBuffer::SetLength </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>ignore_maximum</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set length. </p>
<p>This is the filled length or length of valid data held within buffer. You may use this after using <a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm#a9f97bb5d3220c9dde7b002a95f79aa24">At</a> for actual data setting</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Characters of user data present in buffer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ignore_maximum</td><td>Flag allowing length to be set larger than actual buffer size (default false) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aef79015e1a8fb34dd96424849e510831"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef79015e1a8fb34dd96424849e510831">&#9670;&nbsp;</a></span>SetMaximum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPBuffer::SetMaximum </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>max_length</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set buffer maximum. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">max_length</td><td>Maximum length (characters) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a20">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_png_via_link_8ino-example.htm#a13">ghttp_ethercard_get_png_via_link.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a19">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_get_with_routes_8ino-example.htm#a21">ghttp_ethercard_get_with_routes.ino</a>, <a class="el" href="ghttp_ethercard_post_file_upload_8ino-example.htm#a12">ghttp_ethercard_post_file_upload.ino</a>, <a class="el" href="ghttp_ethercard_server_authorization_8ino-example.htm#a17">ghttp_ethercard_server_authorization.ino</a>, <a class="el" href="ghttp_ethercard_windoze_toast_notification_8ino-example.htm#a22">ghttp_ethercard_windoze_toast_notification.ino</a>, <a class="el" href="ghttp_static_pre_route_request_response_8ino-example.htm#a10">ghttp_static_pre_route_request_response.ino</a>, <a class="el" href="ghttp_static_request_response_simple_8ino-example.htm#a9">ghttp_static_request_response_simple.ino</a>, and <a class="el" href="ghttp_static_unhandled_route_request_response_8ino-example.htm#a11">ghttp_static_unhandled_route_request_response.ino</a>.</dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>ghttp</b></li><li class="navelem"><a class="el" href="classghttp_1_1_h_t_t_p_buffer.htm">HTTPBuffer</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:30 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
