<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp_static_request_parse_text.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp_static_request_parse_text_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_static_request_parse_text.ino</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Example use of GHTTP (Embedded library for parsing HTTP requests and creating responses) - In this example a text content GET request is parsed</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Expected serial output (Arduino/Genuino Uno/Mega2560):</span></div>
<div class="line"><span class="comment"> * setup()</span></div>
<div class="line"><span class="comment"> * POST /page?show=1 HTTP/1.1</span></div>
<div class="line"><span class="comment"> * Content-Length: 43</span></div>
<div class="line"><span class="comment"> * Accept: application/json, text/javascript, *-*; q=0.01</span></div>
<div class="line"><span class="comment"> * Content-Type: text/html; charset=iso-8859-1</span></div>
<div class="line"><span class="comment"> * Cookie: aaa=1; bbb=2</span></div>
<div class="line"><span class="comment"> * Accept-Encoding: gzip, deflate</span></div>
<div class="line"><span class="comment"> * Accept-Language: en-GB,en-US;q=0.9,en;q=0.8</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * This is request data that is in plain text.</span></div>
<div class="line"><span class="comment"> * Headers: 4</span></div>
<div class="line"><span class="comment"> *     Content-Length = 43</span></div>
<div class="line"><span class="comment"> *     Accept = application/json, text/javascript, *-*; q=0.01</span></div>
<div class="line"><span class="comment"> *     Accept-Encoding = gzip, deflate</span></div>
<div class="line"><span class="comment"> *     Accept-Language = en-GB,en-US;q=0.9,en;q=0.8</span></div>
<div class="line"><span class="comment"> * Cookies: 2</span></div>
<div class="line"><span class="comment"> *     aaa = 1</span></div>
<div class="line"><span class="comment"> *     bbb = 2</span></div>
<div class="line"><span class="comment"> * Content(43):</span></div>
<div class="line"><span class="comment"> * This is request data that is in plain text.</span></div>
<div class="line"><span class="comment"> * sizeof(request_instance) is 404</span></div>
<div class="line"><span class="comment"> * username: &#39;&#39;</span></div>
<div class="line"><span class="comment"> * password: &#39;&#39;</span></div>
<div class="line"><span class="comment"> * url: &#39;/page&#39;</span></div>
<div class="line"><span class="comment"> * method: &#39;POST&#39;</span></div>
<div class="line"><span class="comment"> * protocol: &#39;HTTP&#39;</span></div>
<div class="line"><span class="comment"> * protocol_version: &#39;1.1&#39;</span></div>
<div class="line"><span class="comment"> * url_raw: &#39;/page?show=1&#39;</span></div>
<div class="line"><span class="comment"> * content type list: 2</span></div>
<div class="line"><span class="comment"> *     text/html = </span></div>
<div class="line"><span class="comment"> *     charset = iso-8859-1</span></div>
<div class="line"><span class="comment"> * url variables: 1</span></div>
<div class="line"><span class="comment"> *     show = 1</span></div>
<div class="line"><span class="comment"> * post variables: 0</span></div>
<div class="line"><span class="comment"> * Done</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * DG, 2020</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/* Adjust some parameters to suit our request since there is only 1 and it is small */</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_PROCESS_POST_FILE_VARS 0 // Not using for this app</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_SERVER_USE_SESSIONS 0</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_HEADERS 12</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_VARS 6</span></div>
<div class="line"><span class="preprocessor">#define GHTTP_REQUEST_MAX_COOKIE 7</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="ghttp_8h.htm">ghttp.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Request/response buffer</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keywordtype">char</span> <a name="a0"></a><a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>[400];</div>
<div class="line"> </div>
<div class="line"><a name="_a1"></a><a class="code" href="classghttp_1_1_h_t_t_p_request.htm">ghttp::HTTPRequest&lt;GHTTP_REQUEST_MAX_HEADERS, GHTTP_REQUEST_MAX_VARS, GHTTP_REQUEST_MAX_CONTENT_TYPE, GHTTP_REQUEST_MAX_COOKIE&gt;</a> request;</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">    Serial.begin(9600);</div>
<div class="line">    <span class="keywordflow">while</span>(!Serial) { }</div>
<div class="line"> </div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;setup()&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// Request, assumed received over TCP/IP by some hardware interface</span></div>
<div class="line">    strcpy_P(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, PSTR(</div>
<div class="line">        <span class="stringliteral">&quot;POST /page?show=1 HTTP/1.1\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Content-Length: 43\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Accept: application/json, text/javascript, */*; q=0.01\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Content-Type: text/html; charset=iso-8859-1\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Cookie: aaa=1; bbb=2\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Accept-Encoding: gzip, deflate\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;Accept-Language: en-GB,en-US;q=0.9,en;q=0.8\r\n\r\n&quot;</span> \</div>
<div class="line">        <span class="stringliteral">&quot;This is request data that is in plain text.&quot;</span>));</div>
<div class="line">    Serial.println(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>);</div>
<div class="line"> </div>
<div class="line">    request.Clear(); <span class="comment">// Make sure clear before parse as not using segmentation.  You could have instead set segmentation flag on parse method to false</span></div>
<div class="line">    uint16_t ci = request.Parse(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, strlen(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>), <span class="keyword">sizeof</span>(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>));</div>
<div class="line">    <span class="keywordflow">if</span> (request.ERR_NONE != request.GetLastError()) {</div>
<div class="line">      Serial.print(<span class="stringliteral">&quot;Error: &quot;</span>);</div>
<div class="line">      Serial.println(request.GetLastError(), DEC);</div>
<div class="line">      <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    uint8_t i, c = request.header.count;</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;Headers: &quot;</span>);</div>
<div class="line">    Serial.println(c, DEC);</div>
<div class="line">    <span class="keywordflow">for</span>(i=0; i&lt;c; i++) {</div>
<div class="line">        <span class="keyword">auto</span> h = request.header[i];</div>
<div class="line"> </div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;\t&quot;</span>);</div>
<div class="line">        Serial.print(h-&gt;Get());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; = &quot;</span>);</div>
<div class="line">        Serial.println(h-&gt;value.Get());</div>
<div class="line">    }</div>
<div class="line">    c = request.cookie.count;</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;Cookies: &quot;</span>);</div>
<div class="line">    Serial.println(c, DEC);</div>
<div class="line">    <span class="keywordflow">for</span>(i=0; i&lt;c; i++) {</div>
<div class="line">        <span class="keyword">auto</span> h = request.cookie[i];</div>
<div class="line"> </div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;\t&quot;</span>);</div>
<div class="line">        Serial.print(h-&gt;Get());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; = &quot;</span>);</div>
<div class="line">        Serial.println(h-&gt;value.Get());</div>
<div class="line">    }</div>
<div class="line">    <span class="keywordflow">if</span> (NULL != &amp;request.content) {</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;Content(&quot;</span>);</div>
<div class="line">        Serial.print(strlen(&amp;request.content));</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;):\n&quot;</span>);</div>
<div class="line">        Serial.println(&amp;request.content);</div>
<div class="line">    }<span class="keywordflow">else</span> {</div>
<div class="line">        Serial.println(<span class="stringliteral">&quot;No content&quot;</span>);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;sizeof(request_instance) is &quot;</span>);</div>
<div class="line">    Serial.println(<span class="keyword">sizeof</span>(request));</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;username: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.username);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;password: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.password);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;url: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.url);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;method: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.method);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;protocol: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.protocol);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;protocol_version: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.protocol_version);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;url_raw: &#39;&quot;</span>);</div>
<div class="line">    Serial.print(&amp;request.url_raw);</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    c = request.content_type.count;</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;content type list: &quot;</span>);</div>
<div class="line">    Serial.println(c, DEC);</div>
<div class="line">    <span class="keywordflow">for</span>(i=0; i&lt;c; i++) {</div>
<div class="line">        <span class="keyword">auto</span> h = request.content_type[i];</div>
<div class="line"> </div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;\t&quot;</span>);</div>
<div class="line">        Serial.print(h-&gt;Get());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; = &quot;</span>);</div>
<div class="line">        Serial.println(h-&gt;value.Get());</div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Name NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;value.Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Value NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    c = request.query_variable.count;</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;url variables: &quot;</span>);</div>
<div class="line">    Serial.println(c, DEC);</div>
<div class="line">    <span class="keywordflow">for</span>(i=0; i&lt;c; i++) {</div>
<div class="line">        <span class="keyword">auto</span> h = request.query_variable[i];</div>
<div class="line"> </div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;\t&quot;</span>);</div>
<div class="line">        Serial.print(h-&gt;Get());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; = &quot;</span>);</div>
<div class="line">        Serial.println(h-&gt;value.Get());</div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Name NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;value.Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Value NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    c = request.post_variable.count;</div>
<div class="line">    Serial.print(<span class="stringliteral">&quot;post variables: &quot;</span>);</div>
<div class="line">    Serial.println(c, DEC);</div>
<div class="line">    <span class="keywordflow">for</span>(i=0; i&lt;c; i++) {</div>
<div class="line">        <span class="keyword">auto</span> h = request.post_variable[i];</div>
<div class="line"> </div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;\t&quot;</span>);</div>
<div class="line">        Serial.print(h-&gt;Get());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; = &quot;</span>);</div>
<div class="line">        Serial.println(h-&gt;value.Get());</div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Name NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">if</span> (h-&gt;value.Get() == NULL) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Value NULL&quot;</span>);</div>
<div class="line">            <span class="keywordflow">return</span>;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Done&quot;</span>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">    Serial.available();</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm">ghttp::HTTPRequest&lt; GHTTP_REQUEST_MAX_HEADERS, GHTTP_REQUEST_MAX_VARS, GHTTP_REQUEST_MAX_CONTENT_TYPE, GHTTP_REQUEST_MAX_COOKIE &gt;</a></div></div>
<div class="ttc" id="aghttp_8h_htm"><div class="ttname"><a href="ghttp_8h.htm">ghttp.h</a></div></div>
<div class="ttc" id="aghttp__static__pre__route__request__response_8ino_htm_aad6df635ec0b9820ef1ee069e0263614"><div class="ttname"><a href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a></div><div class="ttdeci">char buffer[448]</div><div class="ttdoc">Single packet buffer for EtherCard library.</div><div class="ttdef"><b>Definition:</b> ghttp_static_pre_route_request_response.ino:81</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:29 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
