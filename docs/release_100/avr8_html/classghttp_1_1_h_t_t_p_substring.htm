<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp::HTTPSubstring Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-b53ec0f(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classghttp_1_1_h_t_t_p_substring.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classghttp_1_1_h_t_t_p_substring-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ghttp::HTTPSubstring Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>HTTP substring employed by both request and response processors.  
 <a href="classghttp_1_1_h_t_t_p_substring.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="ghttp__httpsubstring_8h_source.htm">ghttp_httpsubstring.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7aa7fdafaf6458b888ff16eb4972edac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a7aa7fdafaf6458b888ff16eb4972edac">HTTPSubstring</a> ()</td></tr>
<tr class="memdesc:a7aa7fdafaf6458b888ff16eb4972edac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, make stable instance.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a7aa7fdafaf6458b888ff16eb4972edac">More...</a><br /></td></tr>
<tr class="separator:a7aa7fdafaf6458b888ff16eb4972edac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac39d00955e5a47e6102e7efa2262623d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#ac39d00955e5a47e6102e7efa2262623d">HTTPSubstring</a> (char *<a class="el" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, const uint16_t start, const uint16_t length=0)</td></tr>
<tr class="memdesc:ac39d00955e5a47e6102e7efa2262623d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance.  <a href="classghttp_1_1_h_t_t_p_substring.htm#ac39d00955e5a47e6102e7efa2262623d">More...</a><br /></td></tr>
<tr class="separator:ac39d00955e5a47e6102e7efa2262623d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a29f6da29e0bdc6f95db9863d52120e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a> (char *<a class="el" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, const uint16_t start, const uint16_t length=0)</td></tr>
<tr class="memdesc:a8a29f6da29e0bdc6f95db9863d52120e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set string to given buffer with start character index and length (characters)  <a href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">More...</a><br /></td></tr>
<tr class="separator:a8a29f6da29e0bdc6f95db9863d52120e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4e8742657a7aa5a57915a37e318da1d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#ac4e8742657a7aa5a57915a37e318da1d">Set</a> (char *str)</td></tr>
<tr class="memdesc:ac4e8742657a7aa5a57915a37e318da1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set string pointer directly.  <a href="classghttp_1_1_h_t_t_p_substring.htm#ac4e8742657a7aa5a57915a37e318da1d">More...</a><br /></td></tr>
<tr class="separator:ac4e8742657a7aa5a57915a37e318da1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb7bb7479294882fcec864ccd6024a2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a> () const</td></tr>
<tr class="memdesc:a5fb7bb7479294882fcec864ccd6024a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get string pointer.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">More...</a><br /></td></tr>
<tr class="separator:a5fb7bb7479294882fcec864ccd6024a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95fbf7605fca7868d41547c57750e17e"><td class="memItemLeft" align="right" valign="top"><a id="a95fbf7605fca7868d41547c57750e17e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a> ()</td></tr>
<tr class="memdesc:a95fbf7605fca7868d41547c57750e17e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make string pointer NULL. <br /></td></tr>
<tr class="separator:a95fbf7605fca7868d41547c57750e17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed56aa04818a6c85f7d3c1160afcd31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ThisPtr</a> ()</td></tr>
<tr class="memdesc:a5ed56aa04818a6c85f7d3c1160afcd31"><td class="mdescLeft">&#160;</td><td class="mdescRight">This pointer accessor.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">More...</a><br /></td></tr>
<tr class="separator:a5ed56aa04818a6c85f7d3c1160afcd31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8523915d4ad511e15310f877e9823572"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a8523915d4ad511e15310f877e9823572">operator&amp;</a> () const</td></tr>
<tr class="memdesc:a8523915d4ad511e15310f877e9823572"><td class="mdescLeft">&#160;</td><td class="mdescRight">Address operator, return string pointer.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a8523915d4ad511e15310f877e9823572">More...</a><br /></td></tr>
<tr class="separator:a8523915d4ad511e15310f877e9823572"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a317eb6ceafcc76b73a5a3d898e917b80"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a317eb6ceafcc76b73a5a3d898e917b80">operator==</a> (const char *rhs) const</td></tr>
<tr class="memdesc:a317eb6ceafcc76b73a5a3d898e917b80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equals comparison operator, check string against given subject.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a317eb6ceafcc76b73a5a3d898e917b80">More...</a><br /></td></tr>
<tr class="separator:a317eb6ceafcc76b73a5a3d898e917b80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fb717821af5464f32d55043763d7ab8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a6fb717821af5464f32d55043763d7ab8">operator!=</a> (const char *rhs) const</td></tr>
<tr class="memdesc:a6fb717821af5464f32d55043763d7ab8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not equals comparison operator, check string against given subject.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a6fb717821af5464f32d55043763d7ab8">More...</a><br /></td></tr>
<tr class="separator:a6fb717821af5464f32d55043763d7ab8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4954652dcd7910c996a0d0201500b54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#af4954652dcd7910c996a0d0201500b54">operator++</a> ()</td></tr>
<tr class="memdesc:af4954652dcd7910c996a0d0201500b54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Post increment operator to move internal string pointer forward.  <a href="classghttp_1_1_h_t_t_p_substring.htm#af4954652dcd7910c996a0d0201500b54">More...</a><br /></td></tr>
<tr class="separator:af4954652dcd7910c996a0d0201500b54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2f0449412f591a2d46e0128c745a7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a9c2f0449412f591a2d46e0128c745a7c">operator--</a> ()</td></tr>
<tr class="memdesc:a9c2f0449412f591a2d46e0128c745a7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Post decrement operator to move internal string pointer backward.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a9c2f0449412f591a2d46e0128c745a7c">More...</a><br /></td></tr>
<tr class="separator:a9c2f0449412f591a2d46e0128c745a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38bf01672678e709e2709aec37c0c126"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a38bf01672678e709e2709aec37c0c126">operator+=</a> (const uint16_t rhs)</td></tr>
<tr class="memdesc:a38bf01672678e709e2709aec37c0c126"><td class="mdescLeft">&#160;</td><td class="mdescRight">Self increment operator to move internal string pointer forward by n.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a38bf01672678e709e2709aec37c0c126">More...</a><br /></td></tr>
<tr class="separator:a38bf01672678e709e2709aec37c0c126"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943ced20438aec29adac005f64488799"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a943ced20438aec29adac005f64488799">operator-=</a> (const uint16_t rhs)</td></tr>
<tr class="memdesc:a943ced20438aec29adac005f64488799"><td class="mdescLeft">&#160;</td><td class="mdescRight">Self decrement operator to move internal string pointer backward by n.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a943ced20438aec29adac005f64488799">More...</a><br /></td></tr>
<tr class="separator:a943ced20438aec29adac005f64488799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a711ddfb854ef9521c3e35b5d66a95bed"><td class="memItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">StrNCmp</a> (const char *s2, const bool case_sensitive=false, uint16_t n=0) const</td></tr>
<tr class="memdesc:a711ddfb854ef9521c3e35b5d66a95bed"><td class="mdescLeft">&#160;</td><td class="mdescRight">String compare with controllable properties like length and case sensitivity.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">More...</a><br /></td></tr>
<tr class="separator:a711ddfb854ef9521c3e35b5d66a95bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55e658669cc3febd2f3b8d7b683ed4c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a55e658669cc3febd2f3b8d7b683ed4c4">operator==</a> (PGM_VOID_P rhs) const</td></tr>
<tr class="memdesc:a55e658669cc3febd2f3b8d7b683ed4c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equals comparison operator, check string against given subject.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a55e658669cc3febd2f3b8d7b683ed4c4">More...</a><br /></td></tr>
<tr class="separator:a55e658669cc3febd2f3b8d7b683ed4c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4682e525242849229ee4a7f2ae3d93a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a4682e525242849229ee4a7f2ae3d93a1">operator!=</a> (PGM_VOID_P rhs) const</td></tr>
<tr class="memdesc:a4682e525242849229ee4a7f2ae3d93a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not equals comparison operator, check string against given subject.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a4682e525242849229ee4a7f2ae3d93a1">More...</a><br /></td></tr>
<tr class="separator:a4682e525242849229ee4a7f2ae3d93a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f0d8704bdad18d4a80bf8c967b085c4"><td class="memItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a2f0d8704bdad18d4a80bf8c967b085c4">StrNCmp</a> (PGM_VOID_P s2, const bool case_sensitive=false, uint16_t n=0) const</td></tr>
<tr class="memdesc:a2f0d8704bdad18d4a80bf8c967b085c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">String compare with controllable properties like length and case sensitivity.  <a href="classghttp_1_1_h_t_t_p_substring.htm#a2f0d8704bdad18d4a80bf8c967b085c4">More...</a><br /></td></tr>
<tr class="separator:a2f0d8704bdad18d4a80bf8c967b085c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfe59209c9d76426f03527b8a4f5b64d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">TrimQuotes</a> ()</td></tr>
<tr class="memdesc:adfe59209c9d76426f03527b8a4f5b64d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trim quotes, either single or double.  <a href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">More...</a><br /></td></tr>
<tr class="separator:adfe59209c9d76426f03527b8a4f5b64d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa5d42828e6befd027f9adfde504d043"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#afa5d42828e6befd027f9adfde504d043">Trim</a> ()</td></tr>
<tr class="memdesc:afa5d42828e6befd027f9adfde504d043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trim white space from both ends.  <a href="classghttp_1_1_h_t_t_p_substring.htm#afa5d42828e6befd027f9adfde504d043">More...</a><br /></td></tr>
<tr class="separator:afa5d42828e6befd027f9adfde504d043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a807fe5cd855e3337cffdb726ca124e3a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">TrimLeft</a> ()</td></tr>
<tr class="memdesc:a807fe5cd855e3337cffdb726ca124e3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trim white space from left hand side (start).  <a href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">More...</a><br /></td></tr>
<tr class="separator:a807fe5cd855e3337cffdb726ca124e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bb2503f12e9b274689d415e45573735"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">TrimRight</a> ()</td></tr>
<tr class="memdesc:a5bb2503f12e9b274689d415e45573735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trim white space from right hand side (end).  <a href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">More...</a><br /></td></tr>
<tr class="separator:a5bb2503f12e9b274689d415e45573735"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a72616b9deae9d43d93a3d7991ce44274"><td class="memItemLeft" align="right" valign="top"><a id="a72616b9deae9d43d93a3d7991ce44274"></a>
char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a></td></tr>
<tr class="memdesc:a72616b9deae9d43d93a3d7991ce44274"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal string pointer. <br /></td></tr>
<tr class="separator:a72616b9deae9d43d93a3d7991ce44274"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>HTTP substring employed by both request and response processors. </p>
<p>Essentially a pointer which can be NULL or pointing to a NULL terminated string. Includes various operators and helpers to assist </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7aa7fdafaf6458b888ff16eb4972edac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aa7fdafaf6458b888ff16eb4972edac">&#9670;&nbsp;</a></span>HTTPSubstring() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ghttp::HTTPSubstring::HTTPSubstring </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor, make stable instance. </p>
<p>String pointer is NULL </p>

</div>
</div>
<a id="ac39d00955e5a47e6102e7efa2262623d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac39d00955e5a47e6102e7efa2262623d">&#9670;&nbsp;</a></span>HTTPSubstring() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ghttp::HTTPSubstring::HTTPSubstring </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance. </p>
<p>Set string to given buffer with start character index and length (characters)</p>
<dl class="section note"><dt>Note</dt><dd>A NULL terminator will be installed in buffer at start + length</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>String buffer pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Start index of string into string buffer (characters) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Length in characters of string, default 0 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5fb7bb7479294882fcec864ccd6024a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb7bb7479294882fcec864ccd6024a2">&#9670;&nbsp;</a></span>Get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* ghttp::HTTPSubstring::Get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get string pointer. </p>
<dl class="section return"><dt>Returns</dt><dd>String pointer which could be NULL </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="ghttp_ethercard_get_json_rest_die_8ino-example.htm#a18">ghttp_ethercard_get_json_rest_die.ino</a>, <a class="el" href="ghttp_ethercard_get_png_via_link_8ino-example.htm#a18">ghttp_ethercard_get_png_via_link.ino</a>, <a class="el" href="ghttp_ethercard_get_post_form_processing_8ino-example.htm#a17">ghttp_ethercard_get_post_form_processing.ino</a>, <a class="el" href="ghttp_ethercard_get_with_routes_8ino-example.htm#a26">ghttp_ethercard_get_with_routes.ino</a>, <a class="el" href="ghttp_ethercard_post_file_upload_8ino-example.htm#a18">ghttp_ethercard_post_file_upload.ino</a>, <a class="el" href="ghttp_ethercard_server_authorization_8ino-example.htm#a22">ghttp_ethercard_server_authorization.ino</a>, <a class="el" href="ghttp_ethercard_session_login_8ino-example.htm#a22">ghttp_ethercard_session_login.ino</a>, and <a class="el" href="ghttp_ethercard_windoze_toast_notification_8ino-example.htm#a25">ghttp_ethercard_windoze_toast_notification.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a6fb717821af5464f32d55043763d7ab8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fb717821af5464f32d55043763d7ab8">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::operator!= </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Not equals comparison operator, check string against given subject. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when session id's differ </td></tr>
    <tr><td class="paramname">false</td><td>when session id's match </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4682e525242849229ee4a7f2ae3d93a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4682e525242849229ee4a7f2ae3d93a1">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::operator!= </td>
          <td>(</td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Not equals comparison operator, check string against given subject. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string (flash based) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when session id's differ </td></tr>
    <tr><td class="paramname">false</td><td>when session id's match </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8523915d4ad511e15310f877e9823572"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8523915d4ad511e15310f877e9823572">&#9670;&nbsp;</a></span>operator&amp;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* ghttp::HTTPSubstring::operator&amp; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Address operator, return string pointer. </p>
<dl class="section return"><dt>Returns</dt><dd>String pointer which could be NULL </dd></dl>

</div>
</div>
<a id="af4954652dcd7910c996a0d0201500b54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4954652dcd7910c996a0d0201500b54">&#9670;&nbsp;</a></span>operator++()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; ghttp::HTTPSubstring::operator++ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Post increment operator to move internal string pointer forward. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference this </dd></dl>

</div>
</div>
<a id="a38bf01672678e709e2709aec37c0c126"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38bf01672678e709e2709aec37c0c126">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; ghttp::HTTPSubstring::operator+= </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Self increment operator to move internal string pointer forward by n. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Increment, +n </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference this </dd></dl>

</div>
</div>
<a id="a9c2f0449412f591a2d46e0128c745a7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c2f0449412f591a2d46e0128c745a7c">&#9670;&nbsp;</a></span>operator--()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; ghttp::HTTPSubstring::operator-- </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Post decrement operator to move internal string pointer backward. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference this </dd></dl>

</div>
</div>
<a id="a943ced20438aec29adac005f64488799"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a943ced20438aec29adac005f64488799">&#9670;&nbsp;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; ghttp::HTTPSubstring::operator-= </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Self decrement operator to move internal string pointer backward by n. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Decrement, +n </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference this </dd></dl>

</div>
</div>
<a id="a317eb6ceafcc76b73a5a3d898e917b80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a317eb6ceafcc76b73a5a3d898e917b80">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::operator== </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equals comparison operator, check string against given subject. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings match </td></tr>
    <tr><td class="paramname">false</td><td>strings differ </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a55e658669cc3febd2f3b8d7b683ed4c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55e658669cc3febd2f3b8d7b683ed4c4">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::operator== </td>
          <td>(</td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equals comparison operator, check string against given subject. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string (flash based) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings match </td></tr>
    <tr><td class="paramname">false</td><td>strings differ </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8a29f6da29e0bdc6f95db9863d52120e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a29f6da29e0bdc6f95db9863d52120e">&#9670;&nbsp;</a></span>Set() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPSubstring::Set </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set string to given buffer with start character index and length (characters) </p>
<dl class="section note"><dt>Note</dt><dd>A NULL terminator will be installed in buffer at start + length</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>String buffer pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Start index of string into string buffer (characters) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Length in characters of string, default 0 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac4e8742657a7aa5a57915a37e318da1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4e8742657a7aa5a57915a37e318da1d">&#9670;&nbsp;</a></span>Set() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ghttp::HTTPSubstring::Set </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set string pointer directly. </p>
<p>Can be used to NULL the string (make it non-existent)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String pointer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a711ddfb854ef9521c3e35b5d66a95bed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a711ddfb854ef9521c3e35b5d66a95bed">&#9670;&nbsp;</a></span>StrNCmp() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16_t ghttp::HTTPSubstring::StrNCmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>n</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>String compare with controllable properties like length and case sensitivity. </p>
<p>Uses <a class="el" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>ASCII subject string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Flag default false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Comparison length N characters, default 0 =&gt; strlen(s2) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String difference at index </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>s1[0..n-1] == s2[0..n-1] </td></tr>
    <tr><td class="paramname">+1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
    <tr><td class="paramname">-1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2f0d8704bdad18d4a80bf8c967b085c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f0d8704bdad18d4a80bf8c967b085c4">&#9670;&nbsp;</a></span>StrNCmp() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int16_t ghttp::HTTPSubstring::StrNCmp </td>
          <td>(</td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>n</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>String compare with controllable properties like length and case sensitivity. </p>
<p>Uses <a class="el" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>ASCII subject string (flash based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Flag default false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Comparison length N characters, default 0 =&gt; strlen(s2) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String difference at index </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>s1[0..n-1] == s2[0..n-1] </td></tr>
    <tr><td class="paramname">+1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
    <tr><td class="paramname">-1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5ed56aa04818a6c85f7d3c1160afcd31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ed56aa04818a6c85f7d3c1160afcd31">&#9670;&nbsp;</a></span>ThisPtr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>* ghttp::HTTPSubstring::ThisPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This pointer accessor. </p>
<p>Due to operator overload use this to get just instance this pointer</p>
<dl class="section return"><dt>Returns</dt><dd>HTTP string (this) </dd></dl>

</div>
</div>
<a id="afa5d42828e6befd027f9adfde504d043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa5d42828e6befd027f9adfde504d043">&#9670;&nbsp;</a></span>Trim()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::Trim </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Trim white space from both ends. </p>
<p>White space is soft space or tab characters. May replace NULL terminator and move internal string pointer forward</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Trimmed </td></tr>
    <tr><td class="paramname">false</td><td>Didn't require </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a807fe5cd855e3337cffdb726ca124e3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a807fe5cd855e3337cffdb726ca124e3a">&#9670;&nbsp;</a></span>TrimLeft()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::TrimLeft </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Trim white space from left hand side (start). </p>
<p>White space is soft space or tab characters. May move internal string pointer forward</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Trimmed </td></tr>
    <tr><td class="paramname">false</td><td>Didn't require </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adfe59209c9d76426f03527b8a4f5b64d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfe59209c9d76426f03527b8a4f5b64d">&#9670;&nbsp;</a></span>TrimQuotes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::TrimQuotes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Trim quotes, either single or double. </p>
<p>May replace NULL terminator and move internal string pointer forward</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Trimmed. Quotes removed </td></tr>
    <tr><td class="paramname">false</td><td>Didn't require </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5bb2503f12e9b274689d415e45573735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bb2503f12e9b274689d415e45573735">&#9670;&nbsp;</a></span>TrimRight()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ghttp::HTTPSubstring::TrimRight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Trim white space from right hand side (end). </p>
<p>White space is soft space or tab characters. May replace NULL terminator</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Trimmed </td></tr>
    <tr><td class="paramname">false</td><td>Didn't require </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>ghttp</b></li><li class="navelem"><a class="el" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 14:59:57 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
