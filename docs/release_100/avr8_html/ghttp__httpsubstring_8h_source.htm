<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: substring/ghttp_httpsubstring.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp__httpsubstring_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_httpsubstring.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ghttp__httpsubstring_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Embedded HTTP request/response handling framework - HTTP substring</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: GHTTP library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, STM32, Atmel AT91SAM, portable</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef GHTTP_HTTPSUBSTRING_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define GHTTP_HTTPSUBSTRING_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span>ghttp {</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * HTTP substring employed by both request and response processors.  Essentially a pointer which can be NULL or pointing to a NULL terminated string.  Includes various operators </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * and helpers to assist</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm">   17</a></span>&#160;<span class="keyword">class </span><a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a> {</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">     * Default constructor, make stable instance.  String pointer is NULL</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a7aa7fdafaf6458b888ff16eb4972edac">   22</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a7aa7fdafaf6458b888ff16eb4972edac">HTTPSubstring</a>() : <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>(NULL) {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">     * Constructor, make stable instance.  Set string to given buffer with start character index and length (characters)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">     * \note A NULL terminator will be installed in buffer at start + length</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">     * \param[in] buffer String buffer pointer</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">     * \param[in] start Start index of string into string buffer (characters)</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">     * \param[in] length Length in characters of string, default 0</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#ac39d00955e5a47e6102e7efa2262623d">   35</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#ac39d00955e5a47e6102e7efa2262623d">HTTPSubstring</a>(<span class="keywordtype">char</span>* <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, <span class="keyword">const</span> uint16_t start, <span class="keyword">const</span> uint16_t length=0) {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, start, length);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">     * Set string to given buffer with start character index and length (characters)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">     * \note A NULL terminator will be installed in buffer at start + length</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     * \param[in] buffer String buffer pointer</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">     * \param[in] start Start index of string into string buffer (characters)</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">     * \param[in] length Length in characters of string, default 0</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">   49</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<span class="keywordtype">char</span>* <a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>, <span class="keyword">const</span> uint16_t start, <span class="keyword">const</span> uint16_t length=0) {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a> = &amp;<a class="code" href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a>[start];</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[length] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">     * Set string pointer directly.  Can be used to NULL the string (make it non-existent)</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * \param[in] str String pointer</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#ac4e8742657a7aa5a57915a37e318da1d">   60</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#ac4e8742657a7aa5a57915a37e318da1d">Set</a>(<span class="keywordtype">char</span>* str) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a> = str;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * Get string pointer</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * \return String pointer which could be NULL</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">   70</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * Make string pointer NULL</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">   78</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>() {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a> = NULL;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     * This pointer accessor.  Due to operator overload use this to get just instance this pointer</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * \return HTTP string (this)</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">   88</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>* <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ThisPtr</a>() {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">this</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * Address operator, return string pointer</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     * \return String pointer which could be NULL</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a8523915d4ad511e15310f877e9823572">   98</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8523915d4ad511e15310f877e9823572">operator&amp;</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>();</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     * Equals comparison operator, check string against given subject</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">     * \retval true strings match</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     * \retval false strings differ</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a317eb6ceafcc76b73a5a3d898e917b80">  110</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a317eb6ceafcc76b73a5a3d898e917b80">operator==</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="comment">// strlen(rhs)+1 to include &#39;\0&#39; NULL so partial match via == isn&#39;t possible</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">StrNCmp</a>(rhs, <span class="keyword">false</span>, strlen(rhs)+1) == 0;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * Not equals comparison operator, check string against given subject</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * \retval true when session id&#39;s differ</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * \retval false when session id&#39;s match</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a6fb717821af5464f32d55043763d7ab8">  123</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a6fb717821af5464f32d55043763d7ab8">operator!=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * Post increment operator to move internal string pointer forward</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * \return Reference this</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#af4954652dcd7910c996a0d0201500b54">  133</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#af4954652dcd7910c996a0d0201500b54">operator++</a>() {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>++;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * Post decrement operator to move internal string pointer backward</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * \return Reference this</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a9c2f0449412f591a2d46e0128c745a7c">  144</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a9c2f0449412f591a2d46e0128c745a7c">operator--</a>() {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>--;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * Self increment operator to move internal string pointer forward by n</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * \param[in] rhs Increment, +n</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * \return Reference this</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a38bf01672678e709e2709aec37c0c126">  158</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a38bf01672678e709e2709aec37c0c126">operator+=</a>(<span class="keyword">const</span> uint16_t rhs) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a> += rhs;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     * Self decrement operator to move internal string pointer backward by n</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * \param[in] rhs Decrement, +n</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     * \return Reference this</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a943ced20438aec29adac005f64488799">  170</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>&amp; <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a943ced20438aec29adac005f64488799">operator-=</a>(<span class="keyword">const</span> uint16_t rhs) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a> -= rhs;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">     * String compare with controllable properties like length and case sensitivity.  Uses \ref StringHelper::StrNCmp</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     * \param[in] s2 ASCII subject string</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * \param[in] case_sensitive Flag default false</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * \param[in] n Comparison length N characters, default 0 =&gt; strlen(s2)</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * \return String difference at index</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * \retval 0 s1[0..n-1] == s2[0..n-1]</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * \retval +1 =&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n]</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     * \retval -1 =&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n]</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">  187</a></span>&#160;    int16_t <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">StrNCmp</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s2, <span class="keyword">const</span> <span class="keywordtype">bool</span> case_sensitive=<span class="keyword">false</span>, uint16_t n=0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>, s2, n, case_sensitive);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     * Equals comparison operator, check string against given subject</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string (flash based)</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     * \retval true strings match</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * \retval false strings differ</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a55e658669cc3febd2f3b8d7b683ed4c4">  200</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a55e658669cc3febd2f3b8d7b683ed4c4">operator==</a>(PGM_VOID_P rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// strlen(rhs)+1 to include &#39;\0&#39; NULL so partial match via == isn&#39;t possible</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">StrNCmp</a>(rhs, <span class="keyword">false</span>, <a class="code" href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a>(rhs)+1) == 0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">     * Not equals comparison operator, check string against given subject</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string (flash based)</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     * \retval true when session id&#39;s differ</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     * \retval false when session id&#39;s match</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a4682e525242849229ee4a7f2ae3d93a1">  213</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a4682e525242849229ee4a7f2ae3d93a1">operator!=</a>(PGM_VOID_P rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * String compare with controllable properties like length and case sensitivity.  Uses \ref StringHelper::StrNCmp</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * \param[in] s2 ASCII subject string (flash based)</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * \param[in] case_sensitive Flag default false</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * \param[in] n Comparison length N characters, default 0 =&gt; strlen(s2)</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * \return String difference at index</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * \retval 0 s1[0..n-1] == s2[0..n-1]</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * \retval +1 =&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n]</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * \retval -1 =&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n]</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a2f0d8704bdad18d4a80bf8c967b085c4">  229</a></span>&#160;    int16_t <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a2f0d8704bdad18d4a80bf8c967b085c4">StrNCmp</a>(PGM_VOID_P s2, <span class="keyword">const</span> <span class="keywordtype">bool</span> case_sensitive=<span class="keyword">false</span>, uint16_t n=0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>, s2, n, case_sensitive);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#endif // defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * Trim quotes, either single or double.  May replace NULL terminator and move internal string pointer forward</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * \retval true Trimmed. Quotes removed</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     * \retval false Didn&#39;t require</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">  241</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">TrimQuotes</a>() {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordtype">bool</span> d = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            uint16_t l = strlen(<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">if</span> (l&gt;1) {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keywordflow">if</span> (<span class="charliteral">&#39;\&#39;&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[l-1] || <span class="charliteral">&#39;\&quot;&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[l-1]) {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[l-1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    d = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">if</span> (l) {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordflow">if</span> (<span class="charliteral">&#39;\&#39;&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[0] || <span class="charliteral">&#39;\&quot;&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[0]) {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>++;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    d = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> d;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     * Trim white space from both ends.  White space is soft space or tab characters.  May replace NULL terminator and move internal string pointer forward</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">     * \retval true Trimmed</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">     * \retval false Didn&#39;t require</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#afa5d42828e6befd027f9adfde504d043">  271</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#afa5d42828e6befd027f9adfde504d043">Trim</a>() {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">TrimLeft</a>() | <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">TrimRight</a>();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">     * Trim white space from left hand side (start).  White space is soft space or tab characters.  May move internal string pointer forward</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">     * \retval true Trimmed</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">     * \retval false Didn&#39;t require</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">  282</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">TrimLeft</a>() {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordtype">bool</span> d = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>) {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            uint16_t l = strlen(<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>), ll;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">for</span>(ll = 0; ll&lt;l; ll++) {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">if</span> (<span class="charliteral">&#39; &#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[ll] || <span class="charliteral">&#39;\t&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[ll]) {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>++;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    d = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">return</span> d;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     * Trim white space from right hand side (end).  White space is soft space or tab characters.  May replace NULL terminator </span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     * \retval true Trimmed</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     * \retval false Didn&#39;t require</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">  308</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">TrimRight</a>() {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordtype">bool</span> d = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>) {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            uint16_t l = strlen(<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>), ll;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">if</span> (l) {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                <span class="keywordflow">for</span>(ll = l-1; ll&gt;0; ll--) {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    <span class="keywordflow">if</span> (<span class="charliteral">&#39; &#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[ll-1] || <span class="charliteral">&#39;\t&#39;</span>==<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[ll-1]) {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>[ll-1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        d = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">return</span> d;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    } <span class="comment">// TrimRight()</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">  331</a></span>&#160;    <span class="keywordtype">char</span>*        <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">str_ptr_</a>;                          <span class="comment">///&lt; Internal string pointer</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"></span>}; <span class="comment">// class HTTPSubstring</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}; <span class="comment">// namespace ghttp</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">#endif // GHTTP_HTTPSUBSTRING_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_ac4e8742657a7aa5a57915a37e318da1d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#ac4e8742657a7aa5a57915a37e318da1d">ghttp::HTTPSubstring::Set</a></div><div class="ttdeci">void Set(char *str)</div><div class="ttdoc">Set string pointer directly.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:60</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_adfe59209c9d76426f03527b8a4f5b64d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">ghttp::HTTPSubstring::TrimQuotes</a></div><div class="ttdeci">bool TrimQuotes()</div><div class="ttdoc">Trim quotes, either single or double.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:241</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5ed56aa04818a6c85f7d3c1160afcd31"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ghttp::HTTPSubstring::ThisPtr</a></div><div class="ttdeci">HTTPSubstring * ThisPtr()</div><div class="ttdoc">This pointer accessor.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:88</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a2f0d8704bdad18d4a80bf8c967b085c4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a2f0d8704bdad18d4a80bf8c967b085c4">ghttp::HTTPSubstring::StrNCmp</a></div><div class="ttdeci">int16_t StrNCmp(PGM_VOID_P s2, const bool case_sensitive=false, uint16_t n=0) const</div><div class="ttdoc">String compare with controllable properties like length and case sensitivity.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:229</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a8a29f6da29e0bdc6f95db9863d52120e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">ghttp::HTTPSubstring::Set</a></div><div class="ttdeci">void Set(char *buffer, const uint16_t start, const uint16_t length=0)</div><div class="ttdoc">Set string to given buffer with start character index and length (characters)</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:49</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a943ced20438aec29adac005f64488799"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a943ced20438aec29adac005f64488799">ghttp::HTTPSubstring::operator-=</a></div><div class="ttdeci">HTTPSubstring &amp; operator-=(const uint16_t rhs)</div><div class="ttdoc">Self decrement operator to move internal string pointer backward by n.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:170</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a317eb6ceafcc76b73a5a3d898e917b80"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a317eb6ceafcc76b73a5a3d898e917b80">ghttp::HTTPSubstring::operator==</a></div><div class="ttdeci">bool operator==(const char *rhs) const</div><div class="ttdoc">Equals comparison operator, check string against given subject.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:110</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a7aa7fdafaf6458b888ff16eb4972edac"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a7aa7fdafaf6458b888ff16eb4972edac">ghttp::HTTPSubstring::HTTPSubstring</a></div><div class="ttdeci">HTTPSubstring()</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:22</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a9c2f0449412f591a2d46e0128c745a7c"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a9c2f0449412f591a2d46e0128c745a7c">ghttp::HTTPSubstring::operator--</a></div><div class="ttdeci">HTTPSubstring &amp; operator--()</div><div class="ttdoc">Post decrement operator to move internal string pointer backward.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:144</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a6fb717821af5464f32d55043763d7ab8"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a6fb717821af5464f32d55043763d7ab8">ghttp::HTTPSubstring::operator!=</a></div><div class="ttdeci">bool operator!=(const char *rhs) const</div><div class="ttdoc">Not equals comparison operator, check string against given subject.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:123</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_ac39d00955e5a47e6102e7efa2262623d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#ac39d00955e5a47e6102e7efa2262623d">ghttp::HTTPSubstring::HTTPSubstring</a></div><div class="ttdeci">HTTPSubstring(char *buffer, const uint16_t start, const uint16_t length=0)</div><div class="ttdoc">Constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:35</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5bb2503f12e9b274689d415e45573735"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5bb2503f12e9b274689d415e45573735">ghttp::HTTPSubstring::TrimRight</a></div><div class="ttdeci">bool TrimRight()</div><div class="ttdoc">Trim white space from right hand side (end).</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:308</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a4682e525242849229ee4a7f2ae3d93a1"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a4682e525242849229ee4a7f2ae3d93a1">ghttp::HTTPSubstring::operator!=</a></div><div class="ttdeci">bool operator!=(PGM_VOID_P rhs) const</div><div class="ttdoc">Not equals comparison operator, check string against given subject.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:213</div></div>
<div class="ttc" id="aclassghttp_1_1_string_helper_htm_a2e789168250978f50f329eb6aa647240"><div class="ttname"><a href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">ghttp::StringHelper::StrNCmp</a></div><div class="ttdeci">static int16_t StrNCmp(const char *s1, const char *s2, const uint16_t s2_max=0, const bool case_sensitive=true)</div><div class="ttdoc">Alternative from strncmpi and strncmp.</div><div class="ttdef"><b>Definition:</b> ghttp_stringhelper.h:49</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm">ghttp::HTTPSubstring</a></div><div class="ttdoc">HTTP substring employed by both request and response processors.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:17</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a38bf01672678e709e2709aec37c0c126"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a38bf01672678e709e2709aec37c0c126">ghttp::HTTPSubstring::operator+=</a></div><div class="ttdeci">HTTPSubstring &amp; operator+=(const uint16_t rhs)</div><div class="ttdoc">Self increment operator to move internal string pointer forward by n.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:158</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a95fbf7605fca7868d41547c57750e17e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">ghttp::HTTPSubstring::Null</a></div><div class="ttdeci">void Null()</div><div class="ttdoc">Make string pointer NULL.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:78</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a55e658669cc3febd2f3b8d7b683ed4c4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a55e658669cc3febd2f3b8d7b683ed4c4">ghttp::HTTPSubstring::operator==</a></div><div class="ttdeci">bool operator==(PGM_VOID_P rhs) const</div><div class="ttdoc">Equals comparison operator, check string against given subject.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:200</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a8523915d4ad511e15310f877e9823572"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a8523915d4ad511e15310f877e9823572">ghttp::HTTPSubstring::operator&amp;</a></div><div class="ttdeci">const char * operator&amp;() const</div><div class="ttdoc">Address operator, return string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:98</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a711ddfb854ef9521c3e35b5d66a95bed"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">ghttp::HTTPSubstring::StrNCmp</a></div><div class="ttdeci">int16_t StrNCmp(const char *s2, const bool case_sensitive=false, uint16_t n=0) const</div><div class="ttdoc">String compare with controllable properties like length and case sensitivity.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:187</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5fb7bb7479294882fcec864ccd6024a2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">ghttp::HTTPSubstring::Get</a></div><div class="ttdeci">const char * Get() const</div><div class="ttdoc">Get string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:70</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a72616b9deae9d43d93a3d7991ce44274"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a72616b9deae9d43d93a3d7991ce44274">ghttp::HTTPSubstring::str_ptr_</a></div><div class="ttdeci">char * str_ptr_</div><div class="ttdoc">Internal string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:331</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a807fe5cd855e3337cffdb726ca124e3a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a807fe5cd855e3337cffdb726ca124e3a">ghttp::HTTPSubstring::TrimLeft</a></div><div class="ttdeci">bool TrimLeft()</div><div class="ttdoc">Trim white space from left hand side (start).</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:282</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_af4954652dcd7910c996a0d0201500b54"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#af4954652dcd7910c996a0d0201500b54">ghttp::HTTPSubstring::operator++</a></div><div class="ttdeci">HTTPSubstring &amp; operator++()</div><div class="ttdoc">Post increment operator to move internal string pointer forward.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:133</div></div>
<div class="ttc" id="aghttp__static__pre__route__request__response_8ino_htm_aad6df635ec0b9820ef1ee069e0263614"><div class="ttname"><a href="ghttp__static__pre__route__request__response_8ino.htm#aad6df635ec0b9820ef1ee069e0263614">buffer</a></div><div class="ttdeci">char buffer[448]</div><div class="ttdoc">Single packet buffer for EtherCard library.</div><div class="ttdef"><b>Definition:</b> ghttp_static_pre_route_request_response.ino:81</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_afa5d42828e6befd027f9adfde504d043"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#afa5d42828e6befd027f9adfde504d043">ghttp::HTTPSubstring::Trim</a></div><div class="ttdeci">bool Trim()</div><div class="ttdoc">Trim white space from both ends.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:271</div></div>
<div class="ttc" id="aghttp_8h_htm_ae6b66a4eea341e5050580e68bfbc3745"><div class="ttname"><a href="ghttp_8h.htm#ae6b66a4eea341e5050580e68bfbc3745">PGM_STRLEN</a></div><div class="ttdeci">#define PGM_STRLEN(x)</div><div class="ttdoc">Get string length from AVR flash memory string.</div><div class="ttdef"><b>Definition:</b> ghttp.h:76</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_07f18dcde5fce2ebe24110b66f183caa.htm">substring</a></li><li class="navelem"><a class="el" href="ghttp__httpsubstring_8h.htm">ghttp_httpsubstring.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:29 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
