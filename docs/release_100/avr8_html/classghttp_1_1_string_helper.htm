<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: ghttp::StringHelper Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-b53ec0f(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classghttp_1_1_string_helper.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classghttp_1_1_string_helper-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ghttp::StringHelper Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Support class for string manipulation containing static helpers for reuse.  
 <a href="classghttp_1_1_string_helper.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="ghttp__stringhelper_8h_source.htm">ghttp_stringhelper.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2e789168250978f50f329eb6aa647240"><td class="memItemLeft" align="right" valign="top">static int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StrNCmp</a> (const char *s1, const char *s2, const uint16_t s2_max=0, const bool case_sensitive=true)</td></tr>
<tr class="memdesc:a2e789168250978f50f329eb6aa647240"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alternative from strncmpi and strncmp.  <a href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">More...</a><br /></td></tr>
<tr class="separator:a2e789168250978f50f329eb6aa647240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad23c55f33b492069cac87d25947194fc"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#ad23c55f33b492069cac87d25947194fc">FindSubString</a> (const char *s1, const char *s2, const uint16_t s1_start_i=0, const bool case_sensitive=true, const uint16_t s1_max=0, const uint16_t s2_max=0)</td></tr>
<tr class="memdesc:ad23c55f33b492069cac87d25947194fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search a string for a substring.  <a href="classghttp_1_1_string_helper.htm#ad23c55f33b492069cac87d25947194fc">More...</a><br /></td></tr>
<tr class="separator:ad23c55f33b492069cac87d25947194fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4c0b67dae22d03c99186df179f143e"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">FindTerminator</a> (uint16_t i, const char *src, const char *include_special, bool invert_special_only=false, uint16_t src_max=0)</td></tr>
<tr class="memdesc:a8d4c0b67dae22d03c99186df179f143e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find terminator character using characters from given terminator string.  <a href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">More...</a><br /></td></tr>
<tr class="separator:a8d4c0b67dae22d03c99186df179f143e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ac41c310257152fa229a1d7f2e637dd"><td class="memItemLeft" align="right" valign="top">static int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a3ac41c310257152fa229a1d7f2e637dd">StrNCmp</a> (const char *s1, PGM_VOID_P s2, const uint16_t s2_max=0, const bool case_sensitive=true)</td></tr>
<tr class="memdesc:a3ac41c310257152fa229a1d7f2e637dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alternative from strncmpi and strncmp.  <a href="classghttp_1_1_string_helper.htm#a3ac41c310257152fa229a1d7f2e637dd">More...</a><br /></td></tr>
<tr class="separator:a3ac41c310257152fa229a1d7f2e637dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a614e769672423e3003ea6eafaed48081"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a614e769672423e3003ea6eafaed48081">FindSubString</a> (const char *s1, PGM_VOID_P s2, const uint16_t s1_start_i=0, const bool case_sensitive=true, const uint16_t s1_max=0, const uint16_t s2_max=0)</td></tr>
<tr class="memdesc:a614e769672423e3003ea6eafaed48081"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search a string for a substring.  <a href="classghttp_1_1_string_helper.htm#a614e769672423e3003ea6eafaed48081">More...</a><br /></td></tr>
<tr class="separator:a614e769672423e3003ea6eafaed48081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22c5027d49debe7b95d24d1fff80b596"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a22c5027d49debe7b95d24d1fff80b596">FindTerminator</a> (uint16_t i, const char *src, PGM_VOID_P include_special, bool invert_special_only=false, uint16_t src_max=0)</td></tr>
<tr class="memdesc:a22c5027d49debe7b95d24d1fff80b596"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find terminator character using characters from given terminator string.  <a href="classghttp_1_1_string_helper.htm#a22c5027d49debe7b95d24d1fff80b596">More...</a><br /></td></tr>
<tr class="separator:a22c5027d49debe7b95d24d1fff80b596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a657b385e536ab7ed095c47384de728d5"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a657b385e536ab7ed095c47384de728d5">FindTerminator</a> (uint16_t i, PGM_VOID_P src, PGM_VOID_P include_special, bool invert_special_only=false, uint16_t src_max=0)</td></tr>
<tr class="memdesc:a657b385e536ab7ed095c47384de728d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find terminator character using characters from given terminator string.  <a href="classghttp_1_1_string_helper.htm#a657b385e536ab7ed095c47384de728d5">More...</a><br /></td></tr>
<tr class="separator:a657b385e536ab7ed095c47384de728d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fefdee6d309d01d5931f23aca034ea0"><td class="memItemLeft" align="right" valign="top">static char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a0fefdee6d309d01d5931f23aca034ea0">Reverse</a> (char *str, uint8_t length=0)</td></tr>
<tr class="memdesc:a0fefdee6d309d01d5931f23aca034ea0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reverse string.  <a href="classghttp_1_1_string_helper.htm#a0fefdee6d309d01d5931f23aca034ea0">More...</a><br /></td></tr>
<tr class="separator:a0fefdee6d309d01d5931f23aca034ea0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b092eb1cbbfeacfdfcb5697e42d7beb"><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a2b092eb1cbbfeacfdfcb5697e42d7beb">HexDigitFromIndex</a> (const uint8_t i)</td></tr>
<tr class="memdesc:a2b092eb1cbbfeacfdfcb5697e42d7beb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hex digit from index.  <a href="classghttp_1_1_string_helper.htm#a2b092eb1cbbfeacfdfcb5697e42d7beb">More...</a><br /></td></tr>
<tr class="separator:a2b092eb1cbbfeacfdfcb5697e42d7beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf876103d7258555c5033e45a012d556"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:abf876103d7258555c5033e45a012d556"><td class="memTemplItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#abf876103d7258555c5033e45a012d556">FromInt</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> number, char *str, const uint8_t base=10)</td></tr>
<tr class="memdesc:abf876103d7258555c5033e45a012d556"><td class="mdescLeft">&#160;</td><td class="mdescRight">String from signed integer type T.  <a href="classghttp_1_1_string_helper.htm#abf876103d7258555c5033e45a012d556">More...</a><br /></td></tr>
<tr class="separator:abf876103d7258555c5033e45a012d556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a180a3255f23625debdbe4b643aee613a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a180a3255f23625debdbe4b643aee613a"><td class="memTemplItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a180a3255f23625debdbe4b643aee613a">FromUInt</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> number, char *str, const uint8_t base=10)</td></tr>
<tr class="memdesc:a180a3255f23625debdbe4b643aee613a"><td class="mdescLeft">&#160;</td><td class="mdescRight">String from unsigned integer type T.  <a href="classghttp_1_1_string_helper.htm#a180a3255f23625debdbe4b643aee613a">More...</a><br /></td></tr>
<tr class="separator:a180a3255f23625debdbe4b643aee613a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ae415e1f53dd39a43d3ecd9e78d0501"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9ae415e1f53dd39a43d3ecd9e78d0501"><td class="memTemplItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classghttp_1_1_string_helper.htm#a9ae415e1f53dd39a43d3ecd9e78d0501">FromDecimal</a> (<a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a> number, char *str, uint8_t digits=2)</td></tr>
<tr class="memdesc:a9ae415e1f53dd39a43d3ecd9e78d0501"><td class="mdescLeft">&#160;</td><td class="mdescRight">String from real type T.  <a href="classghttp_1_1_string_helper.htm#a9ae415e1f53dd39a43d3ecd9e78d0501">More...</a><br /></td></tr>
<tr class="separator:a9ae415e1f53dd39a43d3ecd9e78d0501"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Support class for string manipulation containing static helpers for reuse. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ad23c55f33b492069cac87d25947194fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad23c55f33b492069cac87d25947194fc">&#9670;&nbsp;</a></span>FindSubString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint16_t ghttp::StringHelper::FindSubString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s1_start_i</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s1_max</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s2_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Search a string for a substring. </p>
<dl class="section note"><dt>Note</dt><dd>You can find the next substring within s1 by moving forward size of s2 string and passing this pointer in as s1</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s1</td><td>Pointer to string1; the source or search string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>Pointer to string2; the subject or substring to search for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s1_start_i</td><td>Start index for find into string s1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Flag to control case sensitive searches (default true) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s1_max</td><td>s1 string maximum length (characters). Default 0 which means strlen(s1) is used </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2_max</td><td>s2 string maximum length (characters). Default 0 which means strlen(s2) is used </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Starting index within s1 string where s2 substring found. If larger-equal than strlen(s1) =&gt; not found </dd></dl>

</div>
</div>
<a id="a614e769672423e3003ea6eafaed48081"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a614e769672423e3003ea6eafaed48081">&#9670;&nbsp;</a></span>FindSubString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint16_t ghttp::StringHelper::FindSubString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s1_start_i</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s1_max</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s2_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Search a string for a substring. </p>
<dl class="section note"><dt>Note</dt><dd>You can find the next substring within s1 by moving forward size of s2 string and passing this pointer in as s1</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s1</td><td>Pointer to string1; the source or search string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>Pointer to string2 (flash based); the subject or substring to search for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s1_start_i</td><td>Start index for find into string s1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Flag to control case sensitive searches (default true) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s1_max</td><td>s1 string maximum length (characters). Default 0 which means strlen(s1) is used </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2_max</td><td>s2 string maximum length (characters). Default 0 which means strlen(s2) is used </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Starting index within s1 string where s2 substring found. If larger-equal than strlen(s1) =&gt; not found </dd></dl>

</div>
</div>
<a id="a8d4c0b67dae22d03c99186df179f143e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d4c0b67dae22d03c99186df179f143e">&#9670;&nbsp;</a></span>FindTerminator() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint16_t ghttp::StringHelper::FindTerminator </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>include_special</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>invert_special_only</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>src_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find terminator character using characters from given terminator string. </p>
<p>Can search only for characters that are included in terminator string</p>
<dl class="section note"><dt>Note</dt><dd>Set parameter invert_speical_only to search for characters that only exist in this string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Starting index into src string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Source string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">include_special</td><td>Terminator string. Contains characters you either want to find or must include </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">invert_special_only</td><td>Flag controlling termination where search ends when character exists in terminator string(false) or must exist in terminator string(true). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src_max</td><td>Source string maximum length or search length (characters). Default 0 which means strlen(src) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index where terminator character found(invert_special_only=false) or not found (invert_special_only=true). If larger-equal than strlen(src) =&gt; not found </dd></dl>

</div>
</div>
<a id="a22c5027d49debe7b95d24d1fff80b596"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22c5027d49debe7b95d24d1fff80b596">&#9670;&nbsp;</a></span>FindTerminator() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint16_t ghttp::StringHelper::FindTerminator </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>include_special</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>invert_special_only</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>src_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find terminator character using characters from given terminator string. </p>
<p>Can search only for characters that are included in terminator string</p>
<dl class="section note"><dt>Note</dt><dd>Set parameter invert_speical_only to search for characters that only exist in this string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Starting index into src string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Source string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">include_special</td><td>Terminator string (flash based). Contains characters you either want to find or must include </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">invert_special_only</td><td>Flag controlling termination where search ends when character exists in terminator string(false) or must exist in terminator string(true). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src_max</td><td>Source string maximum length or search length (characters). Default 0 which means strlen(src) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index where terminator character found(invert_special_only=false) or not found (invert_special_only=true). If larger-equal than strlen(src) =&gt; not found </dd></dl>

</div>
</div>
<a id="a657b385e536ab7ed095c47384de728d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a657b385e536ab7ed095c47384de728d5">&#9670;&nbsp;</a></span>FindTerminator() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint16_t ghttp::StringHelper::FindTerminator </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>include_special</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>invert_special_only</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>src_max</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find terminator character using characters from given terminator string. </p>
<p>Can search only for characters that are included in terminator string</p>
<dl class="section note"><dt>Note</dt><dd>Set parameter invert_speical_only to search for characters that only exist in this string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Starting index into src string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Source string (flash based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">include_special</td><td>Terminator string (flash based). Contains characters you either want to find or must include </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">invert_special_only</td><td>Flag controlling termination where search ends when character exists in terminator string(false) or must exist in terminator string(true). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src_max</td><td>Source string maximum length or search length (characters). Default 0 which means strlen(src) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Index where terminator character found(invert_special_only=false) or not found (invert_special_only=true). If larger-equal than strlen(src) =&gt; not found </dd></dl>

</div>
</div>
<a id="a9ae415e1f53dd39a43d3ecd9e78d0501"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ae415e1f53dd39a43d3ecd9e78d0501">&#9670;&nbsp;</a></span>FromDecimal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t ghttp::StringHelper::FromDecimal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>digits</em> = <code>2</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>String from real type T. </p>
<p>Like sprintf(str, "%f") Source: printFloat for arduno in core/maple/print.cpp Unfortunately for maple mini its a private method and within a class that would be bloated for my purposes here, hence the copy and changes.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Base real type for conversion (float or double) </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">number</td><td>Number to convert </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">str</td><td>String pointer to buffer for conversion </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">digits</td><td>Digits below the decimal point, default 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Length in characters (not including NULL) </dd></dl>

</div>
</div>
<a id="abf876103d7258555c5033e45a012d556"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf876103d7258555c5033e45a012d556">&#9670;&nbsp;</a></span>FromInt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t ghttp::StringHelper::FromInt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>base</em> = <code>10</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>String from signed integer type T. </p>
<p>itoa like function Source: <a href="http://stackoverflow.com/questions/190229/where-is-the-itoa-function-in-linux">http://stackoverflow.com/questions/190229/where-is-the-itoa-function-in-linux</a> Internally makes -n +n which means you must have a data type twice as large as desired conversion</p>
<dl class="section attention"><dt>Attention</dt><dd>Only tested base 10 and 16!</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Base signed integer used for conversion. Usable range is TOP/2 for any given type </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">number</td><td>Number to convert </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">str</td><td>String pointer to buffer for conversion </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Number base/radix, default 10 (denary) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Length in characters (not including NULL) </dd></dl>

</div>
</div>
<a id="a180a3255f23625debdbe4b643aee613a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a180a3255f23625debdbe4b643aee613a">&#9670;&nbsp;</a></span>FromUInt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t ghttp::StringHelper::FromUInt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>&#160;</td>
          <td class="paramname"><em>number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>base</em> = <code>10</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>String from unsigned integer type T. </p>
<p>itoa like function Source: <a href="http://stackoverflow.com/questions/190229/where-is-the-itoa-function-in-linux">http://stackoverflow.com/questions/190229/where-is-the-itoa-function-in-linux</a> Internally makes -n +n which means you must have a data type twice as large as desired conversion</p>
<dl class="section attention"><dt>Attention</dt><dd>Only tested base 10 and 16!</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Base unsigned integer used for conversion </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">number</td><td>Number to convert </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">str</td><td>String pointer to buffer for conversion </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Number base/radix, default 10 (denary) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Length in characters (not including NULL) </dd></dl>

</div>
</div>
<a id="a2b092eb1cbbfeacfdfcb5697e42d7beb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b092eb1cbbfeacfdfcb5697e42d7beb">&#9670;&nbsp;</a></span>HexDigitFromIndex()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static char ghttp::StringHelper::HexDigitFromIndex </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Hex digit from index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>&gt;=0 Index &lt;=15 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Character from alphabet </dd></dl>

</div>
</div>
<a id="a0fefdee6d309d01d5931f23aca034ea0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fefdee6d309d01d5931f23aca034ea0">&#9670;&nbsp;</a></span>Reverse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static char* ghttp::StringHelper::Reverse </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reverse string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>Pointer to string to reverse </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">length</td><td>Length in characters of reverse operation (default 0 =&gt; strlen(str)) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>str Pointer </dd></dl>

</div>
</div>
<a id="a2e789168250978f50f329eb6aa647240"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e789168250978f50f329eb6aa647240">&#9670;&nbsp;</a></span>StrNCmp() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int16_t ghttp::StringHelper::StrNCmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s2_max</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alternative from strncmpi and strncmp. </p>
<p>Some standard library implementations don't include</p>
<dl class="section note"><dt>Note</dt><dd>There appear to be a few implementations so this is the one duplicated here: <a href="https://www.techonthenet.com/c_language/standard_library_functions/string_h/strncmp.php">https://www.techonthenet.com/c_language/standard_library_functions/string_h/strncmp.php</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s1</td><td>String, NULL terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>String, NULL terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2_max</td><td>Characters in s2 string (length excluding NULL). Use it to reduce search length within s1 string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Case sensitive compare flag (default true) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String difference at index </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>s1[0..n-1] == s2[0..n-1] </td></tr>
    <tr><td class="paramname">+1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
    <tr><td class="paramname">-1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3ac41c310257152fa229a1d7f2e637dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ac41c310257152fa229a1d7f2e637dd">&#9670;&nbsp;</a></span>StrNCmp() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int16_t ghttp::StringHelper::StrNCmp </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_VOID_P&#160;</td>
          <td class="paramname"><em>s2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>s2_max</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alternative from strncmpi and strncmp. </p>
<p>Some standard library implementations don't include</p>
<dl class="section note"><dt>Note</dt><dd>There appear to be a few implementations so this is the one duplicated here: <a href="https://www.techonthenet.com/c_language/standard_library_functions/string_h/strncmp.php">https://www.techonthenet.com/c_language/standard_library_functions/string_h/strncmp.php</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s1</td><td>String, NULL terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2</td><td>String, NULL terminated (flashed based) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s2_max</td><td>Characters in s2 string (length excluding NULL). Use it to reduce search length within s1 string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Case sensitive compare flag (default true) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String difference at index </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>s1[0..n-1] == s2[0..n-1] </td></tr>
    <tr><td class="paramname">+1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
    <tr><td class="paramname">-1</td><td>=&gt; s1[n] - s2[n] where n is index of s1[n] != s2[n] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>ghttp</b></li><li class="navelem"><a class="el" href="classghttp_1_1_string_helper.htm">StringHelper</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 14:59:57 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
