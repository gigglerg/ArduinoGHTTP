<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGHTTP: core/ghttp_httprequest.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="ghttp_chrome_opt.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGHTTP
   &#160;<span id="projectnumber">release_100-e1d212a(git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing HTTP requests and creating responses, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('ghttp__httprequest_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ghttp_httprequest.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ghttp__httprequest_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Embedded HTTP request/response handling framework - HTTP request</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: GHTTP library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, STM32, Atmel AT91SAM, portable</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef GHTTP_HTTPREQUEST_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define GHTTP_HTTPREQUEST_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span>ghttp {</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_FILE_VARS == 1</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t N, u<span class="keywordtype">int</span>8_t V, u<span class="keywordtype">int</span>8_t CT, u<span class="keywordtype">int</span>8_t FV, u<span class="keywordtype">int</span>8_t CN&gt;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#else // GHTTP_REQUEST_PROCESS_COOKIES != 1</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t N, u<span class="keywordtype">int</span>8_t V, u<span class="keywordtype">int</span>8_t CT, u<span class="keywordtype">int</span>8_t FV&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#else // GHTTP_REQUEST_PROCESS_POST_FILE_VARS != 1</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t N, u<span class="keywordtype">int</span>8_t V, u<span class="keywordtype">int</span>8_t CT, u<span class="keywordtype">int</span>8_t CN&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#else // GHTTP_REQUEST_PROCESS_COOKIES != 1</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t N, u<span class="keywordtype">int</span>8_t V, u<span class="keywordtype">int</span>8_t CT&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * HTTP Request class with helpers to assist in the parsing of valid HTTP request messages, likely received over TCP/IP</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * Refer: RFC 1738, RFC 7578 &amp; RFC 1867, RFC 6265, RFC 1735</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * \tparam N Maximum parsed headers</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * \tparam V Maximum parsed POST/GET variables</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * \tparam CT Maximum content type strings.  Content type header broken down into strings</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * \tparam FV Maximum parsed file POST variables.  Exists if GHTTP_REQUEST_PROCESS_POST_FILE_VARS=1</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * \tparam CN Maximum cookies in Cookie jar.  Exists if GHTTP_REQUEST_PROCESS_COOKIES=1</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm">HTTPRequest</a> : <span class="keyword">public</span> <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm">HTTPBuffer</a> {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">     * Enum of possible request parse errors</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">   46</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">   47</a></span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a>,                                   <span class="comment">///&lt;  0 - No error</span></div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">   48</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ERR_SEGMENTATION</a>,                           <span class="comment">///&lt;  1 - Parse information.  More data expected</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea33589a8091fc3a037c437084ac7fabbd">   49</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea33589a8091fc3a037c437084ac7fabbd">ERR_PARSE_EOF</a>,                              <span class="comment">///&lt;  2 - Parse error. End of File =&gt; to much data sent from host</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea66cd3a56dfa17d2503463f388c3a454e">   50</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea66cd3a56dfa17d2503463f388c3a454e">ERR_PARSE_BAD_FIRST_LINE_SOL</a>,               <span class="comment">///&lt;  3 - Parse error. First line contained unexpected data at SOL</span></div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651">   51</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651">ERR_PARSE_BAD_METHOD</a>,                       <span class="comment">///&lt;  4 - Parse error. Bad method string</span></div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea590d8981d5efa9e33982bfbf4e6e4ac2">   52</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea590d8981d5efa9e33982bfbf4e6e4ac2">ERR_PARSE_BAD_URL</a>,                          <span class="comment">///&lt;  5 - Parse error. Bad URL string</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac0dd4f757e2f3cab80159bfb9987a950">   53</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac0dd4f757e2f3cab80159bfb9987a950">ERR_PARSE_BAD_GET_PARAM_NAME</a>,               <span class="comment">///&lt;  6 - Parse error. Bad GET parameter name</span></div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea97411748eed7816ada89724ca046ee99">   54</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea97411748eed7816ada89724ca046ee99">ERR_PARSE_BAD_GET_PARAM_VALUE</a>,              <span class="comment">///&lt;  7 - Parse error. Bad GET parameter value</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaeeb2b92d7605d66416b0c02e79ecae83">   55</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaeeb2b92d7605d66416b0c02e79ecae83">ERR_PARSE_BAD_GET_PARAM_TO_MANY</a>,            <span class="comment">///&lt;  8 - Parse error. To many GET parameters</span></div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea338c1b9925e3b6c58082646043ea5070">   56</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea338c1b9925e3b6c58082646043ea5070">ERR_PARSE_BAD_PROTOCOL</a>,                     <span class="comment">///&lt;  9 - Parse error. Bad protocol string</span></div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9309d504ab8ad7447e65cfa741f2ec21">   57</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9309d504ab8ad7447e65cfa741f2ec21">ERR_PARSE_BAD_PROTOCOL_VERSION</a>,             <span class="comment">///&lt; 10 - Parse error. Bad protocol version string</span></div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea74a87ed891720da5c3c0df96ee56cd5a">   58</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea74a87ed891720da5c3c0df96ee56cd5a">ERR_PARSE_BAD_FIRST_LINE_NO_EOL</a>,            <span class="comment">///&lt; 11 - Parse error. Bad first line, termination of</span></div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eacba620c9f5f04fd66cc6c515e3bb1d34">   59</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eacba620c9f5f04fd66cc6c515e3bb1d34">ERR_PARSE_BAD_HEADER_LINE_SOL</a>,              <span class="comment">///&lt; 12 - Parse error. Bad header line string, unexpect data at SOL</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa2a7b9c5b5cf08580e0a4ecb9cd6737d">   60</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa2a7b9c5b5cf08580e0a4ecb9cd6737d">ERR_PARSE_BAD_HEADER_LINE_NAME</a>,             <span class="comment">///&lt; 13 - Parse error. Bad header line string at attribute name</span></div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">   61</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ERR_PARSE_BAD_HEADER_LINE_VALUE</a>,            <span class="comment">///&lt; 14 - Parse error. Bad header line string at value</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae9ede3d08d5483d9ad63bda45fdfa0ee">   62</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae9ede3d08d5483d9ad63bda45fdfa0ee">ERR_PARSE_HEADER_LIMIT</a>,                     <span class="comment">///&lt; 15 - Parse error. Header string limit reached when appending data</span></div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead5e0d118d13f2b65dab99b12cfb62ee9">   63</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead5e0d118d13f2b65dab99b12cfb62ee9">ERR_PARSE_BAD_HEADER_LINE_NO_EOL</a>,           <span class="comment">///&lt; 16 - Parse error. Bad header line, termination of</span></div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae53ff981f4fe7186c3a402dcfc0e0447">   64</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae53ff981f4fe7186c3a402dcfc0e0447">ERR_PARSE_UNEXPECTED_DATA</a>,                  <span class="comment">///&lt; 17 - Parse error. To much data in request buffer</span></div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0d19914b6f48abdf0f4e2a8e917902cb">   65</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0d19914b6f48abdf0f4e2a8e917902cb">ERR_PARSE_CONTENT_LENGTH_MISMATCH</a>,          <span class="comment">///&lt; 18 - Parse error. Content length header string differs from actual (read) content length</span></div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead19faf40e062229b547ce23d583213bf">   66</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead19faf40e062229b547ce23d583213bf">ERR_PARSE_BAD_COOKIE_NAME</a>,                  <span class="comment">///&lt; 19 - Parse error. Processing header, bad cookie name found</span></div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0f0743cd79b1bc7d5ae961153dc6fed5">   67</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0f0743cd79b1bc7d5ae961153dc6fed5">ERR_PARSE_BAD_COOKIE_VALUE</a>,                 <span class="comment">///&lt; 20 - Parse error. Processing header, bad cookie value found</span></div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead9a600c438a976355b8fab73e437ad90">   68</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead9a600c438a976355b8fab73e437ad90">ERR_PARSE_BAD_COOKIE_TO_MANY</a>,               <span class="comment">///&lt; 21 - Parse error. Processing header, to many cookies in set cannot add more</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9c226931afe0b16c0e524758579f834c">   69</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9c226931afe0b16c0e524758579f834c">ERR_PARSE_BAD_POST_PARAM_NAME</a>,              <span class="comment">///&lt; 22 - Parse error. Bad POST parameter name</span></div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eafc69a01ca888971abe5bac484b5c0368">   70</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eafc69a01ca888971abe5bac484b5c0368">ERR_PARSE_BAD_POST_PARAM_VALUE</a>,             <span class="comment">///&lt; 23 - Parse error. Bad POST parameter value</span></div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa735a15118339104b3de068c137b9400">   71</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa735a15118339104b3de068c137b9400">ERR_PARSE_BAD_POST_PARAM_TO_MANY</a>,           <span class="comment">///&lt; 24 - Parse error. To many POST parameters, cannot add more</span></div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac3591822f80ddd5d301031acbd81676a">   72</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac3591822f80ddd5d301031acbd81676a">ERR_PARSE_BAD_POST_FILE_PARAM_TO_MANY</a>,      <span class="comment">///&lt; 25 - Parse error. To many POST FILE parameters, cannot add more</span></div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea239f6cafd273456d33caf26af478ae04">   73</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea239f6cafd273456d33caf26af478ae04">ERR_PARSE_BAD_CTYPE_NAME</a>,                   <span class="comment">///&lt; 26 - Parse error. Bad content type parameter name</span></div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa9f1dfb0a8bbbca9636a551fd4e7df85">   74</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa9f1dfb0a8bbbca9636a551fd4e7df85">ERR_PARSE_BAD_CTYPE_VALUE</a>,                  <span class="comment">///&lt; 27 - Parse error. Bad content type parameter value</span></div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea65684557d691b33e43ffa3f4d1c817da">   75</a></span>&#160;<span class="comment"></span>        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea65684557d691b33e43ffa3f4d1c817da">ERR_PARSE_BAD_CTYPE_TO_MANY</a>,                <span class="comment">///&lt; 28 - Parse error. To many content type parameters, cannot add more</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>        ERR_PARSE_MAX,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">   80</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>;                       <span class="comment">///&lt; RFC 1738, Not URL decoded.  Does not include username or password if specified</span></div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">   81</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">method</a>;                        <span class="comment">///&lt; RFC 1738, URL method</span></div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">   82</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>;                           <span class="comment">///&lt; RFC 1738, Decoded URL, i.e. route like /msg or / or /request etc.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">   83</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">username</a>;                      <span class="comment">///&lt; RFC 1738, Not from session but URL before @</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">   84</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">password</a>;                      <span class="comment">///&lt; RFC 1738, Not from session but URL before @</span></div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">   85</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">protocol</a>;                      <span class="comment">///&lt; RFC 1738, protocol like HTTP</span></div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">   86</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">protocol_version</a>;              <span class="comment">///&lt; RFC 1738, protocol version like 1.0, 1.1 etc.</span></div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">   87</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">content</a>;                       <span class="comment">///&lt; Content after headers.  May only contain first string if POST decoded</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#if GHTTP_SERVER_ACCEPT_AUTHORIZATION == 1 &amp;&amp; GHTTP_SERVER_AUTHORIZATION_REUSE_VARS == 0</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    authorization_username;        <span class="comment">///&lt; RFC 1735, basic authorization username</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    authorization_password;        <span class="comment">///&lt; RFC 1735, basic authorization password</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span><span class="preprocessor">#endif // GHTTP_SERVER_ACCEPT_AUTHORIZATION == 1</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">   95</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;CT&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>;        <span class="comment">///&lt; Content string set</span></div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a2a1f4b7a0360a2379728d94a468183d0">   96</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;V&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a2a1f4b7a0360a2379728d94a468183d0">query_variable</a>;       <span class="comment">///&lt; Query string set</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">   99</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;V&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>;        <span class="comment">///&lt; Post string set</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span><span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_FILE_VARS == 1</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">  101</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_request_file_string_set.htm">HTTPRequestFileStringSet&lt;FV&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>;    <span class="comment">///&lt; Post file string set</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">  105</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;N&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>;               <span class="comment">///&lt; Header strings</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">  108</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_request_cookie_jar.htm">HTTPRequestCookieJar&lt;CN&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>;                <span class="comment">///&lt; Cookie strings</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1 &amp;&amp; GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>    session;                       <span class="comment">///&lt; Session string (from session cookie if present).  Saves you looking at cookies.  Exists only when GHTTP_REQUEST_PROCESS_COOKIES == 1 &amp;&amp; GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * Default constructor, make stable instance.  Defaults NULL strings, port 80 and no error</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a11963e969fbd5acbf446184131d983cd">  119</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a11963e969fbd5acbf446184131d983cd">HTTPRequest</a>() : <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">port_</a>(80), <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a>), <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a>(0) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * Get last error</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * \return Error numeric, \ref ERR</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">  128</a></span>&#160;    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * Request parse.  Invoke \ref GetLastError post parse, upon successful parse the error will be ERR::ERR_NONE.  A special case for error reporting</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     * where ERR::ERR_SEGMENTATION is given when there isn&#39;t enough data which includes the case where content length is specified as a header and the </span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * entire request doesn&#39;t meet that length.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     * \attention If segmentation used.  Before the start of receiving a new request or at the end of processing a response using the same buffer, caller </span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * should invoke \ref HTTPBuffer::Clear() in order to indicate the start of a new request otherwise data will be assumed segmented and part of the </span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * same request</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * \note Flag parse_content has no affect if GHTTP_REQUEST_PROCESS_POST_VARS isn&#39;t defined.  It will be set to false internally if HTTP version &lt; 1.0</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * as only GET requests with no content length are supported</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * \note Using segmentation means ERR::ERR_PARSE_CONTENT_LENGTH_MISMATCH only occurs when there is to much data received and content length header </span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * present for HTTP version &gt;=1.0 otherwise ERR::ERR_SEGMENTATION is given</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * \todo Refactor as statemachine</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * \param[in] request_buffer Request buffer pointer (Maybe NULL terminated)</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * \param[in] length Request buffer length (characters, not including NULL)</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     * \param[in] max_length Request buffer maximum length (characters, including NULL)</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * \param[in] parse_content Flag indicating content should also be parsed.  Default true =&gt; POST variables are parsed if enabled through macros</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * \param[in] segmentation Flag indicating the request maybe be segmented and a caller is expecting feedback from Parser to decide what to do </span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * with network activity (default true).  Set to false if you expect a single invoke per request and the entire request should exist in buffer.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * \return Last position parsed within buffer (character index).  Upon error condition where \ref GetLastError indicates failure the index may help</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab0a4f01bfba2cb2a460440c0001a1303">  158</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab0a4f01bfba2cb2a460440c0001a1303">Parse</a>(<span class="keywordtype">char</span>* request_buffer, uint16_t length, uint16_t max_length, <span class="keyword">const</span> <span class="keywordtype">bool</span> parse_content=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> segmentation=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        uint16_t e,i=0;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a> = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> (!segmentation) {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ac0ef2438e1c7ae3953641b6fa310cddb">Clear</a>();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">// First segment?</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">GetLength</a>()) {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> = 0;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a> = request_buffer;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a> = max_length;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="comment">// Strings we expect to populate</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">method</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">username</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">password</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">protocol</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">protocol_version</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">content</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// Conditionals</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1 &amp;&amp; GHTTP_SERVER_USE_SESSIONS == 1</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            session.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">Null</a>();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>.count = 0;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_FILE_VARS == 1</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count = 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a2a1f4b7a0360a2379728d94a468183d0">query_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">port_</a> = 80;                <span class="comment">// Default</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a> = 0;    <span class="comment">// Default</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>;            <span class="comment">// Current length before parse</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> = length;        <span class="comment">// Required for FindTerminator(...)</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> &amp;&amp; segmentation) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="comment">// Make sure EOH present in buffer</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(0, length, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;\r\n\r\n&quot;</span>), max_length);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// End of first line</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(0, length, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;\r\n&quot;</span>), max_length);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a>&gt;=length) {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="comment">// No EOH.  First line?</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>() || i&gt;=length) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="comment">// No first line.  Wait for more data</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a> = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ERR_SEGMENTATION</a>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> = 0;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="comment">// Was there no length before parse? i.e. this is first segment and includes everything?  if so we need to parse first line so i=0</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">if</span> (!e) {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    i = 0;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    i+=2; <span class="comment">// Skip over EOFL</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a>&lt;=length) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="comment">// Start parsing content.  It should start on end of header &quot;\r\n&quot; hence +2 not +4</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> + 2;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a> == <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">if</span> (i&gt;=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="comment">// More data expected, parse not finished</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea33589a8091fc3a037c437084ac7fabbd">ERR_PARSE_EOF</a>);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="comment">// First line parse?</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keywordflow">if</span> (i==0) {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]&lt;=<span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="comment">// Bad first line header</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea66cd3a56dfa17d2503463f388c3a454e">ERR_PARSE_BAD_FIRST_LINE_SOL</a>);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="comment">// Method</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot; &quot;</span>);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                        <span class="comment">// Error bad method</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651">ERR_PARSE_BAD_METHOD</a>);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">method</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,e-i);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    <span class="comment">// Username</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;@ &quot;</span>));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> || (e&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &amp;&amp; <span class="charliteral">&#39;@&#39;</span>!=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e])) {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <span class="comment">// Not specified</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        uint16_t ate = e;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="comment">// Password</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;:@&quot;</span>));</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> || ate==e || (e&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &amp;&amp; <span class="charliteral">&#39;:&#39;</span>!=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e])) {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                            <span class="comment">// Not specified</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">username</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,ate-i);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">username</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,e-i);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">password</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, e+1, ate-(1+e));    <span class="comment">// Password is +1 as is NULL for username and len n-1 =&gt; ate-(1+e)</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        i = ate + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="comment">// Setup RAW URL.  Find end &#39;e&#39;.  We only copy and setup if there is room</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot; &quot;</span>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="keywordflow">if</span> ((<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>+ 1 + e-i) &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>) {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <span class="comment">// Originally requests were not segmented since any parser has to interaction with lower protocol layers of your network stack</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        <span class="comment">// this raw URL cannot be put at length_ because that changes with new segments.</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <span class="comment">// Behaviour now is:</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        <span class="comment">// If not segmenting assume length_ entire request so continue to place at end of request otherwise place at end of buffer - string length</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        <span class="comment">// and move it to length_ after parsing complete.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        <span class="keywordflow">if</span> (!segmentation) {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                            <span class="comment">// Place at end of complete request due to lack of segmentation</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                            memcpy(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>+1], &amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i], e-i);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + 1 + e-i] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> + 1, e-i);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            uint16_t i_raw_url = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a> - (1 + e-i);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                            <span class="comment">// Place at end of buffer complete request due to lack of segmentation</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                            memcpy(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i_raw_url], &amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i], e-i);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">max_length_</a>-1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i_raw_url, e-i);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                        }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <span class="comment">// URL</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;? &quot;</span>));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        <span class="comment">// Error bad URL</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea590d8981d5efa9e33982bfbf4e6e4ac2">ERR_PARSE_BAD_URL</a>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        <span class="keywordtype">char</span> q = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e];</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="comment">// Decode it.  A decode will always be &lt;= encoded string</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        <a class="code" href="classghttp_1_1_u_r_i.htm#a1415492151e4d133b36535a1384c9ea7">URI::Decode</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">url</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()));</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="comment">// Expect GET parameters?</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        <span class="keywordflow">if</span> (<span class="charliteral">&#39;?&#39;</span>==q) {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">BuildStringSetParseVariables</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a2a1f4b7a0360a2379728d94a468183d0">query_variable</a>, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac0dd4f757e2f3cab80159bfb9987a950">ERR_PARSE_BAD_GET_PARAM_NAME</a>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                            }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    <span class="comment">// Protocol</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;/&quot;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                        <span class="comment">// Error bad protocol</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea338c1b9925e3b6c58082646043ea5070">ERR_PARSE_BAD_PROTOCOL</a>);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">protocol</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,e-i);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    <span class="comment">// Protocol version</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        <span class="comment">// Error bad protocol version</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9309d504ab8ad7447e65cfa741f2ec21">ERR_PARSE_BAD_PROTOCOL_VERSION</a>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">protocol_version</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,e-i);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    <span class="comment">// EOL?</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">if</span> (<span class="charliteral">&#39;\n&#39;</span> != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]) {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        <span class="comment">// Error bad line 0</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea74a87ed891720da5c3c0df96ee56cd5a">ERR_PARSE_BAD_FIRST_LINE_NO_EOL</a>);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    i++;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                    <span class="comment">// Do we parse content?</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    <span class="comment">// Source: https://www.w3.org/Protocols/HTTP/AsImplemented.html</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    <span class="comment">// HTTP/0.9 supported GET with no content (body)</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">protocol</a> == <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;http&quot;</span>) &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">protocol_version</a> == <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;0.9&quot;</span>)) {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">method</a> != <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;get&quot;</span>)) {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                            <span class="comment">// HTTP/0.9 only supports GET</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651">ERR_PARSE_BAD_METHOD</a>);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="keywordflow">if</span> (i != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae53ff981f4fe7186c3a402dcfc0e0447">ERR_PARSE_UNEXPECTED_DATA</a>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        <span class="keywordflow">break</span>; <span class="comment">// Done.  v0.9 has no content or headers</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                        <span class="comment">// We&#39;ve parsed first line but did do we have the headers to go on and parse?</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a> &amp;&amp; segmentation) {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                            <span class="comment">// No</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ERR_SEGMENTATION</a>);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                        }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                    }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                }<span class="keywordflow">else</span> { <span class="comment">// else (l!=0)</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    <span class="comment">// Process header strings, i.e. &quot;name: value&quot; pairs</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    <span class="comment">// Start of content? (is header string just CR+LF)</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]==<span class="charliteral">&#39;\r&#39;</span> &amp;&amp; (i+1)&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i+1]==<span class="charliteral">&#39;\n&#39;</span>) {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        <span class="keywordflow">if</span> ((i+2)&lt;=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                            uint16_t al;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                            <span class="comment">// Content exists</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                            i+=2;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                            al = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> - i;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">content</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, al);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                            <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a> != al) {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                <span class="comment">// Error content length differ</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor">#if defined(_MSC_VER)</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                printf(<span class="stringliteral">&quot;set %d, calc length = %d\n&quot;</span>, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a>, (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> - i));</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                <span class="comment">// If segmentation, are we still waiting for content?</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                <span class="keywordflow">if</span> (segmentation &amp;&amp;  al &lt; <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a>) {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ERR_SEGMENTATION</a>);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0d19914b6f48abdf0f4e2a8e917902cb">ERR_PARSE_CONTENT_LENGTH_MISMATCH</a>);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                            }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a>&gt;=2) {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                <span class="keywordflow">if</span> (parse_content) {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                    <span class="comment">/* RFC 7578 &amp; RFC 1867</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">                                     * These are processed if</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">                                     * header Content-Type = multipart/form-data or application/x-www-form-urlencoded</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">                                     * method = &quot;post&quot;</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">                                     */</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                    <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">method</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">StrNCmp</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;post&quot;</span>)) &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>&gt;0) {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">Find</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;application/x-www-form-urlencoded&quot;</span>))&gt;=0) {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_BAD_POST_DATA_IGNORE == 1</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                            i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">BuildStringSetParseVariables</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                            i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">BuildStringSetParseVariables</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9c226931afe0b16c0e524758579f834c">ERR_PARSE_BAD_POST_PARAM_NAME</a>);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                            <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                            }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                        }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">Find</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;multipart/form-data&quot;</span>))&gt;=0) {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                            <span class="comment">// Bounary string in content type must exist</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                            int16_t bi = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">Find</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;boundary&quot;</span>));</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                            <span class="keywordflow">if</span> (bi&gt;=0) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#acca7e6e1d1e9ec6416f10ea5b87cb674">ProcessContent</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(bi))-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">value</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>());</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                                }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                            }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                        }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                    }</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                } <span class="comment">// if (parse_content)</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                            } <span class="comment">// else if (content_length_&gt;=2)</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                        } <span class="comment">// if ((i+2)&lt;length_)</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        <span class="comment">// We&#39;re done</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                    } <span class="comment">// if (buffer_[i]==&#39;\r&#39; &amp;&amp; (i+1)&lt;length_ &amp;&amp; buffer_[i+1]==&#39;\n&#39;)</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]&lt;=<span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        <span class="comment">// Bad header string, expected SOL</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eacba620c9f5f04fd66cc6c515e3bb1d34">ERR_PARSE_BAD_HEADER_LINE_SOL</a>);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                    }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    <span class="comment">// Attribute/name</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                    e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;:&quot;</span>);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        <span class="comment">// Error bad header string attribute/name</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa2a7b9c5b5cf08580e0a4ecb9cd6737d">ERR_PARSE_BAD_HEADER_LINE_NAME</a>);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count == N) {</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                            <span class="comment">// Error header string limit reached</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae9ede3d08d5483d9ad63bda45fdfa0ee">ERR_PARSE_HEADER_LIMIT</a>);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        }</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    <span class="comment">// Find start of value string</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(e + 1<span class="comment">/* Skip NULL */</span>, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;: &quot;</span>), <span class="keyword">true</span>);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="comment">// Specific string handling</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">port_</a>==80 &amp;&amp; !<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;StrNCmp(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;host&quot;</span>))) {</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        <span class="comment">// Found host header string, deal with here</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                        <span class="comment">// Value</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;:\r&quot;</span>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                            <span class="comment">// Error bad header string value</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ERR_PARSE_BAD_HEADER_LINE_VALUE</a>);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                        i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                        <span class="comment">// EOL?</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                        <span class="keywordflow">if</span> (<span class="charliteral">&#39;\n&#39;</span> != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]) {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                            <span class="comment">// No so we can assume port specified by host</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                            <span class="comment">// Port</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                                <span class="comment">// Error bad header string value</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ERR_PARSE_BAD_HEADER_LINE_VALUE</a>);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                <span class="comment">// We can use content string because it shouldnt be setup yet</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">content</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">port_</a> = atoi(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">content</a>);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160; </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#if defined(HTTPSERVER_HOST_HEADER_INCLUDE_PORT)</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                <span class="comment">// Re-install colon so host includes port again</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i] = <span class="charliteral">&#39;:&#39;</span>;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                i = e + 1; <span class="comment">// Skip NULL.  Maybe 2?</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                            }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                        }</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160; </div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor">#if GHTTP_SERVER_ACCEPT_AUTHORIZATION == 1</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;StrNCmp(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;authorization&quot;</span>))) { <span class="comment">// Authorization</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                        <span class="comment">// RFC 1735, authorization</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                        <span class="comment">// Value</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                        <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                            <span class="comment">// Error bad header string value</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ERR_PARSE_BAD_HEADER_LINE_VALUE</a>);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                        }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                        i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                        <span class="comment">// Is basic authorization?</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value.Get(), <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;basic &quot;</span>), 6, <span class="keyword">false</span>)) {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value+=6;    <span class="comment">// Move over basic so value pointers to username/password data pair</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160; </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                            <span class="comment">// Base64 decode</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                            <span class="keywordtype">char</span> *b64_pstr = <span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value.Get());</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                            <a class="code" href="classghttp_1_1_m_i_m_e_base64.htm#ae92bf767427d19b6698a46b1d361eb3f">MIMEBase64::Decode</a>(b64_pstr, b64_pstr, strlen(b64_pstr), strlen(b64_pstr));</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                            <span class="comment">// Find password start, a colon comes before it</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                            uint16_t psi = <a class="code" href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">StringHelper::FindTerminator</a>(0, b64_pstr, <span class="stringliteral">&quot;:&quot;</span>);</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                            <span class="keywordflow">if</span> (psi&gt;0) {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                b64_pstr[psi] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// NULL username</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160; </div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                <span class="comment">// Setup username and password.  We could re-use the username and password from URI (RFC 1738) if short of memory</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#if GHTTP_SERVER_AUTHORIZATION_REUSE_VARS == 1</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">username</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(b64_pstr);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">password</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(&amp;b64_pstr[psi+1]);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="preprocessor">#else // GHTTP_SERVER_AUTHORIZATION_REUSE_VARS != 1</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                authorization_username.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(b64_pstr);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                authorization_password.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(&amp;b64_pstr[psi+1]);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                <span class="comment">// Type basic and we appear to have decoded successfull so drop this header otherwise leave as a header string application</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count--;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                            }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                        }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#endif // GHTTP_SERVER_ACCEPT_AUTHORIZATION == 1</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;StrNCmp(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;content-type&quot;</span>))) { <span class="comment">// Content type</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        <span class="comment">// Process</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                        i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">BuildStringSet</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">content_type</a>, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea239f6cafd273456d33caf26af478ae04">ERR_PARSE_BAD_CTYPE_NAME</a>);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                        }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count--;    <span class="comment">// Drop this header as we&#39;ve parsed into own list</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160; </div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;StrNCmp(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;cookie&quot;</span>))) { <span class="comment">// Cookies?</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                        <span class="comment">// Process</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                        i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">BuildStringSet</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead19faf40e062229b547ce23d583213bf">ERR_PARSE_BAD_COOKIE_NAME</a>);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ERR_NONE</a> != <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">GetLastError</a>()) {</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                        }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>.count) { <span class="comment">// No error and we have cookies</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="preprocessor">#if GHTTP_SERVER_USE_SESSIONS == 1 &amp;&amp; defined(GHTTP_SERVER_STRING_SESSION_COOKIE)</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                            <span class="comment">// Look for session cookie</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                            int16_t ci = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>.Find(GHTTP_SERVER_STRING_SESSION_COOKIE);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                            <span class="comment">// Session cookie exists so set easy access session string</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                            <span class="keywordflow">if</span> (ci &gt;= 0) {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                session.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">cookie</a>.At(<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(ci))-&gt;value.Get()));</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                            }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">#endif // GHTTP_SERVER_USE_SESSIONS == 1 &amp;&amp; defined(GHTTP_SERVER_STRING_SESSION_COOKIE)</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                        }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count--;    <span class="comment">// Drop this header as we&#39;ve parsed into own list</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_COOKIES == 1</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                        <span class="comment">// Default behaviour for any property value that isn&#39;t expected to include other information</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                        <span class="comment">// Value</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                        e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                        <span class="keywordflow">if</span> (e==i || e==<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                            <span class="comment">// Error bad header string value</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ERR_PARSE_BAD_HEADER_LINE_VALUE</a>);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i,e-i);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                        }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                        i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                        <span class="comment">// Is integer content length 0 and is parameter content length, if yes then convert value to integer and populate</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a> &amp;&amp; !<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;StrNCmp(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;content-length&quot;</span>))) {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a> = atoi(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.At(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count)-&gt;value); <span class="comment">// TODO stringhelper::uint</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        }</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                    }</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <span class="comment">// EOL?</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    <span class="keywordflow">if</span> (<span class="charliteral">&#39;\n&#39;</span> != <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]) {</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                        <span class="comment">// Error bad line 0</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead5e0d118d13f2b65dab99b12cfb62ee9">ERR_PARSE_BAD_HEADER_LINE_NO_EOL</a>);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    i++;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160; </div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">header</a>.count++;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                } <span class="comment">// else (l!=0)</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        } <span class="comment">// if (last_error_ == ERR_NONE &amp;&amp; length_)</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="comment">// Parse complete with no error and raw url setup with segmentation then we need to move string</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>() &amp;&amp; segmentation) {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <span class="comment">// Move raw url from end of buffer to end of request so response can use end of buffer without worrying about overwriting raw url if offset correctly setup when building</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            memcpy(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>+1], <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>(), 1+strlen(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()));</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">url_raw</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>+1]);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160; </div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    } <span class="comment">// Parse(...)</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">     * Get content length</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">     * \note Only valid if \ref Parse invoked prior</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">     * \return Characters/Octets</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#aeb2c83afa0323f15041def685227fe58">  624</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aeb2c83afa0323f15041def685227fe58">GetContentLength</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a>;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    }</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160; </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment">     * Set error to be queried later by \ref GetLastError</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">     * \param[in] e Error from \ref ERR</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">  634</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">const</span> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a> e) {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a> = e;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    }</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160; </div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">     * Build string set for post variables from content when type &quot;multipart/form-data&quot;</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">     * \param[in] i Start index of content into buffer</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">     * \param[in] boundary_str Boundary string taken from content type header.  This is data only not entire header</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">     * \return Last position processed within buffer (character index).  Upon error condition where \ref GetLastError indicates failure the index may help</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00647"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#acca7e6e1d1e9ec6416f10ea5b87cb674">  647</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#acca7e6e1d1e9ec6416f10ea5b87cb674">ProcessContent</a>(uint16_t i, <span class="keyword">const</span> <span class="keywordtype">char</span>* boundary_str) {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        uint8_t bsl = strlen(boundary_str);</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        uint16_t e, ls = 0, o, t, j;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(i, <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>, boundary_str, bsl);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordflow">if</span> (e&gt;2 &amp;&amp; e &lt; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a><span class="comment">/* &amp;&amp; o*/</span>) {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                <span class="keywordflow">if</span> (<span class="charliteral">&#39;-&#39;</span> == <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e-1] &amp;&amp; <span class="charliteral">&#39;-&#39;</span> == <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e-2]) {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                    e-=2;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                }</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                <span class="keywordflow">if</span> (ls) {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    <span class="comment">/* Process field data between characrters last start (ls) and end (e) character indexes</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="comment">                     * Fields look like:</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">                     * Content-Disposition: form-data; name=&quot;user&quot;</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">                     *</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment">                     * Files look like: </span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment">                     * Content-Disposition: form-data; name=&quot;thefile&quot;; filename=&quot;&quot;</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment">                     * Content-Type: application/octet-stream</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">                     */</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    <span class="comment">// Look for first line \r\n</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    j = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(ls, e);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <span class="keywordflow">if</span> (j &lt; (e+1)) {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        <span class="comment">// form-data; name=&quot;thefile&quot;; filename</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(ls, e, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;form-data&quot;</span>)) &lt; e) {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                            <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(ls, e, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;name&quot;</span>)) &lt; e) {</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                <span class="comment">// Is it a file or field?</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(ls, e, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;filename&quot;</span>)) &gt;= e) {</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                    t = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">FindSubString</a>(ls, e, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;name&quot;</span>));</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                    o = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(t, <span class="stringliteral">&quot;\&quot;&quot;</span>, <span class="keyword">false</span>, j) +1;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                    <span class="keywordflow">if</span> (o&lt;j) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                        t = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(o+1, <span class="stringliteral">&quot;\&quot;&quot;</span>, <span class="keyword">false</span>, j);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                        <span class="keywordflow">if</span> (t&lt;j) {</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_BAD_POST_DATA_IGNORE == 1</span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                        <span class="keywordflow">if</span> (V == <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>) {</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>--;    <span class="comment">// Over-write</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                                        }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="preprocessor">#else // GHTTP_REQUEST_BAD_POST_DATA_IGNORE != 1</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                                        <span class="keywordflow">if</span> (V == <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>) {</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa735a15118339104b3de068c137b9400">ERR_PARSE_BAD_POST_PARAM_TO_MANY</a>);</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                                        }</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_BAD_POST_DATA_IGNORE != 1</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                            <span class="comment">// Attr name = &quot;abcd&quot;, o=&#39;a&#39; and t=&#39;&quot;&#39;</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, o, t-o);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160; </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                            <span class="comment">// Find value which will be after double \r\n\r\n within ls - e</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                            <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                                o = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(o, e);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                                </div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                                <span class="keywordflow">if</span> (o&lt;e &amp;&amp; (o+3)&lt;e &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[o]==<span class="charliteral">&#39;\n&#39;</span> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[o+1]==<span class="charliteral">&#39;\r&#39;</span> &amp;&amp; <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[o+2]==<span class="charliteral">&#39;\n&#39;</span>) {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                                                    o+=3; <span class="comment">// +CRLFCR</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                                    <span class="comment">// value[x] where o&gt;= x &lt;= e-2 (length =&gt; e-(o+6))</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">post_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>++)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">value</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, o, e-(o+2));</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                                }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (o==e) {</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                                }</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                                o++;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                            }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                        }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                    }</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                }<span class="keywordflow">else</span> { <span class="comment">// if (!t) =&gt; filename exists</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                                    <span class="comment">// File</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160; </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_PROCESS_POST_FILE_VARS == 1</span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="preprocessor">#if GHTTP_REQUEST_BAD_POST_DATA_IGNORE == 1</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                    <span class="keywordflow">if</span> (FV == <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>) {</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>--;    <span class="comment">// Over-write</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                    }</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="preprocessor">#else // GHTTP_REQUEST_BAD_POST_DATA_IGNORE != 1</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                    <span class="keywordflow">if</span> (FV == <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>) {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac3591822f80ddd5d301031acbd81676a">ERR_PARSE_BAD_POST_FILE_PARAM_TO_MANY</a>);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                    }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_BAD_POST_DATA_IGNORE != 1</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                                    <span class="comment">// We look through each post header until we reach post data.  Along the way we selectively populate file objects</span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                                    <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                                        j = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(ls, e);</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                                        <span class="keywordflow">if</span> (j &gt;= e) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                                            <span class="comment">// Error no more, oh</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                        }</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                        <span class="keywordflow">if</span> (j == (1+ls)) {</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                            <span class="comment">// End of post headers, start of data</span></div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                        }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                        <span class="comment">// Find header &quot;name: &quot;</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                        t = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(ls, <span class="stringliteral">&quot;: \r&quot;</span>, <span class="keyword">false</span>, j);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                        <span class="keywordflow">if</span> (t&gt;=j || (t&lt;j &amp;&amp; <span class="charliteral">&#39;:&#39;</span>!=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t])) {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                            <span class="comment">// Skip to end of line.  Shouldn&#39;t really get here??</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                            ls = j + 1;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                        }</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[t] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> = 0;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                        t = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(t+1, <span class="stringliteral">&quot; &quot;</span>, <span class="keyword">true</span>, j);</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160; </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                        i = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">BuildStringSet</a>(t, <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>, 0, j);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                        <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>) {</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                            <span class="keywordflow">if</span> (0 == <a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[ls], <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;content-type&quot;</span>), 12, <span class="keyword">false</span>)) {</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                                <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>* vs = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(0)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ThisPtr</a>();</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160; </div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                                vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">TrimQuotes</a>();</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                                <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_file_string.htm#a969586241cde8fe2e12d90820c28d373">mimetype</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()));</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                            }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (0 == <a class="code" href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">StringHelper::StrNCmp</a>(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[ls], <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;content-disposition&quot;</span>), 19, <span class="keyword">false</span>)) {</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                                int16_t si;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                                </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                                <span class="keywordflow">if</span> ((si = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">Find</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;name&quot;</span>)))&gt;=0) {</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                                    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>* vs = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(si))-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">value</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ThisPtr</a>();</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                                    vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">TrimQuotes</a>();</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()));</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160; </div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                                }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                                <span class="keywordflow">if</span> ((si = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">Find</a>(<a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;filename&quot;</span>)))&gt;=0) {</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                                                    <a class="code" href="classghttp_1_1_h_t_t_p_substring.htm">HTTPSubstring</a>* vs = <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(si))-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">value</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ThisPtr</a>();</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                                    vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">TrimQuotes</a>();</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_file_string.htm#af261f932b5edd13688d3227e7544de58">filename</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(vs-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>()));</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                                }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                                            }</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                                        }</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                                        ls = i+1;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                                    }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                                    <span class="comment">// CR+LF&lt;data&gt;CR+LF (so -4) as &#39;e&#39; points to boundary string start which is terminator for this file post and ls the last CR+LF before data</span></div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_file_string.htm#afcf455ad0656067fe6f3c47a2e72f8ca">filesize</a> = e - (ls + 4);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160; </div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                    <span class="comment">// Name is really the only important field</span></div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                    <span class="keywordflow">if</span> (<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>() &amp;&amp; strlen(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">Get</a>())) {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                        <span class="comment">// Set file data and we&#39;re done</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e-2] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(<a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">value</a>.<a class="code" href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">Set</a>(&amp;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[ls+2]);</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">post_file_variable</a>.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>++;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                    }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_POST_FILE_VARS == 1</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                } <span class="comment">// if (FindSubString(ls, e, &quot;filename&quot;) &gt;= e) =&gt; filename exists</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                            } <span class="comment">// if (FindSubString(ls, e, &quot;name&quot;) &lt; e) =&gt; name exists</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                        } <span class="comment">// if (FindSubString(ls, e, &quot;form-data&quot;) &lt; e) =&gt; form-data exists</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                    } <span class="comment">// if (j &lt; (e+1)) =&gt; CR+LF end of header line</span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                } <span class="comment">// if (ls) =&gt; 2nd or more boundary</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                ls = e + bsl + 4; <span class="comment">// &#39;-&#39; &#39;-&#39;  + &#39;CR&#39; &#39;LF&#39;</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                i = ls;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                i = e + 1;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160; </div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    } <span class="comment">// ProcessContent(...)</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="preprocessor">#endif // GHTTP_REQUEST_PROCESS_POST_VARS == 1</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160; </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">     * Build string set from a header where format expected &quot;Header: param1[=value]; param2[=value]; param3[=value]...&quot; and result string set is header data</span></div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">     * \note set.count isn&#39;t zeroed so can accumulate with multiple invokes of this function, useful when making multiple headers accessible from the same set</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment">     * \tparam SSN String set maximum</span></div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment">     * \param[in] i Start index of header string.  If skip_header_name false it should after colon otherwise will internally find and skip</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">     * \param[in] set Reference to string set to build/append to</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">     * \param[in] base Error code base for reporting correctly the errors found for different sets, default 0 (errors not reported via \ref GetLastError)</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">     * \param[in] max_i Maximum index where set building should terminate, default 0 =&gt; max_i = HTTPBuffer::GetLength</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment">     * \param[in] skip_header_name Flag indicating when true that index i points to entire header and that the name should be skipped, default false</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="comment">     * \return Last position processed within buffer (character index).  Upon error condition where \ref GetLastError indicates failure the index may help</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t SSN&gt;</div>
<div class="line"><a name="l00818"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">  818</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">BuildStringSet</a>(uint16_t i, <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;SSN&gt;</a> &amp;set, uint8_t base=0, uint32_t max_i=0, <span class="keyword">const</span> <span class="keywordtype">bool</span> skip_header_name=<span class="keyword">false</span>) {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        uint16_t e, el, eat;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160; </div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="keywordflow">if</span> (!max_i) {</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            max_i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        }</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160; </div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">if</span> (skip_header_name) {</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            <span class="comment">// Find end of header name</span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;: \r&quot;</span>), <span class="keyword">false</span>, max_i);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            <span class="keywordflow">if</span> (e&lt;max_i &amp;&amp; <span class="charliteral">&#39;:&#39;</span> == <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e]) {</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                <span class="comment">// Skip over search string characters to start of data</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(e, <span class="stringliteral">&quot;: &quot;</span>, <span class="keyword">true</span>, max_i);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            }</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        }</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160; </div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="comment">// Work until EOL</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        el = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">FindEOL</a>(i, max_i);</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="comment">// EOL?  Theoretically this should finish on &#39;\r&#39;</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            <span class="keywordflow">if</span> (i &gt;= el) {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                <span class="comment">// We&#39;re done</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            }</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160; </div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="keywordflow">if</span> (set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> == SSN) {</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                    <span class="comment">// Error to many parameters</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+2));</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                }</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            }</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160; </div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="comment">// Find end of current attribute+value string</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            eat = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;;\r&quot;</span>), <span class="keyword">false</span>, max_i);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="keywordflow">if</span> (eat==i || eat&gt;=max_i) {</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                <span class="comment">// Error bad name, well actually its a completely bad attribute</span></div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+0));</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                }</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            }</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            <span class="comment">// So between i - eat we have something like &quot;multipart/form-data;&quot; or &quot;boundary=----WebKitFormBoundarycbLpHx9jR5uFEQxZ&quot; etc.</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160; </div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <span class="comment">// For attrib/name</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot;=&quot;</span>, <span class="keyword">false</span>, eat);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <span class="keywordflow">if</span> (e==i) {</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                <span class="comment">// Error bad name, can&#39;t have = and not move i</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+0));</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                }</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            }</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">if</span> (e&lt;eat) {</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                <span class="comment">// name=value exists</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160; </div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="comment">// Set name</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot; &quot;</span>, <span class="keyword">true</span>, eat); <span class="comment">// Skip over any white space</span></div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                <span class="keywordflow">if</span> (i&gt;eat) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    <span class="comment">// Error bad name, can&#39;t have = and not move i</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+0));</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                    }</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160; </div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160; </div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                <span class="comment">// For value</span></div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot; &quot;</span>, <span class="keyword">true</span>, eat); <span class="comment">// Skip over any white space</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                <span class="keywordflow">if</span> (i&gt;eat) {</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                    <span class="comment">// Error bad value</span></div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                    <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+1));</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                    }</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                }</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, eat-i);</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>++;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                i = eat + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                <span class="comment">// Set name only, no =</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i,<span class="stringliteral">&quot; &quot;</span>, <span class="keyword">true</span>, eat); <span class="comment">// Skip over any white space</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                <span class="keywordflow">if</span> (i&gt;eat) {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                    <span class="comment">// Error bad name, can&#39;t have = and not move i</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                    <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                        <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+0));</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                    }</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                }</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, eat-i);</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, eat, 0);</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                set.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>++;</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                i = eat + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            }</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160; </div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160; </div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    } <span class="comment">// BuildStringSet(...)</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160; </div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment">     * Build string set from GET/POST variables, latter when content type is &quot;application/x-www-form-urlencoded&quot;.  Format of URL encoded data is </span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">     * paramName1=paramValue1[&amp;paramName2[=paramValue2]...]  (= or =&lt;value&gt; is optional)</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">     * \note set.count isn&#39;t zeroed so can accumulate with multiple invokes</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">     * \tparam SSN String set maximum</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment">     * \param[in] i Start index of header string.  If skip_header_name false it should after colon otherwise will internally find and skip</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">     * \param[in] v Reference to string set to build/append to</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">     * \param[in] base Error code base for reporting correctly the errors found for different sets, default 0 (errors not reported via \ref GetLastError)</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">     * \return Last position processed within buffer (character index).  Upon error condition where \ref GetLastError indicates failure the index may help</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t SSN&gt;</div>
<div class="line"><a name="l00934"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">  934</a></span>&#160;    uint16_t <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">BuildStringSetParseVariables</a>(uint16_t i, <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;SSN&gt;</a> &amp;v, uint8_t base=0) {</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        uint8_t d = 0;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        uint16_t e;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160; </div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;            e = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;&amp; \r&quot;</span>));</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;            <span class="keywordflow">if</span> (e&lt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a> &amp;&amp; <span class="charliteral">&#39;&amp;&#39;</span>!=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[e]) {</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                d = 1;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;            }</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            <span class="keywordflow">if</span> (!d &amp;&amp; (e==i || e&gt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>)) {</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                    <span class="comment">// Error bad parameter name</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+0));</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                }</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            }</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            <span class="keywordflow">if</span> (v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a> == SSN) {</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                    <span class="comment">// Error to many parameters</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+2));</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                }</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            }</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, e-i);</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160; </div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            i = <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">FindTerminator</a>(i, <a class="code" href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a>(<span class="stringliteral">&quot;= &amp;\r&quot;</span>), <span class="keyword">false</span>, e);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;            <span class="keywordflow">if</span> (i&gt;e || i&gt;<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                <span class="keywordflow">if</span> (base) {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    <span class="comment">// Error bad parameter value</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">Error</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a><span class="keyword">&gt;</span>(base+1));</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                }</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            }</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <span class="keywordflow">if</span> (<span class="charliteral">&#39;=&#39;</span> == <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i]) {</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// Write over equals to seperate parameter/value</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i+1, e-(i+1));</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                <span class="comment">// There is no value</span></div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                <a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>[i] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// Write over whatever</span></div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160; </div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;value.Set(<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">buffer_</a>, i, 0);    <span class="comment">// No value</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            }</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160; </div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            <span class="comment">// Decode parameter + value</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            <a class="code" href="classghttp_1_1_u_r_i.htm#a1415492151e4d133b36535a1384c9ea7">URI::Decode</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;Get()));</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            <a class="code" href="classghttp_1_1_u_r_i.htm#a1415492151e4d133b36535a1384c9ea7">URI::Decode</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">At</a>(v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>)-&gt;value.Get()));</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160; </div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            v.<a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">count</a>++;</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160; </div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            i = e + 1; <span class="comment">// Skip NULL</span></div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160; </div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            <span class="comment">// No more parameters</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keywordflow">if</span> (d || i&gt;=<a class="code" href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">length_</a>) {</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            }</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        }<span class="keywordflow">while</span>(1);</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160; </div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    } <span class="comment">// BuildStringSetParseVariables(...)</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160; </div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00995"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">  995</a></span>&#160;    uint16_t    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">port_</a>;                              <span class="comment">///&lt; Received port number</span></div>
<div class="line"><a name="l00996"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">  996</a></span>&#160;<span class="comment"></span>    uint16_t    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">content_length_</a>;                    <span class="comment">///&lt; Content length (Bytes/ASCII characters)</span></div>
<div class="line"><a name="l00997"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">  997</a></span>&#160;<span class="comment"></span>    uint16_t    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">eoh_index_</a>;                         <span class="comment">///&lt; End of headers index, setup by parser re-used in segmented parse operations</span></div>
<div class="line"><a name="l00998"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">  998</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ERR</a>            <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">last_error_</a>;                     <span class="comment">///&lt; Last error</span></div>
<div class="line"><a name="l00999"></a><span class="lineno"><a class="line" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">  999</a></span>&#160;<span class="comment"></span>    <a class="code" href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">HTTPAttrValueStringSet&lt;6&gt;</a> <a class="code" href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">tmp_</a>;                 <span class="comment">///&lt; Temporary use string set</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment"></span>}; <span class="comment">// class HTTPRequest</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160; </div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;}; <span class="comment">// namespace ghttp</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160; </div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="preprocessor">#endif // GHTTP_HTTPREQUEST_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ead9a600c438a976355b8fab73e437ad90"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead9a600c438a976355b8fab73e437ad90">ghttp::HTTPRequest::ERR_PARSE_BAD_COOKIE_TO_MANY</a></div><div class="ttdeci">@ ERR_PARSE_BAD_COOKIE_TO_MANY</div><div class="ttdoc">21 - Parse error. Processing header, to many cookies in set cannot add more</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:68</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea338c1b9925e3b6c58082646043ea5070"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea338c1b9925e3b6c58082646043ea5070">ghttp::HTTPRequest::ERR_PARSE_BAD_PROTOCOL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_PROTOCOL</div><div class="ttdoc">9 - Parse error. Bad protocol string</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:56</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_adfe59209c9d76426f03527b8a4f5b64d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#adfe59209c9d76426f03527b8a4f5b64d">ghttp::HTTPSubstring::TrimQuotes</a></div><div class="ttdeci">bool TrimQuotes()</div><div class="ttdoc">Trim quotes, either single or double.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:241</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_file_string_htm_af261f932b5edd13688d3227e7544de58"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_file_string.htm#af261f932b5edd13688d3227e7544de58">ghttp::HTTPAttrFileString::filename</a></div><div class="ttdeci">HTTPSubstring filename</div><div class="ttdoc">Filename of data upload.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrfilestring.h:18</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5ed56aa04818a6c85f7d3c1160afcd31"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5ed56aa04818a6c85f7d3c1160afcd31">ghttp::HTTPSubstring::ThisPtr</a></div><div class="ttdeci">HTTPSubstring * ThisPtr()</div><div class="ttdoc">This pointer accessor.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:88</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a2a1f4b7a0360a2379728d94a468183d0"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a2a1f4b7a0360a2379728d94a468183d0">ghttp::HTTPRequest::query_variable</a></div><div class="ttdeci">HTTPAttrValueStringSet&lt; V &gt; query_variable</div><div class="ttdoc">Query string set.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:96</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_aeeb9acdefa93179e395c6c7d7d001244"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#aeeb9acdefa93179e395c6c7d7d001244">ghttp::HTTPBuffer::GetLength</a></div><div class="ttdeci">uint16_t GetLength() const</div><div class="ttdoc">Get length.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:231</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ae4341892bc2cde526b65b4796815717a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ae4341892bc2cde526b65b4796815717a">ghttp::HTTPRequest::eoh_index_</a></div><div class="ttdeci">uint16_t eoh_index_</div><div class="ttdoc">End of headers index, setup by parser re-used in segmented parse operations.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:997</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_acca7e6e1d1e9ec6416f10ea5b87cb674"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#acca7e6e1d1e9ec6416f10ea5b87cb674">ghttp::HTTPRequest::ProcessContent</a></div><div class="ttdeci">uint16_t ProcessContent(uint16_t i, const char *boundary_str)</div><div class="ttdoc">Build string set for post variables from content when type &quot;multipart/form-data&quot;.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:647</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a0c2044695dc27a7e704943145d9d0a44"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a0c2044695dc27a7e704943145d9d0a44">ghttp::HTTPRequest::password</a></div><div class="ttdeci">HTTPSubstring password</div><div class="ttdoc">RFC 1738, Not from session but URL before .</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:84</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a5380fe9da2c5f26c93f358a1e70d338e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a5380fe9da2c5f26c93f358a1e70d338e">ghttp::HTTPRequest::url_raw</a></div><div class="ttdeci">HTTPSubstring url_raw</div><div class="ttdoc">RFC 1738, Not URL decoded. Does not include username or password if specified.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:80</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_file_string_htm_a969586241cde8fe2e12d90820c28d373"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_file_string.htm#a969586241cde8fe2e12d90820c28d373">ghttp::HTTPAttrFileString::mimetype</a></div><div class="ttdeci">HTTPSubstring mimetype</div><div class="ttdoc">Data content mime type for upload.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrfilestring.h:19</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_value_string_set_generic_htm_a4f73e5ab46676d576ba08dac1dd49317"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a4f73e5ab46676d576ba08dac1dd49317">ghttp::HTTPAttrValueStringSetGeneric::At</a></div><div class="ttdeci">T * At(const uint8_t index)</div><div class="ttdoc">Get at index use to access array elements N of instance T.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrvaluestringsetgeneric.h:39</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_file_string_set_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request_file_string_set.htm">ghttp::HTTPRequestFileStringSet&lt; FV &gt;</a></div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eaeeb2b92d7605d66416b0c02e79ecae83"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaeeb2b92d7605d66416b0c02e79ecae83">ghttp::HTTPRequest::ERR_PARSE_BAD_GET_PARAM_TO_MANY</a></div><div class="ttdeci">@ ERR_PARSE_BAD_GET_PARAM_TO_MANY</div><div class="ttdoc">8 - Parse error. To many GET parameters</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:55</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ead19faf40e062229b547ce23d583213bf"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead19faf40e062229b547ce23d583213bf">ghttp::HTTPRequest::ERR_PARSE_BAD_COOKIE_NAME</a></div><div class="ttdeci">@ ERR_PARSE_BAD_COOKIE_NAME</div><div class="ttdoc">19 - Parse error. Processing header, bad cookie name found</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:66</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_af54b8c135e509f16f2c2a12777856fce"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#af54b8c135e509f16f2c2a12777856fce">ghttp::HTTPRequest::post_variable</a></div><div class="ttdeci">HTTPAttrValueStringSet&lt; V &gt; post_variable</div><div class="ttdoc">Post string set.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:99</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eac3591822f80ddd5d301031acbd81676a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac3591822f80ddd5d301031acbd81676a">ghttp::HTTPRequest::ERR_PARSE_BAD_POST_FILE_PARAM_TO_MANY</a></div><div class="ttdeci">@ ERR_PARSE_BAD_POST_FILE_PARAM_TO_MANY</div><div class="ttdoc">25 - Parse error. To many POST FILE parameters, cannot add more</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:72</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_adf913c7a6e1c42863e112b7105afbc60"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#adf913c7a6e1c42863e112b7105afbc60">ghttp::HTTPRequest::tmp_</a></div><div class="ttdeci">HTTPAttrValueStringSet&lt; 6 &gt; tmp_</div><div class="ttdoc">Temporary use string set.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:999</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eaa735a15118339104b3de068c137b9400"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa735a15118339104b3de068c137b9400">ghttp::HTTPRequest::ERR_PARSE_BAD_POST_PARAM_TO_MANY</a></div><div class="ttdeci">@ ERR_PARSE_BAD_POST_PARAM_TO_MANY</div><div class="ttdoc">24 - Parse error. To many POST parameters, cannot add more</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:71</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab90e9ba06fbf79542e8bd43a6f293ec7"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab90e9ba06fbf79542e8bd43a6f293ec7">ghttp::HTTPRequest::BuildStringSetParseVariables</a></div><div class="ttdeci">uint16_t BuildStringSetParseVariables(uint16_t i, HTTPAttrValueStringSet&lt; SSN &gt; &amp;v, uint8_t base=0)</div><div class="ttdoc">Build string set from GET/POST variables, latter when content type is &quot;application/x-www-form-urlenco...</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:934</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ad9c24208c9eba1dbe55baf79379b8b48"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ad9c24208c9eba1dbe55baf79379b8b48">ghttp::HTTPRequest::url</a></div><div class="ttdeci">HTTPSubstring url</div><div class="ttdoc">RFC 1738, Decoded URL, i.e. route like /msg or / or /request etc.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:82</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a8a29f6da29e0bdc6f95db9863d52120e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a8a29f6da29e0bdc6f95db9863d52120e">ghttp::HTTPSubstring::Set</a></div><div class="ttdeci">void Set(char *buffer, const uint16_t start, const uint16_t length=0)</div><div class="ttdoc">Set string to given buffer with start character index and length (characters)</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:49</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76e">ghttp::HTTPRequest::ERR</a></div><div class="ttdeci">ERR</div><div class="ttdoc">Enum of possible request parse errors.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:46</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ead5e0d118d13f2b65dab99b12cfb62ee9"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ead5e0d118d13f2b65dab99b12cfb62ee9">ghttp::HTTPRequest::ERR_PARSE_BAD_HEADER_LINE_NO_EOL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_HEADER_LINE_NO_EOL</div><div class="ttdoc">16 - Parse error. Bad header line, termination of</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:63</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_aead2e9239c883aba938e11a653dde63d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#aead2e9239c883aba938e11a653dde63d">ghttp::HTTPRequest::Error</a></div><div class="ttdeci">void Error(const ERR e)</div><div class="ttdoc">Set error to be queried later by GetLastError.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:634</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a4ad6620d174410f7ffb1768bcf19e094"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a4ad6620d174410f7ffb1768bcf19e094">ghttp::HTTPRequest::protocol_version</a></div><div class="ttdeci">HTTPSubstring protocol_version</div><div class="ttdoc">RFC 1738, protocol version like 1.0, 1.1 etc.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:86</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eacba620c9f5f04fd66cc6c515e3bb1d34"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eacba620c9f5f04fd66cc6c515e3bb1d34">ghttp::HTTPRequest::ERR_PARSE_BAD_HEADER_LINE_SOL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_HEADER_LINE_SOL</div><div class="ttdoc">12 - Parse error. Bad header line string, unexpect data at SOL</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:59</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af63c63abb009ad0de97aee89ef979fd0"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af63c63abb009ad0de97aee89ef979fd0">ghttp::HTTPBuffer::buffer_</a></div><div class="ttdeci">char * buffer_</div><div class="ttdoc">Character buffer pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:741</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2b548a43f7d6cd0eff8f4091f5c6a651">ghttp::HTTPRequest::ERR_PARSE_BAD_METHOD</a></div><div class="ttdeci">@ ERR_PARSE_BAD_METHOD</div><div class="ttdoc">4 - Parse error. Bad method string</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:51</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eaa2a7b9c5b5cf08580e0a4ecb9cd6737d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa2a7b9c5b5cf08580e0a4ecb9cd6737d">ghttp::HTTPRequest::ERR_PARSE_BAD_HEADER_LINE_NAME</a></div><div class="ttdeci">@ ERR_PARSE_BAD_HEADER_LINE_NAME</div><div class="ttdoc">13 - Parse error. Bad header line string at attribute name</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:60</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_aeb2c83afa0323f15041def685227fe58"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#aeb2c83afa0323f15041def685227fe58">ghttp::HTTPRequest::GetContentLength</a></div><div class="ttdeci">uint16_t GetContentLength() const</div><div class="ttdoc">Get content length.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:624</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a138f7a346a7ecb5f97b1807177cdd41d"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a138f7a346a7ecb5f97b1807177cdd41d">ghttp::HTTPRequest::header</a></div><div class="ttdeci">HTTPAttrValueStringSet&lt; N &gt; header</div><div class="ttdoc">Header strings.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:105</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea9309d504ab8ad7447e65cfa741f2ec21"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9309d504ab8ad7447e65cfa741f2ec21">ghttp::HTTPRequest::ERR_PARSE_BAD_PROTOCOL_VERSION</a></div><div class="ttdeci">@ ERR_PARSE_BAD_PROTOCOL_VERSION</div><div class="ttdoc">10 - Parse error. Bad protocol version string</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:57</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a6cfdd178c67e707b55ce5683676d5c3b"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a6cfdd178c67e707b55ce5683676d5c3b">ghttp::HTTPRequest::protocol</a></div><div class="ttdeci">HTTPSubstring protocol</div><div class="ttdoc">RFC 1738, protocol like HTTP.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:85</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a0b4d9cd2c6a554adb2f08ce36e5a91d3"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a0b4d9cd2c6a554adb2f08ce36e5a91d3">ghttp::HTTPRequest::last_error_</a></div><div class="ttdeci">ERR last_error_</div><div class="ttdoc">Last error.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:998</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_value_string_htm_a00cfd872bbd0d47ff3c67a65371a57c9"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_value_string.htm#a00cfd872bbd0d47ff3c67a65371a57c9">ghttp::HTTPAttrValueString::value</a></div><div class="ttdeci">HTTPSubstring value</div><div class="ttdoc">Value substring.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrvaluestring.h:19</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_ac0ef2438e1c7ae3953641b6fa310cddb"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#ac0ef2438e1c7ae3953641b6fa310cddb">ghttp::HTTPBuffer::Clear</a></div><div class="ttdeci">void Clear(const bool zero_clear=false)</div><div class="ttdoc">Clear buffer, includes characteristics like length and offset.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:72</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af9c6fd75b8e2c829e43b086381e20b39"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af9c6fd75b8e2c829e43b086381e20b39">ghttp::HTTPBuffer::length_</a></div><div class="ttdeci">uint16_t length_</div><div class="ttdoc">Data in buffer, length in characters.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:738</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_file_string_htm_afcf455ad0656067fe6f3c47a2e72f8ca"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_file_string.htm#afcf455ad0656067fe6f3c47a2e72f8ca">ghttp::HTTPAttrFileString::filesize</a></div><div class="ttdeci">uint16_t filesize</div><div class="ttdoc">Filesize (Bytes) of data upload.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrfilestring.h:20</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a11963e969fbd5acbf446184131d983cd"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a11963e969fbd5acbf446184131d983cd">ghttp::HTTPRequest::HTTPRequest</a></div><div class="ttdeci">HTTPRequest()</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:119</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm">ghttp::HTTPRequest</a></div><div class="ttdoc">HTTP Request class with helpers to assist in the parsing of valid HTTP request messages,...</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:41</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea23278da017ab157c3536132cb4b2edbb">ghttp::HTTPRequest::ERR_PARSE_BAD_HEADER_LINE_VALUE</a></div><div class="ttdeci">@ ERR_PARSE_BAD_HEADER_LINE_VALUE</div><div class="ttdoc">14 - Parse error. Bad header line string at value</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:61</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_value_string_set_generic_htm_a7eacdb0a1eb44eb84f031088c7b608f8"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#a7eacdb0a1eb44eb84f031088c7b608f8">ghttp::HTTPAttrValueStringSetGeneric::Find</a></div><div class="ttdeci">int16_t Find(const char *str, const bool by_value=false, const bool case_sensitive=false, const uint16_t n=0)</div><div class="ttdoc">Search array for elements.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrvaluestringsetgeneric.h:89</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm">ghttp::HTTPBuffer</a></div><div class="ttdoc">A class for character buffering with an interface for string manipulation used during both request an...</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:16</div></div>
<div class="ttc" id="aclassghttp_1_1_u_r_i_htm_a1415492151e4d133b36535a1384c9ea7"><div class="ttname"><a href="classghttp_1_1_u_r_i.htm#a1415492151e4d133b36535a1384c9ea7">ghttp::URI::Decode</a></div><div class="ttdeci">static char * Decode(char *str, uint16_t l=0, const bool include_plus_space=true)</div><div class="ttdoc">Decode URI string.</div><div class="ttdef"><b>Definition:</b> ghttp_uri.h:26</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea0d19914b6f48abdf0f4e2a8e917902cb"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0d19914b6f48abdf0f4e2a8e917902cb">ghttp::HTTPRequest::ERR_PARSE_CONTENT_LENGTH_MISMATCH</a></div><div class="ttdeci">@ ERR_PARSE_CONTENT_LENGTH_MISMATCH</div><div class="ttdoc">18 - Parse error. Content length header string differs from actual (read) content length</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:65</div></div>
<div class="ttc" id="aclassghttp_1_1_string_helper_htm_a8d4c0b67dae22d03c99186df179f143e"><div class="ttname"><a href="classghttp_1_1_string_helper.htm#a8d4c0b67dae22d03c99186df179f143e">ghttp::StringHelper::FindTerminator</a></div><div class="ttdeci">static uint16_t FindTerminator(uint16_t i, const char *src, const char *include_special, bool invert_special_only=false, uint16_t src_max=0)</div><div class="ttdoc">Find terminator character using characters from given terminator string.</div><div class="ttdef"><b>Definition:</b> ghttp_stringhelper.h:157</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_abe80b46c74b8bc40984c8533e581614f"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#abe80b46c74b8bc40984c8533e581614f">ghttp::HTTPRequest::method</a></div><div class="ttdeci">HTTPSubstring method</div><div class="ttdoc">RFC 1738, URL method.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:81</div></div>
<div class="ttc" id="aclassghttp_1_1_string_helper_htm_a2e789168250978f50f329eb6aa647240"><div class="ttname"><a href="classghttp_1_1_string_helper.htm#a2e789168250978f50f329eb6aa647240">ghttp::StringHelper::StrNCmp</a></div><div class="ttdeci">static int16_t StrNCmp(const char *s1, const char *s2, const uint16_t s2_max=0, const bool case_sensitive=true)</div><div class="ttdoc">Alternative from strncmpi and strncmp.</div><div class="ttdef"><b>Definition:</b> ghttp_stringhelper.h:49</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eafc69a01ca888971abe5bac484b5c0368"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eafc69a01ca888971abe5bac484b5c0368">ghttp::HTTPRequest::ERR_PARSE_BAD_POST_PARAM_VALUE</a></div><div class="ttdeci">@ ERR_PARSE_BAD_POST_PARAM_VALUE</div><div class="ttdoc">23 - Parse error. Bad POST parameter value</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:70</div></div>
<div class="ttc" id="aghttp_8h_htm_a16a0f7e7053a679c9bf4289b441a2be7"><div class="ttname"><a href="ghttp_8h.htm#a16a0f7e7053a679c9bf4289b441a2be7">T</a></div><div class="ttdeci">#define T(x)</div><div class="ttdoc">Text marco.</div><div class="ttdef"><b>Definition:</b> ghttp.h:35</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_aad29184a4532f1e9bfaf279094d32d4f"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#aad29184a4532f1e9bfaf279094d32d4f">ghttp::HTTPRequest::port_</a></div><div class="ttdeci">uint16_t port_</div><div class="ttdoc">Received port number.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:995</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a6f05ea6c3a4966db723ee2fc3c9f2066"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a6f05ea6c3a4966db723ee2fc3c9f2066">ghttp::HTTPRequest::BuildStringSet</a></div><div class="ttdeci">uint16_t BuildStringSet(uint16_t i, HTTPAttrValueStringSet&lt; SSN &gt; &amp;set, uint8_t base=0, uint32_t max_i=0, const bool skip_header_name=false)</div><div class="ttdoc">Build string set from a header where format expected &quot;Header: param1[=value]; param2[=value]; param3[...</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:818</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a762b73d5273c2ccf934734c0bb98dda2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a762b73d5273c2ccf934734c0bb98dda2">ghttp::HTTPRequest::GetLastError</a></div><div class="ttdeci">ERR GetLastError() const</div><div class="ttdoc">Get last error.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:128</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea590d8981d5efa9e33982bfbf4e6e4ac2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea590d8981d5efa9e33982bfbf4e6e4ac2">ghttp::HTTPRequest::ERR_PARSE_BAD_URL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_URL</div><div class="ttdoc">5 - Parse error. Bad URL string</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:52</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm">ghttp::HTTPSubstring</a></div><div class="ttdoc">HTTP substring employed by both request and response processors.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:17</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea030eaf86bd425928d1897e1613e167b5">ghttp::HTTPRequest::ERR_NONE</a></div><div class="ttdeci">@ ERR_NONE</div><div class="ttdoc">0 - No error</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:47</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea74a87ed891720da5c3c0df96ee56cd5a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea74a87ed891720da5c3c0df96ee56cd5a">ghttp::HTTPRequest::ERR_PARSE_BAD_FIRST_LINE_NO_EOL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_FIRST_LINE_NO_EOL</div><div class="ttdoc">11 - Parse error. Bad first line, termination of</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:58</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea239f6cafd273456d33caf26af478ae04"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea239f6cafd273456d33caf26af478ae04">ghttp::HTTPRequest::ERR_PARSE_BAD_CTYPE_NAME</a></div><div class="ttdeci">@ ERR_PARSE_BAD_CTYPE_NAME</div><div class="ttdoc">26 - Parse error. Bad content type parameter name</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:73</div></div>
<div class="ttc" id="aclassghttp_1_1_m_i_m_e_base64_htm_ae92bf767427d19b6698a46b1d361eb3f"><div class="ttname"><a href="classghttp_1_1_m_i_m_e_base64.htm#ae92bf767427d19b6698a46b1d361eb3f">ghttp::MIMEBase64::Decode</a></div><div class="ttdeci">static char * Decode(const char *s, char *d, const uint16_t d_len, const uint16_t s_len=0)</div><div class="ttdoc">Base64 decode into ASCII string.</div><div class="ttdef"><b>Definition:</b> ghttp_mimebase64.h:208</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a7a4f3bdf890006fe8d46d34ee163929a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a7a4f3bdf890006fe8d46d34ee163929a">ghttp::HTTPBuffer::FindTerminator</a></div><div class="ttdeci">uint16_t FindTerminator(uint16_t i, const char *include_special, bool invert_special_only=false, uint16_t i_max=0) const</div><div class="ttdoc">Find terminator characters.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:689</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_a4c35bfb11f81b600251c629fc55b61d0"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#a4c35bfb11f81b600251c629fc55b61d0">ghttp::HTTPBuffer::max_length_</a></div><div class="ttdeci">uint16_t max_length_</div><div class="ttdoc">Maximum data in buffer in characters.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:739</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab0a4f01bfba2cb2a460440c0001a1303"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab0a4f01bfba2cb2a460440c0001a1303">ghttp::HTTPRequest::Parse</a></div><div class="ttdeci">uint16_t Parse(char *request_buffer, uint16_t length, uint16_t max_length, const bool parse_content=true, const bool segmentation=true)</div><div class="ttdoc">Request parse.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:158</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a95fbf7605fca7868d41547c57750e17e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a95fbf7605fca7868d41547c57750e17e">ghttp::HTTPSubstring::Null</a></div><div class="ttdeci">void Null()</div><div class="ttdoc">Make string pointer NULL.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:78</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea66cd3a56dfa17d2503463f388c3a454e"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea66cd3a56dfa17d2503463f388c3a454e">ghttp::HTTPRequest::ERR_PARSE_BAD_FIRST_LINE_SOL</a></div><div class="ttdeci">@ ERR_PARSE_BAD_FIRST_LINE_SOL</div><div class="ttdoc">3 - Parse error. First line contained unexpected data at SOL</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:50</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_cookie_jar_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request_cookie_jar.htm">ghttp::HTTPRequestCookieJar</a></div><div class="ttdoc">A container class representing a cookie jar, use during request processing.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequestcookiejar.h:19</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eac0dd4f757e2f3cab80159bfb9987a950"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eac0dd4f757e2f3cab80159bfb9987a950">ghttp::HTTPRequest::ERR_PARSE_BAD_GET_PARAM_NAME</a></div><div class="ttdeci">@ ERR_PARSE_BAD_GET_PARAM_NAME</div><div class="ttdoc">6 - Parse error. Bad GET parameter name</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:53</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a74a1ca05d766c2aec5f17d326678d0b4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a74a1ca05d766c2aec5f17d326678d0b4">ghttp::HTTPRequest::post_file_variable</a></div><div class="ttdeci">HTTPRequestFileStringSet&lt; FV &gt; post_file_variable</div><div class="ttdoc">Post file string set.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:101</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eaa9f1dfb0a8bbbca9636a551fd4e7df85"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eaa9f1dfb0a8bbbca9636a551fd4e7df85">ghttp::HTTPRequest::ERR_PARSE_BAD_CTYPE_VALUE</a></div><div class="ttdeci">@ ERR_PARSE_BAD_CTYPE_VALUE</div><div class="ttdoc">27 - Parse error. Bad content type parameter value</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:74</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eae9ede3d08d5483d9ad63bda45fdfa0ee"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae9ede3d08d5483d9ad63bda45fdfa0ee">ghttp::HTTPRequest::ERR_PARSE_HEADER_LIMIT</a></div><div class="ttdeci">@ ERR_PARSE_HEADER_LIMIT</div><div class="ttdoc">15 - Parse error. Header string limit reached when appending data</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:62</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a711ddfb854ef9521c3e35b5d66a95bed"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a711ddfb854ef9521c3e35b5d66a95bed">ghttp::HTTPSubstring::StrNCmp</a></div><div class="ttdeci">int16_t StrNCmp(const char *s2, const bool case_sensitive=false, uint16_t n=0) const</div><div class="ttdoc">String compare with controllable properties like length and case sensitivity.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:187</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a0026fa15619468fd03a3f146dd4d180c"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a0026fa15619468fd03a3f146dd4d180c">ghttp::HTTPRequest::content</a></div><div class="ttdeci">HTTPSubstring content</div><div class="ttdoc">Content after headers. May only contain first string if POST decoded.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:87</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea9c226931afe0b16c0e524758579f834c"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea9c226931afe0b16c0e524758579f834c">ghttp::HTTPRequest::ERR_PARSE_BAD_POST_PARAM_NAME</a></div><div class="ttdeci">@ ERR_PARSE_BAD_POST_PARAM_NAME</div><div class="ttdoc">22 - Parse error. Bad POST parameter name</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:69</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_substring_htm_a5fb7bb7479294882fcec864ccd6024a2"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_substring.htm#a5fb7bb7479294882fcec864ccd6024a2">ghttp::HTTPSubstring::Get</a></div><div class="ttdeci">const char * Get() const</div><div class="ttdoc">Get string pointer.</div><div class="ttdef"><b>Definition:</b> ghttp_httpsubstring.h:70</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_value_string_set_generic_htm_acfc08f21caf200e841774ba4b1fc5600"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_value_string_set_generic.htm#acfc08f21caf200e841774ba4b1fc5600">ghttp::HTTPAttrValueStringSetGeneric::count</a></div><div class="ttdeci">uint8_t count</div><div class="ttdoc">Array count.</div><div class="ttdef"><b>Definition:</b> ghttp_httpattrvaluestringsetgeneric.h:24</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_af3edcde6636f7e28e3fb2fd54dbb97cc"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#af3edcde6636f7e28e3fb2fd54dbb97cc">ghttp::HTTPBuffer::FindSubString</a></div><div class="ttdeci">uint16_t FindSubString(uint16_t i, uint16_t ei, const char *str, uint16_t str_length_max=0) const</div><div class="ttdoc">Search for a substring, case sensitive.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:671</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a1b89a51323023a9b752baf43de5062e7"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a1b89a51323023a9b752baf43de5062e7">ghttp::HTTPRequest::content_length_</a></div><div class="ttdeci">uint16_t content_length_</div><div class="ttdoc">Content length (Bytes/ASCII characters)</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:996</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea65684557d691b33e43ffa3f4d1c817da"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea65684557d691b33e43ffa3f4d1c817da">ghttp::HTTPRequest::ERR_PARSE_BAD_CTYPE_TO_MANY</a></div><div class="ttdeci">@ ERR_PARSE_BAD_CTYPE_TO_MANY</div><div class="ttdoc">28 - Parse error. To many content type parameters, cannot add more</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:75</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea0f0743cd79b1bc7d5ae961153dc6fed5"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea0f0743cd79b1bc7d5ae961153dc6fed5">ghttp::HTTPRequest::ERR_PARSE_BAD_COOKIE_VALUE</a></div><div class="ttdeci">@ ERR_PARSE_BAD_COOKIE_VALUE</div><div class="ttdoc">20 - Parse error. Processing header, bad cookie value found</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:67</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a8d91274b73d4c754106188c729f750ca"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a8d91274b73d4c754106188c729f750ca">ghttp::HTTPRequest::cookie</a></div><div class="ttdeci">HTTPRequestCookieJar&lt; CN &gt; cookie</div><div class="ttdoc">Cookie strings.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:108</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a94291c230f517724d4ae0e8b1826bab4"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a94291c230f517724d4ae0e8b1826bab4">ghttp::HTTPRequest::username</a></div><div class="ttdeci">HTTPSubstring username</div><div class="ttdoc">RFC 1738, Not from session but URL before .</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:83</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea97411748eed7816ada89724ca046ee99"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea97411748eed7816ada89724ca046ee99">ghttp::HTTPRequest::ERR_PARSE_BAD_GET_PARAM_VALUE</a></div><div class="ttdeci">@ ERR_PARSE_BAD_GET_PARAM_VALUE</div><div class="ttdoc">7 - Parse error. Bad GET parameter value</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:54</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_a53e3a092d490ae6d52d957f7831b06f6"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#a53e3a092d490ae6d52d957f7831b06f6">ghttp::HTTPRequest::content_type</a></div><div class="ttdeci">HTTPAttrValueStringSet&lt; CT &gt; content_type</div><div class="ttdoc">Content string set.</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:95</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea2f591b8ae97ac1951ee6ee6b070ad982">ghttp::HTTPRequest::ERR_SEGMENTATION</a></div><div class="ttdeci">@ ERR_SEGMENTATION</div><div class="ttdoc">1 - Parse information. More data expected</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:48</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_buffer_htm_ad92fe71a7a36780718d9e044ab314c4a"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_buffer.htm#ad92fe71a7a36780718d9e044ab314c4a">ghttp::HTTPBuffer::FindEOL</a></div><div class="ttdeci">uint16_t FindEOL(uint16_t i, uint16_t ei) const</div><div class="ttdoc">Find end of line.</div><div class="ttdef"><b>Definition:</b> ghttp_httpbuffer.h:631</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76eae53ff981f4fe7186c3a402dcfc0e0447"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76eae53ff981f4fe7186c3a402dcfc0e0447">ghttp::HTTPRequest::ERR_PARSE_UNEXPECTED_DATA</a></div><div class="ttdeci">@ ERR_PARSE_UNEXPECTED_DATA</div><div class="ttdoc">17 - Parse error. To much data in request buffer</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:64</div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_attr_value_string_set_htm"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_attr_value_string_set.htm">ghttp::HTTPAttrValueStringSet&lt; CT &gt;</a></div></div>
<div class="ttc" id="aclassghttp_1_1_h_t_t_p_request_htm_ab7806a3e6e80d7179322be3f9e55a76ea33589a8091fc3a037c437084ac7fabbd"><div class="ttname"><a href="classghttp_1_1_h_t_t_p_request.htm#ab7806a3e6e80d7179322be3f9e55a76ea33589a8091fc3a037c437084ac7fabbd">ghttp::HTTPRequest::ERR_PARSE_EOF</a></div><div class="ttdeci">@ ERR_PARSE_EOF</div><div class="ttdoc">2 - Parse error. End of File =&gt; to much data sent from host</div><div class="ttdef"><b>Definition:</b> ghttp_httprequest.h:49</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_4270bfced15e0e73154b13468c7c9ad9.htm">core</a></li><li class="navelem"><a class="el" href="ghttp__httprequest_8h.htm">ghttp_httprequest.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 16:37:29 for ArduinoGHTTP by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
